<?php
/**
 * DataExtractsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * DataExtractsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataExtractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getDataExtractsEvents' => [
            'application/json',
        ],
        'getDataExtractsUserData' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDataExtractsEvents
     *
     * Get Events
     *
     * @param  string $event_name Event Name (required)
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getDataExtractsEvents($event_name, $from_date, $to_date, string $contentType = self::contentTypes['getDataExtractsEvents'][0])
    {
        list($response) = $this->getDataExtractsEventsWithHttpInfo($event_name, $from_date, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation getDataExtractsEventsWithHttpInfo
     *
     * Get Events
     *
     * @param  string $event_name Event Name (required)
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataExtractsEventsWithHttpInfo($event_name, $from_date, $to_date, string $contentType = self::contentTypes['getDataExtractsEvents'][0])
    {
        $request = $this->getDataExtractsEventsRequest($event_name, $from_date, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataExtractsEventsAsync
     *
     * Get Events
     *
     * @param  string $event_name Event Name (required)
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExtractsEventsAsync($event_name, $from_date, $to_date, string $contentType = self::contentTypes['getDataExtractsEvents'][0])
    {
        return $this->getDataExtractsEventsAsyncWithHttpInfo($event_name, $from_date, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataExtractsEventsAsyncWithHttpInfo
     *
     * Get Events
     *
     * @param  string $event_name Event Name (required)
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExtractsEventsAsyncWithHttpInfo($event_name, $from_date, $to_date, string $contentType = self::contentTypes['getDataExtractsEvents'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsEventResponse';
        $request = $this->getDataExtractsEventsRequest($event_name, $from_date, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataExtractsEvents'
     *
     * @param  string $event_name Event Name (required)
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataExtractsEventsRequest($event_name, $from_date, $to_date, string $contentType = self::contentTypes['getDataExtractsEvents'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling getDataExtractsEvents'
            );
        }

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling getDataExtractsEvents'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling getDataExtractsEvents'
            );
        }


        $resourcePath = '/dataExtracts/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_name,
            'eventName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataExtractsUserData
     *
     * Get userData
     *
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $login_name Login Name (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsUserData'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getDataExtractsUserData($from_date, $login_name, $to_date, string $contentType = self::contentTypes['getDataExtractsUserData'][0])
    {
        list($response) = $this->getDataExtractsUserDataWithHttpInfo($from_date, $login_name, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation getDataExtractsUserDataWithHttpInfo
     *
     * Get userData
     *
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $login_name Login Name (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsUserData'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataExtractsUserDataWithHttpInfo($from_date, $login_name, $to_date, string $contentType = self::contentTypes['getDataExtractsUserData'][0])
    {
        $request = $this->getDataExtractsUserDataRequest($from_date, $login_name, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataExtractsUserDataAsync
     *
     * Get userData
     *
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $login_name Login Name (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExtractsUserDataAsync($from_date, $login_name, $to_date, string $contentType = self::contentTypes['getDataExtractsUserData'][0])
    {
        return $this->getDataExtractsUserDataAsyncWithHttpInfo($from_date, $login_name, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataExtractsUserDataAsyncWithHttpInfo
     *
     * Get userData
     *
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $login_name Login Name (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExtractsUserDataAsyncWithHttpInfo($from_date, $login_name, $to_date, string $contentType = self::contentTypes['getDataExtractsUserData'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\DataExtractsUserDataResponse';
        $request = $this->getDataExtractsUserDataRequest($from_date, $login_name, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataExtractsUserData'
     *
     * @param  string $from_date From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $login_name Login Name (required)
     * @param  string $to_date To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExtractsUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataExtractsUserDataRequest($from_date, $login_name, $to_date, string $contentType = self::contentTypes['getDataExtractsUserData'][0])
    {

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling getDataExtractsUserData'
            );
        }

        // verify the required parameter 'login_name' is set
        if ($login_name === null || (is_array($login_name) && count($login_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_name when calling getDataExtractsUserData'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling getDataExtractsUserData'
            );
        }


        $resourcePath = '/dataExtracts/userData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_name,
            'loginName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
