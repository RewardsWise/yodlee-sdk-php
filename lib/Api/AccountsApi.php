<?php
/**
 * AccountsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createManualAccount' => [
            'application/json',
        ],
        'deleteAccount' => [
            'application/json',
        ],
        'evaluateAddress' => [
            'application/json',
        ],
        'getAccount' => [
            'application/json',
        ],
        'getAllAccounts' => [
            'application/json',
        ],
        'getAssociatedAccounts' => [
            'application/json',
        ],
        'getHistoricalBalances' => [
            'application/json',
        ],
        'getLatestBalances' => [
            'application/json',
        ],
        'migrateAccounts' => [
            'application/json',
        ],
        'updateAccount' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createManualAccount
     *
     * Add Manual Account
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreateAccountRequest $account_param accountParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManualAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function createManualAccount($account_param, string $contentType = self::contentTypes['createManualAccount'][0])
    {
        list($response) = $this->createManualAccountWithHttpInfo($account_param, $contentType);
        return $response;
    }

    /**
     * Operation createManualAccountWithHttpInfo
     *
     * Add Manual Account
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreateAccountRequest $account_param accountParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManualAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createManualAccountWithHttpInfo($account_param, string $contentType = self::contentTypes['createManualAccount'][0])
    {
        $request = $this->createManualAccountRequest($account_param, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createManualAccountAsync
     *
     * Add Manual Account
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreateAccountRequest $account_param accountParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManualAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManualAccountAsync($account_param, string $contentType = self::contentTypes['createManualAccount'][0])
    {
        return $this->createManualAccountAsyncWithHttpInfo($account_param, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createManualAccountAsyncWithHttpInfo
     *
     * Add Manual Account
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreateAccountRequest $account_param accountParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManualAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManualAccountAsyncWithHttpInfo($account_param, string $contentType = self::contentTypes['createManualAccount'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreatedAccountResponse';
        $request = $this->createManualAccountRequest($account_param, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createManualAccount'
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\CreateAccountRequest $account_param accountParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManualAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createManualAccountRequest($account_param, string $contentType = self::contentTypes['createManualAccount'][0])
    {

        // verify the required parameter 'account_param' is set
        if ($account_param === null || (is_array($account_param) && count($account_param) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_param when calling createManualAccount'
            );
        }


        $resourcePath = '/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_param)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_param));
            } else {
                $httpBody = $account_param;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccount
     *
     * Delete Account
     *
     * @param  int $account_id accountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccount($account_id, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $this->deleteAccountWithHttpInfo($account_id, $contentType);
    }

    /**
     * Operation deleteAccountWithHttpInfo
     *
     * Delete Account
     *
     * @param  int $account_id accountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountWithHttpInfo($account_id, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $request = $this->deleteAccountRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteAccountAsync
     *
     * Delete Account
     *
     * @param  int $account_id accountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountAsync($account_id, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        return $this->deleteAccountAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountAsyncWithHttpInfo
     *
     * Delete Account
     *
     * @param  int $account_id accountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $returnType = '';
        $request = $this->deleteAccountRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccount'
     *
     * @param  int $account_id accountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccountRequest($account_id, string $contentType = self::contentTypes['deleteAccount'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling deleteAccount'
            );
        }


        $resourcePath = '/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation evaluateAddress
     *
     * Evaluate Address
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressRequest $address_param addressParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['evaluateAddress'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function evaluateAddress($address_param, string $contentType = self::contentTypes['evaluateAddress'][0])
    {
        list($response) = $this->evaluateAddressWithHttpInfo($address_param, $contentType);
        return $response;
    }

    /**
     * Operation evaluateAddressWithHttpInfo
     *
     * Evaluate Address
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressRequest $address_param addressParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['evaluateAddress'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluateAddressWithHttpInfo($address_param, string $contentType = self::contentTypes['evaluateAddress'][0])
    {
        $request = $this->evaluateAddressRequest($address_param, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation evaluateAddressAsync
     *
     * Evaluate Address
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressRequest $address_param addressParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['evaluateAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateAddressAsync($address_param, string $contentType = self::contentTypes['evaluateAddress'][0])
    {
        return $this->evaluateAddressAsyncWithHttpInfo($address_param, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation evaluateAddressAsyncWithHttpInfo
     *
     * Evaluate Address
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressRequest $address_param addressParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['evaluateAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateAddressAsyncWithHttpInfo($address_param, string $contentType = self::contentTypes['evaluateAddress'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressResponse';
        $request = $this->evaluateAddressRequest($address_param, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'evaluateAddress'
     *
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\EvaluateAddressRequest $address_param addressParam (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['evaluateAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function evaluateAddressRequest($address_param, string $contentType = self::contentTypes['evaluateAddress'][0])
    {

        // verify the required parameter 'address_param' is set
        if ($address_param === null || (is_array($address_param) && count($address_param) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_param when calling evaluateAddress'
            );
        }


        $resourcePath = '/accounts/evaluateAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($address_param)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($address_param));
            } else {
                $httpBody = $address_param;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccount
     *
     * Get Account Details
     *
     * @param  int $account_id accountId (required)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse
     */
    public function getAccount($account_id, $convert_to_currency = null, $include = null, string $contentType = self::contentTypes['getAccount'][0])
    {
        list($response) = $this->getAccountWithHttpInfo($account_id, $convert_to_currency, $include, $contentType);
        return $response;
    }

    /**
     * Operation getAccountWithHttpInfo
     *
     * Get Account Details
     *
     * @param  int $account_id accountId (required)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountWithHttpInfo($account_id, $convert_to_currency = null, $include = null, string $contentType = self::contentTypes['getAccount'][0])
    {
        $request = $this->getAccountRequest($account_id, $convert_to_currency, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAccountAsync
     *
     * Get Account Details
     *
     * @param  int $account_id accountId (required)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsync($account_id, $convert_to_currency = null, $include = null, string $contentType = self::contentTypes['getAccount'][0])
    {
        return $this->getAccountAsyncWithHttpInfo($account_id, $convert_to_currency, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAsyncWithHttpInfo
     *
     * Get Account Details
     *
     * @param  int $account_id accountId (required)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsyncWithHttpInfo($account_id, $convert_to_currency = null, $include = null, string $contentType = self::contentTypes['getAccount'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse';
        $request = $this->getAccountRequest($account_id, $convert_to_currency, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccount'
     *
     * @param  int $account_id accountId (required)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountRequest($account_id, $convert_to_currency = null, $include = null, string $contentType = self::contentTypes['getAccount'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccount'
            );
        }




        $resourcePath = '/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $convert_to_currency,
            'convertToCurrency', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAccounts
     *
     * Get Accounts
     *
     * @param  string|null $account_id Comma separated accountIds. (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;br&gt;&lt;li&gt;profile is deprecated, and to retrieve the profile information, call the GET /verification/holderProfile API instead.&lt;/li&gt; (optional)
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string|null $request_id The unique identifier that returns contextual data (optional)
     * @param  string|null $status ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getAllAccounts($account_id = null, $container = null, $convert_to_currency = null, $include = null, $provider_account_id = null, $request_id = null, $status = null, string $contentType = self::contentTypes['getAllAccounts'][0])
    {
        list($response) = $this->getAllAccountsWithHttpInfo($account_id, $container, $convert_to_currency, $include, $provider_account_id, $request_id, $status, $contentType);
        return $response;
    }

    /**
     * Operation getAllAccountsWithHttpInfo
     *
     * Get Accounts
     *
     * @param  string|null $account_id Comma separated accountIds. (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;br&gt;&lt;li&gt;profile is deprecated, and to retrieve the profile information, call the GET /verification/holderProfile API instead.&lt;/li&gt; (optional)
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string|null $request_id The unique identifier that returns contextual data (optional)
     * @param  string|null $status ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAccountsWithHttpInfo($account_id = null, $container = null, $convert_to_currency = null, $include = null, $provider_account_id = null, $request_id = null, $status = null, string $contentType = self::contentTypes['getAllAccounts'][0])
    {
        $request = $this->getAllAccountsRequest($account_id, $container, $convert_to_currency, $include, $provider_account_id, $request_id, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAllAccountsAsync
     *
     * Get Accounts
     *
     * @param  string|null $account_id Comma separated accountIds. (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;br&gt;&lt;li&gt;profile is deprecated, and to retrieve the profile information, call the GET /verification/holderProfile API instead.&lt;/li&gt; (optional)
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string|null $request_id The unique identifier that returns contextual data (optional)
     * @param  string|null $status ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountsAsync($account_id = null, $container = null, $convert_to_currency = null, $include = null, $provider_account_id = null, $request_id = null, $status = null, string $contentType = self::contentTypes['getAllAccounts'][0])
    {
        return $this->getAllAccountsAsyncWithHttpInfo($account_id, $container, $convert_to_currency, $include, $provider_account_id, $request_id, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAccountsAsyncWithHttpInfo
     *
     * Get Accounts
     *
     * @param  string|null $account_id Comma separated accountIds. (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;br&gt;&lt;li&gt;profile is deprecated, and to retrieve the profile information, call the GET /verification/holderProfile API instead.&lt;/li&gt; (optional)
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string|null $request_id The unique identifier that returns contextual data (optional)
     * @param  string|null $status ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountsAsyncWithHttpInfo($account_id = null, $container = null, $convert_to_currency = null, $include = null, $provider_account_id = null, $request_id = null, $status = null, string $contentType = self::contentTypes['getAllAccounts'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountResponse';
        $request = $this->getAllAccountsRequest($account_id, $container, $convert_to_currency, $include, $provider_account_id, $request_id, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAccounts'
     *
     * @param  string|null $account_id Comma separated accountIds. (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $include profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;br&gt;&lt;li&gt;profile is deprecated, and to retrieve the profile information, call the GET /verification/holderProfile API instead.&lt;/li&gt; (optional)
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string|null $request_id The unique identifier that returns contextual data (optional)
     * @param  string|null $status ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllAccountsRequest($account_id = null, $container = null, $convert_to_currency = null, $include = null, $provider_account_id = null, $request_id = null, $status = null, string $contentType = self::contentTypes['getAllAccounts'][0])
    {









        $resourcePath = '/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $container,
            'container', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $convert_to_currency,
            'convertToCurrency', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_account_id,
            'providerAccountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_id,
            'requestId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssociatedAccounts
     *
     * Associated Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssociatedAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getAssociatedAccounts($provider_account_id, string $contentType = self::contentTypes['getAssociatedAccounts'][0])
    {
        list($response) = $this->getAssociatedAccountsWithHttpInfo($provider_account_id, $contentType);
        return $response;
    }

    /**
     * Operation getAssociatedAccountsWithHttpInfo
     *
     * Associated Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssociatedAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssociatedAccountsWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['getAssociatedAccounts'][0])
    {
        $request = $this->getAssociatedAccountsRequest($provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssociatedAccountsAsync
     *
     * Associated Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssociatedAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssociatedAccountsAsync($provider_account_id, string $contentType = self::contentTypes['getAssociatedAccounts'][0])
    {
        return $this->getAssociatedAccountsAsyncWithHttpInfo($provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssociatedAccountsAsyncWithHttpInfo
     *
     * Associated Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssociatedAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssociatedAccountsAsyncWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['getAssociatedAccounts'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AssociatedAccountsResponse';
        $request = $this->getAssociatedAccountsRequest($provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssociatedAccounts'
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssociatedAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssociatedAccountsRequest($provider_account_id, string $contentType = self::contentTypes['getAssociatedAccounts'][0])
    {

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling getAssociatedAccounts'
            );
        }


        $resourcePath = '/accounts/associatedAccounts/{providerAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($provider_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'providerAccountId' . '}',
                ObjectSerializer::toPathValue($provider_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricalBalances
     *
     * Get Historical Balances
     *
     * @param  string|null $account_id accountId (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  bool|null $include_cf Consider carry forward logic for missing balances (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricalBalances'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getHistoricalBalances($account_id = null, $from_date = null, $include_cf = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getHistoricalBalances'][0])
    {
        list($response) = $this->getHistoricalBalancesWithHttpInfo($account_id, $from_date, $include_cf, $interval, $skip, $to_date, $top, $contentType);
        return $response;
    }

    /**
     * Operation getHistoricalBalancesWithHttpInfo
     *
     * Get Historical Balances
     *
     * @param  string|null $account_id accountId (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  bool|null $include_cf Consider carry forward logic for missing balances (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricalBalances'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricalBalancesWithHttpInfo($account_id = null, $from_date = null, $include_cf = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getHistoricalBalances'][0])
    {
        $request = $this->getHistoricalBalancesRequest($account_id, $from_date, $include_cf, $interval, $skip, $to_date, $top, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHistoricalBalancesAsync
     *
     * Get Historical Balances
     *
     * @param  string|null $account_id accountId (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  bool|null $include_cf Consider carry forward logic for missing balances (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricalBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalBalancesAsync($account_id = null, $from_date = null, $include_cf = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getHistoricalBalances'][0])
    {
        return $this->getHistoricalBalancesAsyncWithHttpInfo($account_id, $from_date, $include_cf, $interval, $skip, $to_date, $top, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricalBalancesAsyncWithHttpInfo
     *
     * Get Historical Balances
     *
     * @param  string|null $account_id accountId (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  bool|null $include_cf Consider carry forward logic for missing balances (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricalBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalBalancesAsyncWithHttpInfo($account_id = null, $from_date = null, $include_cf = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getHistoricalBalances'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHistoricalBalancesResponse';
        $request = $this->getHistoricalBalancesRequest($account_id, $from_date, $include_cf, $interval, $skip, $to_date, $top, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricalBalances'
     *
     * @param  string|null $account_id accountId (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  bool|null $include_cf Consider carry forward logic for missing balances (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricalBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricalBalancesRequest($account_id = null, $from_date = null, $include_cf = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getHistoricalBalances'][0])
    {









        $resourcePath = '/accounts/historicalBalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_cf,
            'includeCF', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLatestBalances
     *
     * Get Latest Balances
     *
     * @param  string $account_id Comma separated accountIds. (required)
     * @param  string $provider_account_id providerAccountId. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestBalances'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getLatestBalances($account_id, $provider_account_id, string $contentType = self::contentTypes['getLatestBalances'][0])
    {
        list($response) = $this->getLatestBalancesWithHttpInfo($account_id, $provider_account_id, $contentType);
        return $response;
    }

    /**
     * Operation getLatestBalancesWithHttpInfo
     *
     * Get Latest Balances
     *
     * @param  string $account_id Comma separated accountIds. (required)
     * @param  string $provider_account_id providerAccountId. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestBalances'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLatestBalancesWithHttpInfo($account_id, $provider_account_id, string $contentType = self::contentTypes['getLatestBalances'][0])
    {
        $request = $this->getLatestBalancesRequest($account_id, $provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getLatestBalancesAsync
     *
     * Get Latest Balances
     *
     * @param  string $account_id Comma separated accountIds. (required)
     * @param  string $provider_account_id providerAccountId. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLatestBalancesAsync($account_id, $provider_account_id, string $contentType = self::contentTypes['getLatestBalances'][0])
    {
        return $this->getLatestBalancesAsyncWithHttpInfo($account_id, $provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLatestBalancesAsyncWithHttpInfo
     *
     * Get Latest Balances
     *
     * @param  string $account_id Comma separated accountIds. (required)
     * @param  string $provider_account_id providerAccountId. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLatestBalancesAsyncWithHttpInfo($account_id, $provider_account_id, string $contentType = self::contentTypes['getLatestBalances'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountBalanceResponse';
        $request = $this->getLatestBalancesRequest($account_id, $provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLatestBalances'
     *
     * @param  string $account_id Comma separated accountIds. (required)
     * @param  string $provider_account_id providerAccountId. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLatestBalancesRequest($account_id, $provider_account_id, string $contentType = self::contentTypes['getLatestBalances'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getLatestBalances'
            );
        }

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling getLatestBalances'
            );
        }


        $resourcePath = '/accounts/latestBalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_account_id,
            'providerAccountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrateAccounts
     *
     * Migrate Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function migrateAccounts($provider_account_id, string $contentType = self::contentTypes['migrateAccounts'][0])
    {
        list($response) = $this->migrateAccountsWithHttpInfo($provider_account_id, $contentType);
        return $response;
    }

    /**
     * Operation migrateAccountsWithHttpInfo
     *
     * Migrate Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateAccounts'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse|\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrateAccountsWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['migrateAccounts'][0])
    {
        $request = $this->migrateAccountsRequest($provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation migrateAccountsAsync
     *
     * Migrate Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateAccountsAsync($provider_account_id, string $contentType = self::contentTypes['migrateAccounts'][0])
    {
        return $this->migrateAccountsAsyncWithHttpInfo($provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation migrateAccountsAsyncWithHttpInfo
     *
     * Migrate Accounts
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateAccountsAsyncWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['migrateAccounts'][0])
    {
        $returnType = '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountMigrationResponse';
        $request = $this->migrateAccountsRequest($provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'migrateAccounts'
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrateAccountsRequest($provider_account_id, string $contentType = self::contentTypes['migrateAccounts'][0])
    {

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling migrateAccounts'
            );
        }


        $resourcePath = '/accounts/migrateAccounts/{providerAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($provider_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'providerAccountId' . '}',
                ObjectSerializer::toPathValue($provider_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccount
     *
     * Update Account
     *
     * @param  int $account_id accountId (required)
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateAccountRequest $account_request accountRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAccount($account_id, $account_request, string $contentType = self::contentTypes['updateAccount'][0])
    {
        $this->updateAccountWithHttpInfo($account_id, $account_request, $contentType);
    }

    /**
     * Operation updateAccountWithHttpInfo
     *
     * Update Account
     *
     * @param  int $account_id accountId (required)
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateAccountRequest $account_request accountRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountWithHttpInfo($account_id, $account_request, string $contentType = self::contentTypes['updateAccount'][0])
    {
        $request = $this->updateAccountRequest($account_id, $account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateAccountAsync
     *
     * Update Account
     *
     * @param  int $account_id accountId (required)
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateAccountRequest $account_request accountRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountAsync($account_id, $account_request, string $contentType = self::contentTypes['updateAccount'][0])
    {
        return $this->updateAccountAsyncWithHttpInfo($account_id, $account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountAsyncWithHttpInfo
     *
     * Update Account
     *
     * @param  int $account_id accountId (required)
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateAccountRequest $account_request accountRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountAsyncWithHttpInfo($account_id, $account_request, string $contentType = self::contentTypes['updateAccount'][0])
    {
        $returnType = '';
        $request = $this->updateAccountRequest($account_id, $account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccount'
     *
     * @param  int $account_id accountId (required)
     * @param  \RewardsWise\Yodlee\RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateAccountRequest $account_request accountRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountRequest($account_id, $account_request, string $contentType = self::contentTypes['updateAccount'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling updateAccount'
            );
        }

        // verify the required parameter 'account_request' is set
        if ($account_request === null || (is_array($account_request) && count($account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_request when calling updateAccount'
            );
        }


        $resourcePath = '/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_request));
            } else {
                $httpBody = $account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
