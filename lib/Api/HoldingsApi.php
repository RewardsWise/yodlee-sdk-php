<?php
/**
 * HoldingsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * HoldingsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HoldingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addHolding' => [
            'application/json',
        ],
        'getAssetClassificationList' => [
            'application/json',
        ],
        'getHoldingTypeList' => [
            'application/json',
        ],
        'getHoldings' => [
            'application/json',
        ],
        'getSecurities' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addHolding
     *
     * Add Holding
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingRequest $add_holding_request addHoldingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addHolding'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function addHolding($add_holding_request, string $contentType = self::contentTypes['addHolding'][0])
    {
        list($response) = $this->addHoldingWithHttpInfo($add_holding_request, $contentType);
        return $response;
    }

    /**
     * Operation addHoldingWithHttpInfo
     *
     * Add Holding
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingRequest $add_holding_request addHoldingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addHolding'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function addHoldingWithHttpInfo($add_holding_request, string $contentType = self::contentTypes['addHolding'][0])
    {
        $request = $this->addHoldingRequest($add_holding_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addHoldingAsync
     *
     * Add Holding
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingRequest $add_holding_request addHoldingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addHolding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addHoldingAsync($add_holding_request, string $contentType = self::contentTypes['addHolding'][0])
    {
        return $this->addHoldingAsyncWithHttpInfo($add_holding_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addHoldingAsyncWithHttpInfo
     *
     * Add Holding
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingRequest $add_holding_request addHoldingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addHolding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addHoldingAsyncWithHttpInfo($add_holding_request, string $contentType = self::contentTypes['addHolding'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingIdListResponse';
        $request = $this->addHoldingRequest($add_holding_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addHolding'
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingRequest $add_holding_request addHoldingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addHolding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addHoldingRequest($add_holding_request, string $contentType = self::contentTypes['addHolding'][0])
    {

        // verify the required parameter 'add_holding_request' is set
        if ($add_holding_request === null || (is_array($add_holding_request) && count($add_holding_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_holding_request when calling addHolding'
            );
        }


        $resourcePath = '/holdings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_holding_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_holding_request));
            } else {
                $httpBody = $add_holding_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetClassificationList
     *
     * Get Asset Classification List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetClassificationList'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse
     */
    public function getAssetClassificationList(string $contentType = self::contentTypes['getAssetClassificationList'][0])
    {
        list($response) = $this->getAssetClassificationListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAssetClassificationListWithHttpInfo
     *
     * Get Asset Classification List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetClassificationList'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetClassificationListWithHttpInfo(string $contentType = self::contentTypes['getAssetClassificationList'][0])
    {
        $request = $this->getAssetClassificationListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssetClassificationListAsync
     *
     * Get Asset Classification List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetClassificationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetClassificationListAsync(string $contentType = self::contentTypes['getAssetClassificationList'][0])
    {
        return $this->getAssetClassificationListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetClassificationListAsyncWithHttpInfo
     *
     * Get Asset Classification List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetClassificationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetClassificationListAsyncWithHttpInfo(string $contentType = self::contentTypes['getAssetClassificationList'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingAssetClassificationListResponse';
        $request = $this->getAssetClassificationListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetClassificationList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetClassificationList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetClassificationListRequest(string $contentType = self::contentTypes['getAssetClassificationList'][0])
    {


        $resourcePath = '/holdings/assetClassificationList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHoldingTypeList
     *
     * Get Holding Type List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingTypeList'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse
     */
    public function getHoldingTypeList(string $contentType = self::contentTypes['getHoldingTypeList'][0])
    {
        list($response) = $this->getHoldingTypeListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getHoldingTypeListWithHttpInfo
     *
     * Get Holding Type List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingTypeList'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingTypeListWithHttpInfo(string $contentType = self::contentTypes['getHoldingTypeList'][0])
    {
        $request = $this->getHoldingTypeListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHoldingTypeListAsync
     *
     * Get Holding Type List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingTypeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingTypeListAsync(string $contentType = self::contentTypes['getHoldingTypeList'][0])
    {
        return $this->getHoldingTypeListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingTypeListAsyncWithHttpInfo
     *
     * Get Holding Type List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingTypeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingTypeListAsyncWithHttpInfo(string $contentType = self::contentTypes['getHoldingTypeList'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingTypeListResponse';
        $request = $this->getHoldingTypeListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldingTypeList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingTypeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHoldingTypeListRequest(string $contentType = self::contentTypes['getHoldingTypeList'][0])
    {


        $resourcePath = '/holdings/holdingTypeList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHoldings
     *
     * Get Holdings
     *
     * @param  string|null $account_id Comma separated accountId (optional)
     * @param  string|null $asset_classification_classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $classification_value e.g. US (optional)
     * @param  string|null $include assetClassification (optional)
     * @param  string|null $provider_account_id providerAccountId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldings'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getHoldings($account_id = null, $asset_classification_classification_type = null, $classification_value = null, $include = null, $provider_account_id = null, string $contentType = self::contentTypes['getHoldings'][0])
    {
        list($response) = $this->getHoldingsWithHttpInfo($account_id, $asset_classification_classification_type, $classification_value, $include, $provider_account_id, $contentType);
        return $response;
    }

    /**
     * Operation getHoldingsWithHttpInfo
     *
     * Get Holdings
     *
     * @param  string|null $account_id Comma separated accountId (optional)
     * @param  string|null $asset_classification_classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $classification_value e.g. US (optional)
     * @param  string|null $include assetClassification (optional)
     * @param  string|null $provider_account_id providerAccountId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldings'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingsWithHttpInfo($account_id = null, $asset_classification_classification_type = null, $classification_value = null, $include = null, $provider_account_id = null, string $contentType = self::contentTypes['getHoldings'][0])
    {
        $request = $this->getHoldingsRequest($account_id, $asset_classification_classification_type, $classification_value, $include, $provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHoldingsAsync
     *
     * Get Holdings
     *
     * @param  string|null $account_id Comma separated accountId (optional)
     * @param  string|null $asset_classification_classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $classification_value e.g. US (optional)
     * @param  string|null $include assetClassification (optional)
     * @param  string|null $provider_account_id providerAccountId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingsAsync($account_id = null, $asset_classification_classification_type = null, $classification_value = null, $include = null, $provider_account_id = null, string $contentType = self::contentTypes['getHoldings'][0])
    {
        return $this->getHoldingsAsyncWithHttpInfo($account_id, $asset_classification_classification_type, $classification_value, $include, $provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingsAsyncWithHttpInfo
     *
     * Get Holdings
     *
     * @param  string|null $account_id Comma separated accountId (optional)
     * @param  string|null $asset_classification_classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $classification_value e.g. US (optional)
     * @param  string|null $include assetClassification (optional)
     * @param  string|null $provider_account_id providerAccountId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingsAsyncWithHttpInfo($account_id = null, $asset_classification_classification_type = null, $classification_value = null, $include = null, $provider_account_id = null, string $contentType = self::contentTypes['getHoldings'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingResponse';
        $request = $this->getHoldingsRequest($account_id, $asset_classification_classification_type, $classification_value, $include, $provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldings'
     *
     * @param  string|null $account_id Comma separated accountId (optional)
     * @param  string|null $asset_classification_classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $classification_value e.g. US (optional)
     * @param  string|null $include assetClassification (optional)
     * @param  string|null $provider_account_id providerAccountId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHoldingsRequest($account_id = null, $asset_classification_classification_type = null, $classification_value = null, $include = null, $provider_account_id = null, string $contentType = self::contentTypes['getHoldings'][0])
    {







        $resourcePath = '/holdings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset_classification_classification_type,
            'assetClassification.classificationType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $classification_value,
            'classificationValue', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_account_id,
            'providerAccountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecurities
     *
     * Get Security Details
     *
     * @param  string|null $holding_id Comma separated holdingId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSecurities'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getSecurities($holding_id = null, string $contentType = self::contentTypes['getSecurities'][0])
    {
        list($response) = $this->getSecuritiesWithHttpInfo($holding_id, $contentType);
        return $response;
    }

    /**
     * Operation getSecuritiesWithHttpInfo
     *
     * Get Security Details
     *
     * @param  string|null $holding_id Comma separated holdingId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSecurities'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecuritiesWithHttpInfo($holding_id = null, string $contentType = self::contentTypes['getSecurities'][0])
    {
        $request = $this->getSecuritiesRequest($holding_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSecuritiesAsync
     *
     * Get Security Details
     *
     * @param  string|null $holding_id Comma separated holdingId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSecurities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecuritiesAsync($holding_id = null, string $contentType = self::contentTypes['getSecurities'][0])
    {
        return $this->getSecuritiesAsyncWithHttpInfo($holding_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecuritiesAsyncWithHttpInfo
     *
     * Get Security Details
     *
     * @param  string|null $holding_id Comma separated holdingId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSecurities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecuritiesAsyncWithHttpInfo($holding_id = null, string $contentType = self::contentTypes['getSecurities'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\HoldingSecuritiesResponse';
        $request = $this->getSecuritiesRequest($holding_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecurities'
     *
     * @param  string|null $holding_id Comma separated holdingId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSecurities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSecuritiesRequest($holding_id = null, string $contentType = self::contentTypes['getSecurities'][0])
    {



        $resourcePath = '/holdings/securities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $holding_id,
            'holdingId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
