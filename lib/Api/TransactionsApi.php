<?php
/**
 * TransactionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createOrRunTransactionCategorizationRules' => [
            'application/json',
        ],
        'createTransactionCategory' => [
            'application/json',
        ],
        'deleteTransactionCategorizationRule' => [
            'application/json',
        ],
        'deleteTransactionCategory' => [
            'application/json',
        ],
        'getTransactionCategories' => [
            'application/json',
        ],
        'getTransactionCategorizationRules' => [
            'application/json',
        ],
        'getTransactionCategorizationRulesDeprecated' => [
            'application/json',
        ],
        'getTransactions' => [
            'application/json',
        ],
        'getTransactionsCount' => [
            'application/json',
        ],
        'runTransactionCategorizationRule' => [
            'application/json',
        ],
        'updateTransaction' => [
            'application/json',
        ],
        'updateTransaction1' => [
            'application/json',
        ],
        'updateTransactionCategorizationRule' => [
            'application/json',
        ],
        'updateTransactionCategory' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrRunTransactionCategorizationRules
     *
     * Create or Run Transaction Categorization Rule
     *
     * @param  string|null $action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param  string|null $rule_param rules(JSON format) to categorize the transactions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrRunTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createOrRunTransactionCategorizationRules($action = null, $rule_param = null, string $contentType = self::contentTypes['createOrRunTransactionCategorizationRules'][0])
    {
        $this->createOrRunTransactionCategorizationRulesWithHttpInfo($action, $rule_param, $contentType);
    }

    /**
     * Operation createOrRunTransactionCategorizationRulesWithHttpInfo
     *
     * Create or Run Transaction Categorization Rule
     *
     * @param  string|null $action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param  string|null $rule_param rules(JSON format) to categorize the transactions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrRunTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrRunTransactionCategorizationRulesWithHttpInfo($action = null, $rule_param = null, string $contentType = self::contentTypes['createOrRunTransactionCategorizationRules'][0])
    {
        $request = $this->createOrRunTransactionCategorizationRulesRequest($action, $rule_param, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createOrRunTransactionCategorizationRulesAsync
     *
     * Create or Run Transaction Categorization Rule
     *
     * @param  string|null $action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param  string|null $rule_param rules(JSON format) to categorize the transactions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrRunTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrRunTransactionCategorizationRulesAsync($action = null, $rule_param = null, string $contentType = self::contentTypes['createOrRunTransactionCategorizationRules'][0])
    {
        return $this->createOrRunTransactionCategorizationRulesAsyncWithHttpInfo($action, $rule_param, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrRunTransactionCategorizationRulesAsyncWithHttpInfo
     *
     * Create or Run Transaction Categorization Rule
     *
     * @param  string|null $action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param  string|null $rule_param rules(JSON format) to categorize the transactions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrRunTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrRunTransactionCategorizationRulesAsyncWithHttpInfo($action = null, $rule_param = null, string $contentType = self::contentTypes['createOrRunTransactionCategorizationRules'][0])
    {
        $returnType = '';
        $request = $this->createOrRunTransactionCategorizationRulesRequest($action, $rule_param, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrRunTransactionCategorizationRules'
     *
     * @param  string|null $action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param  string|null $rule_param rules(JSON format) to categorize the transactions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrRunTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrRunTransactionCategorizationRulesRequest($action = null, $rule_param = null, string $contentType = self::contentTypes['createOrRunTransactionCategorizationRules'][0])
    {




        $resourcePath = '/transactions/categories/rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rule_param,
            'ruleParam', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTransactionCategory
     *
     * Create Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryRequest $transaction_category_request User Transaction Category in JSON format (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createTransactionCategory($transaction_category_request, string $contentType = self::contentTypes['createTransactionCategory'][0])
    {
        $this->createTransactionCategoryWithHttpInfo($transaction_category_request, $contentType);
    }

    /**
     * Operation createTransactionCategoryWithHttpInfo
     *
     * Create Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryRequest $transaction_category_request User Transaction Category in JSON format (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransactionCategoryWithHttpInfo($transaction_category_request, string $contentType = self::contentTypes['createTransactionCategory'][0])
    {
        $request = $this->createTransactionCategoryRequest($transaction_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createTransactionCategoryAsync
     *
     * Create Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryRequest $transaction_category_request User Transaction Category in JSON format (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransactionCategoryAsync($transaction_category_request, string $contentType = self::contentTypes['createTransactionCategory'][0])
    {
        return $this->createTransactionCategoryAsyncWithHttpInfo($transaction_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTransactionCategoryAsyncWithHttpInfo
     *
     * Create Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryRequest $transaction_category_request User Transaction Category in JSON format (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransactionCategoryAsyncWithHttpInfo($transaction_category_request, string $contentType = self::contentTypes['createTransactionCategory'][0])
    {
        $returnType = '';
        $request = $this->createTransactionCategoryRequest($transaction_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTransactionCategory'
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryRequest $transaction_category_request User Transaction Category in JSON format (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTransactionCategoryRequest($transaction_category_request, string $contentType = self::contentTypes['createTransactionCategory'][0])
    {

        // verify the required parameter 'transaction_category_request' is set
        if ($transaction_category_request === null || (is_array($transaction_category_request) && count($transaction_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_category_request when calling createTransactionCategory'
            );
        }


        $resourcePath = '/transactions/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction_category_request));
            } else {
                $httpBody = $transaction_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTransactionCategorizationRule
     *
     * Delete Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTransactionCategorizationRule($rule_id, string $contentType = self::contentTypes['deleteTransactionCategorizationRule'][0])
    {
        $this->deleteTransactionCategorizationRuleWithHttpInfo($rule_id, $contentType);
    }

    /**
     * Operation deleteTransactionCategorizationRuleWithHttpInfo
     *
     * Delete Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTransactionCategorizationRuleWithHttpInfo($rule_id, string $contentType = self::contentTypes['deleteTransactionCategorizationRule'][0])
    {
        $request = $this->deleteTransactionCategorizationRuleRequest($rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTransactionCategorizationRuleAsync
     *
     * Delete Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransactionCategorizationRuleAsync($rule_id, string $contentType = self::contentTypes['deleteTransactionCategorizationRule'][0])
    {
        return $this->deleteTransactionCategorizationRuleAsyncWithHttpInfo($rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTransactionCategorizationRuleAsyncWithHttpInfo
     *
     * Delete Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransactionCategorizationRuleAsyncWithHttpInfo($rule_id, string $contentType = self::contentTypes['deleteTransactionCategorizationRule'][0])
    {
        $returnType = '';
        $request = $this->deleteTransactionCategorizationRuleRequest($rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTransactionCategorizationRule'
     *
     * @param  int $rule_id ruleId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTransactionCategorizationRuleRequest($rule_id, string $contentType = self::contentTypes['deleteTransactionCategorizationRule'][0])
    {

        // verify the required parameter 'rule_id' is set
        if ($rule_id === null || (is_array($rule_id) && count($rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_id when calling deleteTransactionCategorizationRule'
            );
        }


        $resourcePath = '/transactions/categories/rules/{ruleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleId' . '}',
                ObjectSerializer::toPathValue($rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTransactionCategory
     *
     * Delete Category
     *
     * @param  int $category_id categoryId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTransactionCategory($category_id, string $contentType = self::contentTypes['deleteTransactionCategory'][0])
    {
        $this->deleteTransactionCategoryWithHttpInfo($category_id, $contentType);
    }

    /**
     * Operation deleteTransactionCategoryWithHttpInfo
     *
     * Delete Category
     *
     * @param  int $category_id categoryId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTransactionCategoryWithHttpInfo($category_id, string $contentType = self::contentTypes['deleteTransactionCategory'][0])
    {
        $request = $this->deleteTransactionCategoryRequest($category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTransactionCategoryAsync
     *
     * Delete Category
     *
     * @param  int $category_id categoryId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransactionCategoryAsync($category_id, string $contentType = self::contentTypes['deleteTransactionCategory'][0])
    {
        return $this->deleteTransactionCategoryAsyncWithHttpInfo($category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTransactionCategoryAsyncWithHttpInfo
     *
     * Delete Category
     *
     * @param  int $category_id categoryId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTransactionCategoryAsyncWithHttpInfo($category_id, string $contentType = self::contentTypes['deleteTransactionCategory'][0])
    {
        $returnType = '';
        $request = $this->deleteTransactionCategoryRequest($category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTransactionCategory'
     *
     * @param  int $category_id categoryId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTransactionCategoryRequest($category_id, string $contentType = self::contentTypes['deleteTransactionCategory'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling deleteTransactionCategory'
            );
        }


        $resourcePath = '/transactions/categories/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionCategories
     *
     * Get Transaction Category List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategories'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse
     */
    public function getTransactionCategories(string $contentType = self::contentTypes['getTransactionCategories'][0])
    {
        list($response) = $this->getTransactionCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getTransactionCategoriesWithHttpInfo
     *
     * Get Transaction Category List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategories'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionCategoriesWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategories'][0])
    {
        $request = $this->getTransactionCategoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionCategoriesAsync
     *
     * Get Transaction Category List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionCategoriesAsync(string $contentType = self::contentTypes['getTransactionCategories'][0])
    {
        return $this->getTransactionCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionCategoriesAsyncWithHttpInfo
     *
     * Get Transaction Category List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionCategoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategories'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategoryResponse';
        $request = $this->getTransactionCategoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionCategoriesRequest(string $contentType = self::contentTypes['getTransactionCategories'][0])
    {


        $resourcePath = '/transactions/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionCategorizationRules
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse
     */
    public function getTransactionCategorizationRules(string $contentType = self::contentTypes['getTransactionCategorizationRules'][0])
    {
        list($response) = $this->getTransactionCategorizationRulesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getTransactionCategorizationRulesWithHttpInfo
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionCategorizationRulesWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategorizationRules'][0])
    {
        $request = $this->getTransactionCategorizationRulesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionCategorizationRulesAsync
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionCategorizationRulesAsync(string $contentType = self::contentTypes['getTransactionCategorizationRules'][0])
    {
        return $this->getTransactionCategorizationRulesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionCategorizationRulesAsyncWithHttpInfo
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionCategorizationRulesAsyncWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategorizationRules'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleResponse';
        $request = $this->getTransactionCategorizationRulesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionCategorizationRules'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionCategorizationRulesRequest(string $contentType = self::contentTypes['getTransactionCategorizationRules'][0])
    {


        $resourcePath = '/transactions/categories/txnRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionCategorizationRulesDeprecated
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRulesDeprecated'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[]
     * @deprecated
     */
    public function getTransactionCategorizationRulesDeprecated(string $contentType = self::contentTypes['getTransactionCategorizationRulesDeprecated'][0])
    {
        list($response) = $this->getTransactionCategorizationRulesDeprecatedWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getTransactionCategorizationRulesDeprecatedWithHttpInfo
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRulesDeprecated'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getTransactionCategorizationRulesDeprecatedWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategorizationRulesDeprecated'][0])
    {
        $request = $this->getTransactionCategorizationRulesDeprecatedRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionCategorizationRulesDeprecatedAsync
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRulesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getTransactionCategorizationRulesDeprecatedAsync(string $contentType = self::contentTypes['getTransactionCategorizationRulesDeprecated'][0])
    {
        return $this->getTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo
     *
     * Get Transaction Categorization Rules
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRulesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getTransactionCategorizationRulesDeprecatedAsyncWithHttpInfo(string $contentType = self::contentTypes['getTransactionCategorizationRulesDeprecated'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRule[]';
        $request = $this->getTransactionCategorizationRulesDeprecatedRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionCategorizationRulesDeprecated'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionCategorizationRulesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getTransactionCategorizationRulesDeprecatedRequest(string $contentType = self::contentTypes['getTransactionCategorizationRulesDeprecated'][0])
    {


        $resourcePath = '/transactions/categories/rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactions
     *
     * Get Transactions
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getTransactions($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $convert_to_currency = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $skip = null, $to_date = null, $top = null, $type = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        list($response) = $this->getTransactionsWithHttpInfo($account_id, $base_type, $category_id, $category_type, $container, $convert_to_currency, $detail_category_id, $from_date, $high_level_category_id, $keyword, $skip, $to_date, $top, $type, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionsWithHttpInfo
     *
     * Get Transactions
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWithHttpInfo($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $convert_to_currency = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $skip = null, $to_date = null, $top = null, $type = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        $request = $this->getTransactionsRequest($account_id, $base_type, $category_id, $category_type, $container, $convert_to_currency, $detail_category_id, $from_date, $high_level_category_id, $keyword, $skip, $to_date, $top, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionsAsync
     *
     * Get Transactions
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsync($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $convert_to_currency = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $skip = null, $to_date = null, $top = null, $type = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        return $this->getTransactionsAsyncWithHttpInfo($account_id, $base_type, $category_id, $category_type, $container, $convert_to_currency, $detail_category_id, $from_date, $high_level_category_id, $keyword, $skip, $to_date, $top, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsAsyncWithHttpInfo
     *
     * Get Transactions
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsyncWithHttpInfo($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $convert_to_currency = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $skip = null, $to_date = null, $top = null, $type = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionResponse';
        $request = $this->getTransactionsRequest($account_id, $base_type, $category_id, $category_type, $container, $convert_to_currency, $detail_category_id, $from_date, $high_level_category_id, $keyword, $skip, $to_date, $top, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactions'
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $convert_to_currency On-demand currency conversion parameter (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsRequest($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $convert_to_currency = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $skip = null, $to_date = null, $top = null, $type = null, string $contentType = self::contentTypes['getTransactions'][0])
    {
















        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_type,
            'baseType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'categoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_type,
            'categoryType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $container,
            'container', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $convert_to_currency,
            'convertToCurrency', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $detail_category_id,
            'detailCategoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $high_level_category_id,
            'highLevelCategoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsCount
     *
     * Get Transactions Count
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsCount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getTransactionsCount($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $to_date = null, $type = null, string $contentType = self::contentTypes['getTransactionsCount'][0])
    {
        list($response) = $this->getTransactionsCountWithHttpInfo($account_id, $base_type, $category_id, $category_type, $container, $detail_category_id, $from_date, $high_level_category_id, $keyword, $to_date, $type, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionsCountWithHttpInfo
     *
     * Get Transactions Count
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsCount'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsCountWithHttpInfo($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $to_date = null, $type = null, string $contentType = self::contentTypes['getTransactionsCount'][0])
    {
        $request = $this->getTransactionsCountRequest($account_id, $base_type, $category_id, $category_type, $container, $detail_category_id, $from_date, $high_level_category_id, $keyword, $to_date, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionsCountAsync
     *
     * Get Transactions Count
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsCountAsync($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $to_date = null, $type = null, string $contentType = self::contentTypes['getTransactionsCount'][0])
    {
        return $this->getTransactionsCountAsyncWithHttpInfo($account_id, $base_type, $category_id, $category_type, $container, $detail_category_id, $from_date, $high_level_category_id, $keyword, $to_date, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsCountAsyncWithHttpInfo
     *
     * Get Transactions Count
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsCountAsyncWithHttpInfo($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $to_date = null, $type = null, string $contentType = self::contentTypes['getTransactionsCount'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCountResponse';
        $request = $this->getTransactionsCountRequest($account_id, $base_type, $category_id, $category_type, $container, $detail_category_id, $from_date, $high_level_category_id, $keyword, $to_date, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsCount'
     *
     * @param  string|null $account_id Comma separated accountIds (optional)
     * @param  string|null $base_type DEBIT/CREDIT (optional)
     * @param  string|null $category_id Comma separated categoryIds (optional)
     * @param  string|null $category_type Transaction Category Type(LOAN, UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan (optional)
     * @param  string|null $detail_category_id Comma separated detailCategoryIds (optional)
     * @param  string|null $from_date Transaction from date(YYYY-MM-DD) (optional)
     * @param  string|null $high_level_category_id Comma separated highLevelCategoryIds (optional)
     * @param  string|null $keyword Transaction search text (optional)
     * @param  string|null $to_date Transaction end date (YYYY-MM-DD) (optional)
     * @param  string|null $type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsCountRequest($account_id = null, $base_type = null, $category_id = null, $category_type = null, $container = null, $detail_category_id = null, $from_date = null, $high_level_category_id = null, $keyword = null, $to_date = null, $type = null, string $contentType = self::contentTypes['getTransactionsCount'][0])
    {













        $resourcePath = '/transactions/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_type,
            'baseType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'categoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_type,
            'categoryType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $container,
            'container', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $detail_category_id,
            'detailCategoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $high_level_category_id,
            'highLevelCategoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation runTransactionCategorizationRule
     *
     * Run Transaction Categorization Rule
     *
     * @param  string $action action (required)
     * @param  int $rule_id Unique id of the categorization rule (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['runTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function runTransactionCategorizationRule($action, $rule_id, string $contentType = self::contentTypes['runTransactionCategorizationRule'][0])
    {
        $this->runTransactionCategorizationRuleWithHttpInfo($action, $rule_id, $contentType);
    }

    /**
     * Operation runTransactionCategorizationRuleWithHttpInfo
     *
     * Run Transaction Categorization Rule
     *
     * @param  string $action (required)
     * @param  int $rule_id Unique id of the categorization rule (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['runTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function runTransactionCategorizationRuleWithHttpInfo($action, $rule_id, string $contentType = self::contentTypes['runTransactionCategorizationRule'][0])
    {
        $request = $this->runTransactionCategorizationRuleRequest($action, $rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation runTransactionCategorizationRuleAsync
     *
     * Run Transaction Categorization Rule
     *
     * @param  string $action (required)
     * @param  int $rule_id Unique id of the categorization rule (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['runTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runTransactionCategorizationRuleAsync($action, $rule_id, string $contentType = self::contentTypes['runTransactionCategorizationRule'][0])
    {
        return $this->runTransactionCategorizationRuleAsyncWithHttpInfo($action, $rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation runTransactionCategorizationRuleAsyncWithHttpInfo
     *
     * Run Transaction Categorization Rule
     *
     * @param  string $action (required)
     * @param  int $rule_id Unique id of the categorization rule (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['runTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runTransactionCategorizationRuleAsyncWithHttpInfo($action, $rule_id, string $contentType = self::contentTypes['runTransactionCategorizationRule'][0])
    {
        $returnType = '';
        $request = $this->runTransactionCategorizationRuleRequest($action, $rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'runTransactionCategorizationRule'
     *
     * @param  string $action (required)
     * @param  int $rule_id Unique id of the categorization rule (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['runTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function runTransactionCategorizationRuleRequest($action, $rule_id, string $contentType = self::contentTypes['runTransactionCategorizationRule'][0])
    {

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling runTransactionCategorizationRule'
            );
        }

        // verify the required parameter 'rule_id' is set
        if ($rule_id === null || (is_array($rule_id) && count($rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_id when calling runTransactionCategorizationRule'
            );
        }


        $resourcePath = '/transactions/categories/rules/{ruleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleId' . '}',
                ObjectSerializer::toPathValue($rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransaction
     *
     * Update Transaction for Transaction Source ID
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTransaction($transaction_request, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $this->updateTransactionWithHttpInfo($transaction_request, $contentType);
    }

    /**
     * Operation updateTransactionWithHttpInfo
     *
     * Update Transaction for Transaction Source ID
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionWithHttpInfo($transaction_request, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $request = $this->updateTransactionRequest($transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTransactionAsync
     *
     * Update Transaction for Transaction Source ID
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsync($transaction_request, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        return $this->updateTransactionAsyncWithHttpInfo($transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionAsyncWithHttpInfo
     *
     * Update Transaction for Transaction Source ID
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsyncWithHttpInfo($transaction_request, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $returnType = '';
        $request = $this->updateTransactionRequest($transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransaction'
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransactionRequest($transaction_request, string $contentType = self::contentTypes['updateTransaction'][0])
    {

        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling updateTransaction'
            );
        }


        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction_request));
            } else {
                $httpBody = $transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransaction1
     *
     * Update Transaction
     *
     * @param  int $transaction_id transactionId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction1'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTransaction1($transaction_id, $transaction_request, string $contentType = self::contentTypes['updateTransaction1'][0])
    {
        $this->updateTransaction1WithHttpInfo($transaction_id, $transaction_request, $contentType);
    }

    /**
     * Operation updateTransaction1WithHttpInfo
     *
     * Update Transaction
     *
     * @param  int $transaction_id transactionId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction1'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransaction1WithHttpInfo($transaction_id, $transaction_request, string $contentType = self::contentTypes['updateTransaction1'][0])
    {
        $request = $this->updateTransaction1Request($transaction_id, $transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTransaction1Async
     *
     * Update Transaction
     *
     * @param  int $transaction_id transactionId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransaction1Async($transaction_id, $transaction_request, string $contentType = self::contentTypes['updateTransaction1'][0])
    {
        return $this->updateTransaction1AsyncWithHttpInfo($transaction_id, $transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransaction1AsyncWithHttpInfo
     *
     * Update Transaction
     *
     * @param  int $transaction_id transactionId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransaction1AsyncWithHttpInfo($transaction_id, $transaction_request, string $contentType = self::contentTypes['updateTransaction1'][0])
    {
        $returnType = '';
        $request = $this->updateTransaction1Request($transaction_id, $transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransaction1'
     *
     * @param  int $transaction_id transactionId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionRequest $transaction_request transactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransaction1Request($transaction_id, $transaction_request, string $contentType = self::contentTypes['updateTransaction1'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling updateTransaction1'
            );
        }

        // verify the required parameter 'transaction_request' is set
        if ($transaction_request === null || (is_array($transaction_request) && count($transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_request when calling updateTransaction1'
            );
        }


        $resourcePath = '/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction_request));
            } else {
                $httpBody = $transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransactionCategorizationRule
     *
     * Update Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleRequest $transaction_categories_rule_request transactionCategoriesRuleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTransactionCategorizationRule($rule_id, $transaction_categories_rule_request, string $contentType = self::contentTypes['updateTransactionCategorizationRule'][0])
    {
        $this->updateTransactionCategorizationRuleWithHttpInfo($rule_id, $transaction_categories_rule_request, $contentType);
    }

    /**
     * Operation updateTransactionCategorizationRuleWithHttpInfo
     *
     * Update Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleRequest $transaction_categories_rule_request transactionCategoriesRuleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionCategorizationRuleWithHttpInfo($rule_id, $transaction_categories_rule_request, string $contentType = self::contentTypes['updateTransactionCategorizationRule'][0])
    {
        $request = $this->updateTransactionCategorizationRuleRequest($rule_id, $transaction_categories_rule_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTransactionCategorizationRuleAsync
     *
     * Update Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleRequest $transaction_categories_rule_request transactionCategoriesRuleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionCategorizationRuleAsync($rule_id, $transaction_categories_rule_request, string $contentType = self::contentTypes['updateTransactionCategorizationRule'][0])
    {
        return $this->updateTransactionCategorizationRuleAsyncWithHttpInfo($rule_id, $transaction_categories_rule_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionCategorizationRuleAsyncWithHttpInfo
     *
     * Update Transaction Categorization Rule
     *
     * @param  int $rule_id ruleId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleRequest $transaction_categories_rule_request transactionCategoriesRuleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionCategorizationRuleAsyncWithHttpInfo($rule_id, $transaction_categories_rule_request, string $contentType = self::contentTypes['updateTransactionCategorizationRule'][0])
    {
        $returnType = '';
        $request = $this->updateTransactionCategorizationRuleRequest($rule_id, $transaction_categories_rule_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransactionCategorizationRule'
     *
     * @param  int $rule_id ruleId (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\TransactionCategorizationRuleRequest $transaction_categories_rule_request transactionCategoriesRuleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategorizationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransactionCategorizationRuleRequest($rule_id, $transaction_categories_rule_request, string $contentType = self::contentTypes['updateTransactionCategorizationRule'][0])
    {

        // verify the required parameter 'rule_id' is set
        if ($rule_id === null || (is_array($rule_id) && count($rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_id when calling updateTransactionCategorizationRule'
            );
        }

        // verify the required parameter 'transaction_categories_rule_request' is set
        if ($transaction_categories_rule_request === null || (is_array($transaction_categories_rule_request) && count($transaction_categories_rule_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_categories_rule_request when calling updateTransactionCategorizationRule'
            );
        }


        $resourcePath = '/transactions/categories/rules/{ruleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleId' . '}',
                ObjectSerializer::toPathValue($rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction_categories_rule_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction_categories_rule_request));
            } else {
                $httpBody = $transaction_categories_rule_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransactionCategory
     *
     * Update Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCategoryRequest $update_category_request updateCategoryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTransactionCategory($update_category_request, string $contentType = self::contentTypes['updateTransactionCategory'][0])
    {
        $this->updateTransactionCategoryWithHttpInfo($update_category_request, $contentType);
    }

    /**
     * Operation updateTransactionCategoryWithHttpInfo
     *
     * Update Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCategoryRequest $update_category_request updateCategoryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategory'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionCategoryWithHttpInfo($update_category_request, string $contentType = self::contentTypes['updateTransactionCategory'][0])
    {
        $request = $this->updateTransactionCategoryRequest($update_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTransactionCategoryAsync
     *
     * Update Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCategoryRequest $update_category_request updateCategoryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionCategoryAsync($update_category_request, string $contentType = self::contentTypes['updateTransactionCategory'][0])
    {
        return $this->updateTransactionCategoryAsyncWithHttpInfo($update_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionCategoryAsyncWithHttpInfo
     *
     * Update Category
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCategoryRequest $update_category_request updateCategoryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionCategoryAsyncWithHttpInfo($update_category_request, string $contentType = self::contentTypes['updateTransactionCategory'][0])
    {
        $returnType = '';
        $request = $this->updateTransactionCategoryRequest($update_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransactionCategory'
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCategoryRequest $update_category_request updateCategoryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransactionCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransactionCategoryRequest($update_category_request, string $contentType = self::contentTypes['updateTransactionCategory'][0])
    {

        // verify the required parameter 'update_category_request' is set
        if ($update_category_request === null || (is_array($update_category_request) && count($update_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_category_request when calling updateTransactionCategory'
            );
        }


        $resourcePath = '/transactions/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_category_request));
            } else {
                $httpBody = $update_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
