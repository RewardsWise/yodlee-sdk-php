<?php
/**
 * ProviderAccountsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProviderAccountsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProviderAccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteProviderAccount' => [
            'application/json',
        ],
        'editCredentialsOrRefreshProviderAccount' => [
            'application/json',
        ],
        'getAllProviderAccounts' => [
            'application/json',
        ],
        'getProviderAccount' => [
            'application/json',
        ],
        'getProviderAccountProfiles' => [
            'application/json',
        ],
        'linkProviderAccount' => [
            'application/json',
        ],
        'refreshProviderAccount' => [
            'application/json',
        ],
        'updatePreferences' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteProviderAccount
     *
     * Delete Provider Account
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProviderAccount($provider_account_id, string $contentType = self::contentTypes['deleteProviderAccount'][0])
    {
        $this->deleteProviderAccountWithHttpInfo($provider_account_id, $contentType);
    }

    /**
     * Operation deleteProviderAccountWithHttpInfo
     *
     * Delete Provider Account
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProviderAccountWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['deleteProviderAccount'][0])
    {
        $request = $this->deleteProviderAccountRequest($provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteProviderAccountAsync
     *
     * Delete Provider Account
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProviderAccountAsync($provider_account_id, string $contentType = self::contentTypes['deleteProviderAccount'][0])
    {
        return $this->deleteProviderAccountAsyncWithHttpInfo($provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProviderAccountAsyncWithHttpInfo
     *
     * Delete Provider Account
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProviderAccountAsyncWithHttpInfo($provider_account_id, string $contentType = self::contentTypes['deleteProviderAccount'][0])
    {
        $returnType = '';
        $request = $this->deleteProviderAccountRequest($provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProviderAccount'
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProviderAccountRequest($provider_account_id, string $contentType = self::contentTypes['deleteProviderAccount'][0])
    {

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling deleteProviderAccount'
            );
        }


        $resourcePath = '/providerAccounts/{providerAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($provider_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'providerAccountId' . '}',
                ObjectSerializer::toPathValue($provider_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editCredentialsOrRefreshProviderAccount
     *
     * Update Account
     *
     * @param  string $provider_account_ids comma separated providerAccountIds (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest|null $provider_account_request loginForm or field entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCredentialsOrRefreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdatedProviderAccountResponse|\OpenAPI\Client\Model\YodleeError
     */
    public function editCredentialsOrRefreshProviderAccount($provider_account_ids, $provider_account_request = null, string $contentType = self::contentTypes['editCredentialsOrRefreshProviderAccount'][0])
    {
        list($response) = $this->editCredentialsOrRefreshProviderAccountWithHttpInfo($provider_account_ids, $provider_account_request, $contentType);
        return $response;
    }

    /**
     * Operation editCredentialsOrRefreshProviderAccountWithHttpInfo
     *
     * Update Account
     *
     * @param  string $provider_account_ids comma separated providerAccountIds (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest|null $provider_account_request loginForm or field entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCredentialsOrRefreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdatedProviderAccountResponse|\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editCredentialsOrRefreshProviderAccountWithHttpInfo($provider_account_ids, $provider_account_request = null, string $contentType = self::contentTypes['editCredentialsOrRefreshProviderAccount'][0])
    {
        $request = $this->editCredentialsOrRefreshProviderAccountRequest($provider_account_ids, $provider_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UpdatedProviderAccountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UpdatedProviderAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdatedProviderAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation editCredentialsOrRefreshProviderAccountAsync
     *
     * Update Account
     *
     * @param  string $provider_account_ids comma separated providerAccountIds (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest|null $provider_account_request loginForm or field entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCredentialsOrRefreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCredentialsOrRefreshProviderAccountAsync($provider_account_ids, $provider_account_request = null, string $contentType = self::contentTypes['editCredentialsOrRefreshProviderAccount'][0])
    {
        return $this->editCredentialsOrRefreshProviderAccountAsyncWithHttpInfo($provider_account_ids, $provider_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editCredentialsOrRefreshProviderAccountAsyncWithHttpInfo
     *
     * Update Account
     *
     * @param  string $provider_account_ids comma separated providerAccountIds (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest|null $provider_account_request loginForm or field entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCredentialsOrRefreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCredentialsOrRefreshProviderAccountAsyncWithHttpInfo($provider_account_ids, $provider_account_request = null, string $contentType = self::contentTypes['editCredentialsOrRefreshProviderAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdatedProviderAccountResponse';
        $request = $this->editCredentialsOrRefreshProviderAccountRequest($provider_account_ids, $provider_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editCredentialsOrRefreshProviderAccount'
     *
     * @param  string $provider_account_ids comma separated providerAccountIds (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest|null $provider_account_request loginForm or field entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCredentialsOrRefreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editCredentialsOrRefreshProviderAccountRequest($provider_account_ids, $provider_account_request = null, string $contentType = self::contentTypes['editCredentialsOrRefreshProviderAccount'][0])
    {

        // verify the required parameter 'provider_account_ids' is set
        if ($provider_account_ids === null || (is_array($provider_account_ids) && count($provider_account_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_ids when calling editCredentialsOrRefreshProviderAccount'
            );
        }



        $resourcePath = '/providerAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_account_ids,
            'providerAccountIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($provider_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($provider_account_request));
            } else {
                $httpBody = $provider_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllProviderAccounts
     *
     * Get Provider Accounts
     *
     * @param  string|null $include include (optional)
     * @param  string|null $provider_ids Comma separated providerIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllProviderAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProviderAccountResponse
     */
    public function getAllProviderAccounts($include = null, $provider_ids = null, string $contentType = self::contentTypes['getAllProviderAccounts'][0])
    {
        list($response) = $this->getAllProviderAccountsWithHttpInfo($include, $provider_ids, $contentType);
        return $response;
    }

    /**
     * Operation getAllProviderAccountsWithHttpInfo
     *
     * Get Provider Accounts
     *
     * @param  string|null $include include (optional)
     * @param  string|null $provider_ids Comma separated providerIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllProviderAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProviderAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllProviderAccountsWithHttpInfo($include = null, $provider_ids = null, string $contentType = self::contentTypes['getAllProviderAccounts'][0])
    {
        $request = $this->getAllProviderAccountsRequest($include, $provider_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProviderAccountResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProviderAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProviderAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAllProviderAccountsAsync
     *
     * Get Provider Accounts
     *
     * @param  string|null $include include (optional)
     * @param  string|null $provider_ids Comma separated providerIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllProviderAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProviderAccountsAsync($include = null, $provider_ids = null, string $contentType = self::contentTypes['getAllProviderAccounts'][0])
    {
        return $this->getAllProviderAccountsAsyncWithHttpInfo($include, $provider_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllProviderAccountsAsyncWithHttpInfo
     *
     * Get Provider Accounts
     *
     * @param  string|null $include include (optional)
     * @param  string|null $provider_ids Comma separated providerIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllProviderAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllProviderAccountsAsyncWithHttpInfo($include = null, $provider_ids = null, string $contentType = self::contentTypes['getAllProviderAccounts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProviderAccountResponse';
        $request = $this->getAllProviderAccountsRequest($include, $provider_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllProviderAccounts'
     *
     * @param  string|null $include include (optional)
     * @param  string|null $provider_ids Comma separated providerIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllProviderAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllProviderAccountsRequest($include = null, $provider_ids = null, string $contentType = self::contentTypes['getAllProviderAccounts'][0])
    {




        $resourcePath = '/providerAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_ids,
            'providerIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProviderAccount
     *
     * Get Provider Account Details
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string|null $include include credentials,questions (optional)
     * @param  string|null $request_id The unique identifier for the request that returns contextual data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProviderAccountDetailResponse|\OpenAPI\Client\Model\YodleeError
     */
    public function getProviderAccount($provider_account_id, $include = null, $request_id = null, string $contentType = self::contentTypes['getProviderAccount'][0])
    {
        list($response) = $this->getProviderAccountWithHttpInfo($provider_account_id, $include, $request_id, $contentType);
        return $response;
    }

    /**
     * Operation getProviderAccountWithHttpInfo
     *
     * Get Provider Account Details
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string|null $include include credentials,questions (optional)
     * @param  string|null $request_id The unique identifier for the request that returns contextual data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProviderAccountDetailResponse|\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProviderAccountWithHttpInfo($provider_account_id, $include = null, $request_id = null, string $contentType = self::contentTypes['getProviderAccount'][0])
    {
        $request = $this->getProviderAccountRequest($provider_account_id, $include, $request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProviderAccountDetailResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProviderAccountDetailResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProviderAccountDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getProviderAccountAsync
     *
     * Get Provider Account Details
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string|null $include include credentials,questions (optional)
     * @param  string|null $request_id The unique identifier for the request that returns contextual data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProviderAccountAsync($provider_account_id, $include = null, $request_id = null, string $contentType = self::contentTypes['getProviderAccount'][0])
    {
        return $this->getProviderAccountAsyncWithHttpInfo($provider_account_id, $include, $request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProviderAccountAsyncWithHttpInfo
     *
     * Get Provider Account Details
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string|null $include include credentials,questions (optional)
     * @param  string|null $request_id The unique identifier for the request that returns contextual data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProviderAccountAsyncWithHttpInfo($provider_account_id, $include = null, $request_id = null, string $contentType = self::contentTypes['getProviderAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProviderAccountDetailResponse';
        $request = $this->getProviderAccountRequest($provider_account_id, $include, $request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProviderAccount'
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  string|null $include include credentials,questions (optional)
     * @param  string|null $request_id The unique identifier for the request that returns contextual data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProviderAccountRequest($provider_account_id, $include = null, $request_id = null, string $contentType = self::contentTypes['getProviderAccount'][0])
    {

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling getProviderAccount'
            );
        }




        $resourcePath = '/providerAccounts/{providerAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_id,
            'requestId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($provider_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'providerAccountId' . '}',
                ObjectSerializer::toPathValue($provider_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProviderAccountProfiles
     *
     * Get User Profile Details
     *
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccountProfiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProviderAccountUserProfileResponse
     * @deprecated
     */
    public function getProviderAccountProfiles($provider_account_id = null, string $contentType = self::contentTypes['getProviderAccountProfiles'][0])
    {
        list($response) = $this->getProviderAccountProfilesWithHttpInfo($provider_account_id, $contentType);
        return $response;
    }

    /**
     * Operation getProviderAccountProfilesWithHttpInfo
     *
     * Get User Profile Details
     *
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccountProfiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProviderAccountUserProfileResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getProviderAccountProfilesWithHttpInfo($provider_account_id = null, string $contentType = self::contentTypes['getProviderAccountProfiles'][0])
    {
        $request = $this->getProviderAccountProfilesRequest($provider_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProviderAccountUserProfileResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProviderAccountUserProfileResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProviderAccountUserProfileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getProviderAccountProfilesAsync
     *
     * Get User Profile Details
     *
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccountProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProviderAccountProfilesAsync($provider_account_id = null, string $contentType = self::contentTypes['getProviderAccountProfiles'][0])
    {
        return $this->getProviderAccountProfilesAsyncWithHttpInfo($provider_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProviderAccountProfilesAsyncWithHttpInfo
     *
     * Get User Profile Details
     *
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccountProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProviderAccountProfilesAsyncWithHttpInfo($provider_account_id = null, string $contentType = self::contentTypes['getProviderAccountProfiles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProviderAccountUserProfileResponse';
        $request = $this->getProviderAccountProfilesRequest($provider_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProviderAccountProfiles'
     *
     * @param  string|null $provider_account_id Comma separated providerAccountIds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviderAccountProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getProviderAccountProfilesRequest($provider_account_id = null, string $contentType = self::contentTypes['getProviderAccountProfiles'][0])
    {



        $resourcePath = '/providerAccounts/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_account_id,
            'providerAccountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkProviderAccount
     *
     * Add Account
     *
     * @param  int $provider_id providerId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest $provider_account_request loginForm or field entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AddedProviderAccountResponse|\OpenAPI\Client\Model\YodleeError
     */
    public function linkProviderAccount($provider_id, $provider_account_request, string $contentType = self::contentTypes['linkProviderAccount'][0])
    {
        list($response) = $this->linkProviderAccountWithHttpInfo($provider_id, $provider_account_request, $contentType);
        return $response;
    }

    /**
     * Operation linkProviderAccountWithHttpInfo
     *
     * Add Account
     *
     * @param  int $provider_id providerId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest $provider_account_request loginForm or field entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AddedProviderAccountResponse|\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkProviderAccountWithHttpInfo($provider_id, $provider_account_request, string $contentType = self::contentTypes['linkProviderAccount'][0])
    {
        $request = $this->linkProviderAccountRequest($provider_id, $provider_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AddedProviderAccountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AddedProviderAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AddedProviderAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation linkProviderAccountAsync
     *
     * Add Account
     *
     * @param  int $provider_id providerId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest $provider_account_request loginForm or field entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkProviderAccountAsync($provider_id, $provider_account_request, string $contentType = self::contentTypes['linkProviderAccount'][0])
    {
        return $this->linkProviderAccountAsyncWithHttpInfo($provider_id, $provider_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkProviderAccountAsyncWithHttpInfo
     *
     * Add Account
     *
     * @param  int $provider_id providerId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest $provider_account_request loginForm or field entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkProviderAccountAsyncWithHttpInfo($provider_id, $provider_account_request, string $contentType = self::contentTypes['linkProviderAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AddedProviderAccountResponse';
        $request = $this->linkProviderAccountRequest($provider_id, $provider_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkProviderAccount'
     *
     * @param  int $provider_id providerId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountRequest $provider_account_request loginForm or field entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkProviderAccountRequest($provider_id, $provider_account_request, string $contentType = self::contentTypes['linkProviderAccount'][0])
    {

        // verify the required parameter 'provider_id' is set
        if ($provider_id === null || (is_array($provider_id) && count($provider_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_id when calling linkProviderAccount'
            );
        }

        // verify the required parameter 'provider_account_request' is set
        if ($provider_account_request === null || (is_array($provider_account_request) && count($provider_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_request when calling linkProviderAccount'
            );
        }


        $resourcePath = '/providerAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_id,
            'providerId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($provider_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($provider_account_request));
            } else {
                $httpBody = $provider_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshProviderAccount
     *
     * Refresh Provider Account
     *
     * @param  \OpenAPI\Client\Model\ProviderAccountRefreshRequest $refresh_request refreshRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RefreshProviderAccountResponse|\OpenAPI\Client\Model\YodleeError
     */
    public function refreshProviderAccount($refresh_request, string $contentType = self::contentTypes['refreshProviderAccount'][0])
    {
        list($response) = $this->refreshProviderAccountWithHttpInfo($refresh_request, $contentType);
        return $response;
    }

    /**
     * Operation refreshProviderAccountWithHttpInfo
     *
     * Refresh Provider Account
     *
     * @param  \OpenAPI\Client\Model\ProviderAccountRefreshRequest $refresh_request refreshRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RefreshProviderAccountResponse|\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshProviderAccountWithHttpInfo($refresh_request, string $contentType = self::contentTypes['refreshProviderAccount'][0])
    {
        $request = $this->refreshProviderAccountRequest($refresh_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RefreshProviderAccountResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RefreshProviderAccountResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RefreshProviderAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshProviderAccountAsync
     *
     * Refresh Provider Account
     *
     * @param  \OpenAPI\Client\Model\ProviderAccountRefreshRequest $refresh_request refreshRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshProviderAccountAsync($refresh_request, string $contentType = self::contentTypes['refreshProviderAccount'][0])
    {
        return $this->refreshProviderAccountAsyncWithHttpInfo($refresh_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshProviderAccountAsyncWithHttpInfo
     *
     * Refresh Provider Account
     *
     * @param  \OpenAPI\Client\Model\ProviderAccountRefreshRequest $refresh_request refreshRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshProviderAccountAsyncWithHttpInfo($refresh_request, string $contentType = self::contentTypes['refreshProviderAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RefreshProviderAccountResponse';
        $request = $this->refreshProviderAccountRequest($refresh_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshProviderAccount'
     *
     * @param  \OpenAPI\Client\Model\ProviderAccountRefreshRequest $refresh_request refreshRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshProviderAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshProviderAccountRequest($refresh_request, string $contentType = self::contentTypes['refreshProviderAccount'][0])
    {

        // verify the required parameter 'refresh_request' is set
        if ($refresh_request === null || (is_array($refresh_request) && count($refresh_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_request when calling refreshProviderAccount'
            );
        }


        $resourcePath = '/providerAccounts/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refresh_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refresh_request));
            } else {
                $httpBody = $refresh_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePreferences
     *
     * Update Preferences
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountPreferencesRequest $preferences preferences (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePreferences'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePreferences($provider_account_id, $preferences, string $contentType = self::contentTypes['updatePreferences'][0])
    {
        $this->updatePreferencesWithHttpInfo($provider_account_id, $preferences, $contentType);
    }

    /**
     * Operation updatePreferencesWithHttpInfo
     *
     * Update Preferences
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountPreferencesRequest $preferences preferences (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePreferences'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePreferencesWithHttpInfo($provider_account_id, $preferences, string $contentType = self::contentTypes['updatePreferences'][0])
    {
        $request = $this->updatePreferencesRequest($provider_account_id, $preferences, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePreferencesAsync
     *
     * Update Preferences
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountPreferencesRequest $preferences preferences (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePreferencesAsync($provider_account_id, $preferences, string $contentType = self::contentTypes['updatePreferences'][0])
    {
        return $this->updatePreferencesAsyncWithHttpInfo($provider_account_id, $preferences, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePreferencesAsyncWithHttpInfo
     *
     * Update Preferences
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountPreferencesRequest $preferences preferences (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePreferencesAsyncWithHttpInfo($provider_account_id, $preferences, string $contentType = self::contentTypes['updatePreferences'][0])
    {
        $returnType = '';
        $request = $this->updatePreferencesRequest($provider_account_id, $preferences, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePreferences'
     *
     * @param  int $provider_account_id providerAccountId (required)
     * @param  \OpenAPI\Client\Model\ProviderAccountPreferencesRequest $preferences preferences (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePreferencesRequest($provider_account_id, $preferences, string $contentType = self::contentTypes['updatePreferences'][0])
    {

        // verify the required parameter 'provider_account_id' is set
        if ($provider_account_id === null || (is_array($provider_account_id) && count($provider_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_account_id when calling updatePreferences'
            );
        }

        // verify the required parameter 'preferences' is set
        if ($preferences === null || (is_array($preferences) && count($preferences) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preferences when calling updatePreferences'
            );
        }


        $resourcePath = '/providerAccounts/{providerAccountId}/preferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($provider_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'providerAccountId' . '}',
                ObjectSerializer::toPathValue($provider_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($preferences)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($preferences));
            } else {
                $httpBody = $preferences;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
