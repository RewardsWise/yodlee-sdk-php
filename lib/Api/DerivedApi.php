<?php
/**
 * DerivedApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * DerivedApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DerivedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getHoldingSummary' => [
            'application/json',
        ],
        'getNetworth' => [
            'application/json',
        ],
        'getTransactionSummary' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHoldingSummary
     *
     * Get Holding Summary
     *
     * @param  string|null $account_ids Comma separated accountIds (optional)
     * @param  string|null $classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $include details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingSummary'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getHoldingSummary($account_ids = null, $classification_type = null, $include = null, string $contentType = self::contentTypes['getHoldingSummary'][0])
    {
        list($response) = $this->getHoldingSummaryWithHttpInfo($account_ids, $classification_type, $include, $contentType);
        return $response;
    }

    /**
     * Operation getHoldingSummaryWithHttpInfo
     *
     * Get Holding Summary
     *
     * @param  string|null $account_ids Comma separated accountIds (optional)
     * @param  string|null $classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $include details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingSummary'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingSummaryWithHttpInfo($account_ids = null, $classification_type = null, $include = null, string $contentType = self::contentTypes['getHoldingSummary'][0])
    {
        $request = $this->getHoldingSummaryRequest($account_ids, $classification_type, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHoldingSummaryAsync
     *
     * Get Holding Summary
     *
     * @param  string|null $account_ids Comma separated accountIds (optional)
     * @param  string|null $classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $include details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingSummaryAsync($account_ids = null, $classification_type = null, $include = null, string $contentType = self::contentTypes['getHoldingSummary'][0])
    {
        return $this->getHoldingSummaryAsyncWithHttpInfo($account_ids, $classification_type, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingSummaryAsyncWithHttpInfo
     *
     * Get Holding Summary
     *
     * @param  string|null $account_ids Comma separated accountIds (optional)
     * @param  string|null $classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $include details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingSummaryAsyncWithHttpInfo($account_ids = null, $classification_type = null, $include = null, string $contentType = self::contentTypes['getHoldingSummary'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedHoldingSummaryResponse';
        $request = $this->getHoldingSummaryRequest($account_ids, $classification_type, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldingSummary'
     *
     * @param  string|null $account_ids Comma separated accountIds (optional)
     * @param  string|null $classification_type e.g. Country, Sector, etc. (optional)
     * @param  string|null $include details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHoldingSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHoldingSummaryRequest($account_ids = null, $classification_type = null, $include = null, string $contentType = self::contentTypes['getHoldingSummary'][0])
    {





        $resourcePath = '/derived/holdingSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'accountIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $classification_type,
            'classificationType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworth
     *
     * Get Networth Summary
     *
     * @param  string|null $account_ids comma separated accountIds (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  string|null $include details (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworth'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getNetworth($account_ids = null, $container = null, $from_date = null, $include = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getNetworth'][0])
    {
        list($response) = $this->getNetworthWithHttpInfo($account_ids, $container, $from_date, $include, $interval, $skip, $to_date, $top, $contentType);
        return $response;
    }

    /**
     * Operation getNetworthWithHttpInfo
     *
     * Get Networth Summary
     *
     * @param  string|null $account_ids comma separated accountIds (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  string|null $include details (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworth'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworthWithHttpInfo($account_ids = null, $container = null, $from_date = null, $include = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getNetworth'][0])
    {
        $request = $this->getNetworthRequest($account_ids, $container, $from_date, $include, $interval, $skip, $to_date, $top, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getNetworthAsync
     *
     * Get Networth Summary
     *
     * @param  string|null $account_ids comma separated accountIds (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  string|null $include details (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworthAsync($account_ids = null, $container = null, $from_date = null, $include = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getNetworth'][0])
    {
        return $this->getNetworthAsyncWithHttpInfo($account_ids, $container, $from_date, $include, $interval, $skip, $to_date, $top, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworthAsyncWithHttpInfo
     *
     * Get Networth Summary
     *
     * @param  string|null $account_ids comma separated accountIds (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  string|null $include details (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworthAsyncWithHttpInfo($account_ids = null, $container = null, $from_date = null, $include = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getNetworth'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedNetworthResponse';
        $request = $this->getNetworthRequest($account_ids, $container, $from_date, $include, $interval, $skip, $to_date, $top, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworth'
     *
     * @param  string|null $account_ids comma separated accountIds (optional)
     * @param  string|null $container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param  string|null $from_date from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param  string|null $include details (optional)
     * @param  string|null $interval D-daily, W-weekly or M-monthly (optional)
     * @param  int|null $skip skip (Min 0) (optional)
     * @param  string|null $to_date toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param  int|null $top top (Max 500) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworthRequest($account_ids = null, $container = null, $from_date = null, $include = null, $interval = null, $skip = null, $to_date = null, $top = null, string $contentType = self::contentTypes['getNetworth'][0])
    {










        $resourcePath = '/derived/networth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'accountIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $container,
            'container', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionSummary
     *
     * Get Transaction Summary
     *
     * @param  string $group_by CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param  string|null $account_id comma separated account Ids (optional)
     * @param  string|null $category_id comma separated categoryIds (optional)
     * @param  string|null $category_type LOAN, INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param  string|null $from_date YYYY-MM-DD format (optional)
     * @param  string|null $include details (optional)
     * @param  bool|null $include_user_category TRUE/FALSE (optional)
     * @param  string|null $interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param  string|null $to_date YYYY-MM-DD format (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionSummary'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function getTransactionSummary($group_by, $account_id = null, $category_id = null, $category_type = null, $from_date = null, $include = null, $include_user_category = null, $interval = null, $to_date = null, string $contentType = self::contentTypes['getTransactionSummary'][0])
    {
        list($response) = $this->getTransactionSummaryWithHttpInfo($group_by, $account_id, $category_id, $category_type, $from_date, $include, $include_user_category, $interval, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionSummaryWithHttpInfo
     *
     * Get Transaction Summary
     *
     * @param  string $group_by CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param  string|null $account_id comma separated account Ids (optional)
     * @param  string|null $category_id comma separated categoryIds (optional)
     * @param  string|null $category_type LOAN, INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param  string|null $from_date YYYY-MM-DD format (optional)
     * @param  string|null $include details (optional)
     * @param  bool|null $include_user_category TRUE/FALSE (optional)
     * @param  string|null $interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param  string|null $to_date YYYY-MM-DD format (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionSummary'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionSummaryWithHttpInfo($group_by, $account_id = null, $category_id = null, $category_type = null, $from_date = null, $include = null, $include_user_category = null, $interval = null, $to_date = null, string $contentType = self::contentTypes['getTransactionSummary'][0])
    {
        $request = $this->getTransactionSummaryRequest($group_by, $account_id, $category_id, $category_type, $from_date, $include, $include_user_category, $interval, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTransactionSummaryAsync
     *
     * Get Transaction Summary
     *
     * @param  string $group_by CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param  string|null $account_id comma separated account Ids (optional)
     * @param  string|null $category_id comma separated categoryIds (optional)
     * @param  string|null $category_type LOAN, INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param  string|null $from_date YYYY-MM-DD format (optional)
     * @param  string|null $include details (optional)
     * @param  bool|null $include_user_category TRUE/FALSE (optional)
     * @param  string|null $interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param  string|null $to_date YYYY-MM-DD format (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionSummaryAsync($group_by, $account_id = null, $category_id = null, $category_type = null, $from_date = null, $include = null, $include_user_category = null, $interval = null, $to_date = null, string $contentType = self::contentTypes['getTransactionSummary'][0])
    {
        return $this->getTransactionSummaryAsyncWithHttpInfo($group_by, $account_id, $category_id, $category_type, $from_date, $include, $include_user_category, $interval, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionSummaryAsyncWithHttpInfo
     *
     * Get Transaction Summary
     *
     * @param  string $group_by CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param  string|null $account_id comma separated account Ids (optional)
     * @param  string|null $category_id comma separated categoryIds (optional)
     * @param  string|null $category_type LOAN, INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param  string|null $from_date YYYY-MM-DD format (optional)
     * @param  string|null $include details (optional)
     * @param  bool|null $include_user_category TRUE/FALSE (optional)
     * @param  string|null $interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param  string|null $to_date YYYY-MM-DD format (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionSummaryAsyncWithHttpInfo($group_by, $account_id = null, $category_id = null, $category_type = null, $from_date = null, $include = null, $include_user_category = null, $interval = null, $to_date = null, string $contentType = self::contentTypes['getTransactionSummary'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\DerivedTransactionSummaryResponse';
        $request = $this->getTransactionSummaryRequest($group_by, $account_id, $category_id, $category_type, $from_date, $include, $include_user_category, $interval, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionSummary'
     *
     * @param  string $group_by CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param  string|null $account_id comma separated account Ids (optional)
     * @param  string|null $category_id comma separated categoryIds (optional)
     * @param  string|null $category_type LOAN, INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param  string|null $from_date YYYY-MM-DD format (optional)
     * @param  string|null $include details (optional)
     * @param  bool|null $include_user_category TRUE/FALSE (optional)
     * @param  string|null $interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param  string|null $to_date YYYY-MM-DD format (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionSummaryRequest($group_by, $account_id = null, $category_id = null, $category_type = null, $from_date = null, $include = null, $include_user_category = null, $interval = null, $to_date = null, string $contentType = self::contentTypes['getTransactionSummary'][0])
    {

        // verify the required parameter 'group_by' is set
        if ($group_by === null || (is_array($group_by) && count($group_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_by when calling getTransactionSummary'
            );
        }










        $resourcePath = '/derived/transactionSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'categoryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_type,
            'categoryType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_by,
            'groupBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_user_category,
            'includeUserCategory', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
