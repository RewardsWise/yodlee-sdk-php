<?php
/**
 * CobrandApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * CobrandApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CobrandApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cobrandLogin' => [
            'application/json',
        ],
        'cobrandLogout' => [
            'application/json',
        ],
        'createSubscriptionEvent' => [
            'application/json',
        ],
        'deleteSubscribedEvent' => [
            'application/json',
        ],
        'getPublicKey' => [
            'application/json',
        ],
        'getSubscribedEvents' => [
            'application/json',
        ],
        'updateSubscribedEvent' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cobrandLogin
     *
     * Cobrand Login
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginRequest $cobrand_login_request cobrandLoginRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogin'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError
     */
    public function cobrandLogin($cobrand_login_request, string $contentType = self::contentTypes['cobrandLogin'][0])
    {
        list($response) = $this->cobrandLoginWithHttpInfo($cobrand_login_request, $contentType);
        return $response;
    }

    /**
     * Operation cobrandLoginWithHttpInfo
     *
     * Cobrand Login
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginRequest $cobrand_login_request cobrandLoginRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogin'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError|\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError, HTTP status code, HTTP response headers (array of strings)
     */
    public function cobrandLoginWithHttpInfo($cobrand_login_request, string $contentType = self::contentTypes['cobrandLogin'][0])
    {
        $request = $this->cobrandLoginRequest($cobrand_login_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cobrandLoginAsync
     *
     * Cobrand Login
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginRequest $cobrand_login_request cobrandLoginRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cobrandLoginAsync($cobrand_login_request, string $contentType = self::contentTypes['cobrandLogin'][0])
    {
        return $this->cobrandLoginAsyncWithHttpInfo($cobrand_login_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cobrandLoginAsyncWithHttpInfo
     *
     * Cobrand Login
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginRequest $cobrand_login_request cobrandLoginRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cobrandLoginAsyncWithHttpInfo($cobrand_login_request, string $contentType = self::contentTypes['cobrandLogin'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginResponse';
        $request = $this->cobrandLoginRequest($cobrand_login_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cobrandLogin'
     *
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandLoginRequest $cobrand_login_request cobrandLoginRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cobrandLoginRequest($cobrand_login_request, string $contentType = self::contentTypes['cobrandLogin'][0])
    {

        // verify the required parameter 'cobrand_login_request' is set
        if ($cobrand_login_request === null || (is_array($cobrand_login_request) && count($cobrand_login_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cobrand_login_request when calling cobrandLogin'
            );
        }


        $resourcePath = '/cobrand/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cobrand_login_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cobrand_login_request));
            } else {
                $httpBody = $cobrand_login_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cobrandLogout
     *
     * Cobrand Logout
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogout'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cobrandLogout(string $contentType = self::contentTypes['cobrandLogout'][0])
    {
        $this->cobrandLogoutWithHttpInfo($contentType);
    }

    /**
     * Operation cobrandLogoutWithHttpInfo
     *
     * Cobrand Logout
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogout'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cobrandLogoutWithHttpInfo(string $contentType = self::contentTypes['cobrandLogout'][0])
    {
        $request = $this->cobrandLogoutRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation cobrandLogoutAsync
     *
     * Cobrand Logout
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cobrandLogoutAsync(string $contentType = self::contentTypes['cobrandLogout'][0])
    {
        return $this->cobrandLogoutAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cobrandLogoutAsyncWithHttpInfo
     *
     * Cobrand Logout
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cobrandLogoutAsyncWithHttpInfo(string $contentType = self::contentTypes['cobrandLogout'][0])
    {
        $returnType = '';
        $request = $this->cobrandLogoutRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cobrandLogout'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cobrandLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cobrandLogoutRequest(string $contentType = self::contentTypes['cobrandLogout'][0])
    {


        $resourcePath = '/cobrand/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionEvent
     *
     * Subscribe Event
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function createSubscriptionEvent($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionEvent'][0])
    {
        $this->createSubscriptionEventWithHttpInfo($event_name, $event_request, $contentType);
    }

    /**
     * Operation createSubscriptionEventWithHttpInfo
     *
     * Subscribe Event
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createSubscriptionEventWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionEvent'][0])
    {
        $request = $this->createSubscriptionEventRequest($event_name, $event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionEventAsync
     *
     * Subscribe Event
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSubscriptionEventAsync($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionEvent'][0])
    {
        return $this->createSubscriptionEventAsyncWithHttpInfo($event_name, $event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionEventAsyncWithHttpInfo
     *
     * Subscribe Event
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSubscriptionEventAsyncWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionEvent'][0])
    {
        $returnType = '';
        $request = $this->createSubscriptionEventRequest($event_name, $event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionEvent'
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createSubscriptionEventRequest($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling createSubscriptionEvent'
            );
        }

        // verify the required parameter 'event_request' is set
        if ($event_request === null || (is_array($event_request) && count($event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_request when calling createSubscriptionEvent'
            );
        }


        $resourcePath = '/cobrand/config/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($event_request));
            } else {
                $httpBody = $event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscribedEvent
     *
     * Delete Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteSubscribedEvent($event_name, string $contentType = self::contentTypes['deleteSubscribedEvent'][0])
    {
        $this->deleteSubscribedEventWithHttpInfo($event_name, $contentType);
    }

    /**
     * Operation deleteSubscribedEventWithHttpInfo
     *
     * Delete Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteSubscribedEventWithHttpInfo($event_name, string $contentType = self::contentTypes['deleteSubscribedEvent'][0])
    {
        $request = $this->deleteSubscribedEventRequest($event_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSubscribedEventAsync
     *
     * Delete Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSubscribedEventAsync($event_name, string $contentType = self::contentTypes['deleteSubscribedEvent'][0])
    {
        return $this->deleteSubscribedEventAsyncWithHttpInfo($event_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscribedEventAsyncWithHttpInfo
     *
     * Delete Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSubscribedEventAsyncWithHttpInfo($event_name, string $contentType = self::contentTypes['deleteSubscribedEvent'][0])
    {
        $returnType = '';
        $request = $this->deleteSubscribedEventRequest($event_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscribedEvent'
     *
     * @param  string $event_name eventName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteSubscribedEventRequest($event_name, string $contentType = self::contentTypes['deleteSubscribedEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling deleteSubscribedEvent'
            );
        }


        $resourcePath = '/cobrand/config/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPublicKey
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicKey'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse
     * @deprecated
     */
    public function getPublicKey(string $contentType = self::contentTypes['getPublicKey'][0])
    {
        list($response) = $this->getPublicKeyWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getPublicKeyWithHttpInfo
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicKey'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getPublicKeyWithHttpInfo(string $contentType = self::contentTypes['getPublicKey'][0])
    {
        $request = $this->getPublicKeyRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPublicKeyAsync
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPublicKeyAsync(string $contentType = self::contentTypes['getPublicKey'][0])
    {
        return $this->getPublicKeyAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPublicKeyAsyncWithHttpInfo
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPublicKeyAsyncWithHttpInfo(string $contentType = self::contentTypes['getPublicKey'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandPublicKeyResponse';
        $request = $this->getPublicKeyRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPublicKey'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getPublicKeyRequest(string $contentType = self::contentTypes['getPublicKey'][0])
    {


        $resourcePath = '/cobrand/publicKey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscribedEvents
     *
     * Get Subscribed Events
     *
     * @param  string|null $event_name eventName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse
     * @deprecated
     */
    public function getSubscribedEvents($event_name = null, string $contentType = self::contentTypes['getSubscribedEvents'][0])
    {
        list($response) = $this->getSubscribedEventsWithHttpInfo($event_name, $contentType);
        return $response;
    }

    /**
     * Operation getSubscribedEventsWithHttpInfo
     *
     * Get Subscribed Events
     *
     * @param  string|null $event_name eventName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSubscribedEventsWithHttpInfo($event_name = null, string $contentType = self::contentTypes['getSubscribedEvents'][0])
    {
        $request = $this->getSubscribedEventsRequest($event_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSubscribedEventsAsync
     *
     * Get Subscribed Events
     *
     * @param  string|null $event_name eventName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSubscribedEventsAsync($event_name = null, string $contentType = self::contentTypes['getSubscribedEvents'][0])
    {
        return $this->getSubscribedEventsAsyncWithHttpInfo($event_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscribedEventsAsyncWithHttpInfo
     *
     * Get Subscribed Events
     *
     * @param  string|null $event_name eventName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSubscribedEventsAsyncWithHttpInfo($event_name = null, string $contentType = self::contentTypes['getSubscribedEvents'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\CobrandNotificationResponse';
        $request = $this->getSubscribedEventsRequest($event_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscribedEvents'
     *
     * @param  string|null $event_name eventName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSubscribedEventsRequest($event_name = null, string $contentType = self::contentTypes['getSubscribedEvents'][0])
    {



        $resourcePath = '/cobrand/config/notifications/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_name,
            'eventName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscribedEvent
     *
     * Update Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function updateSubscribedEvent($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedEvent'][0])
    {
        $this->updateSubscribedEventWithHttpInfo($event_name, $event_request, $contentType);
    }

    /**
     * Operation updateSubscribedEventWithHttpInfo
     *
     * Update Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateSubscribedEventWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedEvent'][0])
    {
        $request = $this->updateSubscribedEventRequest($event_name, $event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscribedEventAsync
     *
     * Update Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSubscribedEventAsync($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedEvent'][0])
    {
        return $this->updateSubscribedEventAsyncWithHttpInfo($event_name, $event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscribedEventAsyncWithHttpInfo
     *
     * Update Subscription
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSubscribedEventAsyncWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedEvent'][0])
    {
        $returnType = '';
        $request = $this->updateSubscribedEventRequest($event_name, $event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscribedEvent'
     *
     * @param  string $event_name eventName (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateCobrandNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateSubscribedEventRequest($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling updateSubscribedEvent'
            );
        }

        // verify the required parameter 'event_request' is set
        if ($event_request === null || (is_array($event_request) && count($event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_request when calling updateSubscribedEvent'
            );
        }


        $resourcePath = '/cobrand/config/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($event_request));
            } else {
                $httpBody = $event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
