<?php
/**
 * ConfigsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use RewardsWise\Yodlee\OpenAPI\Client\ApiException;
use RewardsWise\Yodlee\OpenAPI\Client\Configuration;
use RewardsWise\Yodlee\OpenAPI\Client\FormDataProcessor;
use RewardsWise\Yodlee\OpenAPI\Client\HeaderSelector;
use RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * ConfigsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfigsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSubscriptionNotificationEvent' => [
            'application/json',
        ],
        'deleteSubscribedNotificationEvent' => [
            'application/json',
        ],
        'getPublicEncryptionKey' => [
            'application/json',
        ],
        'getSubscribedNotificationEvents' => [
            'application/json',
        ],
        'updateSubscribedNotificationEvent' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSubscriptionNotificationEvent
     *
     * Subscribe For Notification Event
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createSubscriptionNotificationEvent($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionNotificationEvent'][0])
    {
        $this->createSubscriptionNotificationEventWithHttpInfo($event_name, $event_request, $contentType);
    }

    /**
     * Operation createSubscriptionNotificationEventWithHttpInfo
     *
     * Subscribe For Notification Event
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionNotificationEventWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionNotificationEvent'][0])
    {
        $request = $this->createSubscriptionNotificationEventRequest($event_name, $event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionNotificationEventAsync
     *
     * Subscribe For Notification Event
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionNotificationEventAsync($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionNotificationEvent'][0])
    {
        return $this->createSubscriptionNotificationEventAsyncWithHttpInfo($event_name, $event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionNotificationEventAsyncWithHttpInfo
     *
     * Subscribe For Notification Event
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionNotificationEventAsyncWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionNotificationEvent'][0])
    {
        $returnType = '';
        $request = $this->createSubscriptionNotificationEventRequest($event_name, $event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionNotificationEvent'
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\CreateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSubscriptionNotificationEventRequest($event_name, $event_request, string $contentType = self::contentTypes['createSubscriptionNotificationEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling createSubscriptionNotificationEvent'
            );
        }

        // verify the required parameter 'event_request' is set
        if ($event_request === null || (is_array($event_request) && count($event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_request when calling createSubscriptionNotificationEvent'
            );
        }


        $resourcePath = '/configs/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($event_request));
            } else {
                $httpBody = $event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscribedNotificationEvent
     *
     * Delete Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscribedNotificationEvent($event_name, string $contentType = self::contentTypes['deleteSubscribedNotificationEvent'][0])
    {
        $this->deleteSubscribedNotificationEventWithHttpInfo($event_name, $contentType);
    }

    /**
     * Operation deleteSubscribedNotificationEventWithHttpInfo
     *
     * Delete Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscribedNotificationEventWithHttpInfo($event_name, string $contentType = self::contentTypes['deleteSubscribedNotificationEvent'][0])
    {
        $request = $this->deleteSubscribedNotificationEventRequest($event_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSubscribedNotificationEventAsync
     *
     * Delete Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscribedNotificationEventAsync($event_name, string $contentType = self::contentTypes['deleteSubscribedNotificationEvent'][0])
    {
        return $this->deleteSubscribedNotificationEventAsyncWithHttpInfo($event_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscribedNotificationEventAsyncWithHttpInfo
     *
     * Delete Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscribedNotificationEventAsyncWithHttpInfo($event_name, string $contentType = self::contentTypes['deleteSubscribedNotificationEvent'][0])
    {
        $returnType = '';
        $request = $this->deleteSubscribedNotificationEventRequest($event_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscribedNotificationEvent'
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSubscribedNotificationEventRequest($event_name, string $contentType = self::contentTypes['deleteSubscribedNotificationEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling deleteSubscribedNotificationEvent'
            );
        }


        $resourcePath = '/configs/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPublicEncryptionKey
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicEncryptionKey'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse
     */
    public function getPublicEncryptionKey(string $contentType = self::contentTypes['getPublicEncryptionKey'][0])
    {
        list($response) = $this->getPublicEncryptionKeyWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getPublicEncryptionKeyWithHttpInfo
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicEncryptionKey'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicEncryptionKeyWithHttpInfo(string $contentType = self::contentTypes['getPublicEncryptionKey'][0])
    {
        $request = $this->getPublicEncryptionKeyRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPublicEncryptionKeyAsync
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicEncryptionKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPublicEncryptionKeyAsync(string $contentType = self::contentTypes['getPublicEncryptionKey'][0])
    {
        return $this->getPublicEncryptionKeyAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPublicEncryptionKeyAsyncWithHttpInfo
     *
     * Get Public Key
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicEncryptionKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPublicEncryptionKeyAsyncWithHttpInfo(string $contentType = self::contentTypes['getPublicEncryptionKey'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsPublicKeyResponse';
        $request = $this->getPublicEncryptionKeyRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPublicEncryptionKey'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicEncryptionKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPublicEncryptionKeyRequest(string $contentType = self::contentTypes['getPublicEncryptionKey'][0])
    {


        $resourcePath = '/configs/publicKey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscribedNotificationEvents
     *
     * Get Subscribed Notification Events
     *
     * @param  string|null $event_name Name of the webhook subscription event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedNotificationEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse
     */
    public function getSubscribedNotificationEvents($event_name = null, string $contentType = self::contentTypes['getSubscribedNotificationEvents'][0])
    {
        list($response) = $this->getSubscribedNotificationEventsWithHttpInfo($event_name, $contentType);
        return $response;
    }

    /**
     * Operation getSubscribedNotificationEventsWithHttpInfo
     *
     * Get Subscribed Notification Events
     *
     * @param  string|null $event_name Name of the webhook subscription event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedNotificationEvents'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscribedNotificationEventsWithHttpInfo($event_name = null, string $contentType = self::contentTypes['getSubscribedNotificationEvents'][0])
    {
        $request = $this->getSubscribedNotificationEventsRequest($event_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSubscribedNotificationEventsAsync
     *
     * Get Subscribed Notification Events
     *
     * @param  string|null $event_name Name of the webhook subscription event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedNotificationEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribedNotificationEventsAsync($event_name = null, string $contentType = self::contentTypes['getSubscribedNotificationEvents'][0])
    {
        return $this->getSubscribedNotificationEventsAsyncWithHttpInfo($event_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscribedNotificationEventsAsyncWithHttpInfo
     *
     * Get Subscribed Notification Events
     *
     * @param  string|null $event_name Name of the webhook subscription event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedNotificationEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribedNotificationEventsAsyncWithHttpInfo($event_name = null, string $contentType = self::contentTypes['getSubscribedNotificationEvents'][0])
    {
        $returnType = '\RewardsWise\Yodlee\OpenAPI\Client\Model\ConfigsNotificationResponse';
        $request = $this->getSubscribedNotificationEventsRequest($event_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscribedNotificationEvents'
     *
     * @param  string|null $event_name Name of the webhook subscription event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribedNotificationEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscribedNotificationEventsRequest($event_name = null, string $contentType = self::contentTypes['getSubscribedNotificationEvents'][0])
    {



        $resourcePath = '/configs/notifications/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_name,
            'eventName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscribedNotificationEvent
     *
     * Update Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateSubscribedNotificationEvent($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedNotificationEvent'][0])
    {
        $this->updateSubscribedNotificationEventWithHttpInfo($event_name, $event_request, $contentType);
    }

    /**
     * Operation updateSubscribedNotificationEventWithHttpInfo
     *
     * Update Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \RewardsWise\Yodlee\OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscribedNotificationEventWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedNotificationEvent'][0])
    {
        $request = $this->updateSubscribedNotificationEventRequest($event_name, $event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RewardsWise\Yodlee\OpenAPI\Client\Model\YodleeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscribedNotificationEventAsync
     *
     * Update Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscribedNotificationEventAsync($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedNotificationEvent'][0])
    {
        return $this->updateSubscribedNotificationEventAsyncWithHttpInfo($event_name, $event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscribedNotificationEventAsyncWithHttpInfo
     *
     * Update Notification Subscription
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscribedNotificationEventAsyncWithHttpInfo($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedNotificationEvent'][0])
    {
        $returnType = '';
        $request = $this->updateSubscribedNotificationEventRequest($event_name, $event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscribedNotificationEvent'
     *
     * @param  string $event_name Name of the webhook subscription event (required)
     * @param  \RewardsWise\Yodlee\OpenAPI\Client\Model\UpdateConfigsNotificationEventRequest $event_request eventRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscribedNotificationEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscribedNotificationEventRequest($event_name, $event_request, string $contentType = self::contentTypes['updateSubscribedNotificationEvent'][0])
    {

        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling updateSubscribedNotificationEvent'
            );
        }

        // verify the required parameter 'event_request' is set
        if ($event_request === null || (is_array($event_request) && count($event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_request when calling updateSubscribedNotificationEvent'
            );
        }


        $resourcePath = '/configs/notifications/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($event_request));
            } else {
                $httpBody = $event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
