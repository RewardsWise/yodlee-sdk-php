<?php
/**
 * CreateConsent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateConsent Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateConsent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateConsent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_access_frequency' => 'string',
        'otsp_adr_name' => 'string',
        'expiration_date_time' => 'string',
        'preferences' => '\OpenAPI\Client\Model\Preferences[]',
        'otsp_adr' => 'string',
        'client_adr' => 'string',
        'renewal' => '\OpenAPI\Client\Model\Renewal',
        'client_trusted_advisor' => '\OpenAPI\Client\Model\ClientTrustedAdvisor[]',
        'revoke_date_time' => 'string',
        'provider_consent_id' => 'string',
        'revoke_date' => 'string',
        'title' => 'string',
        'application_display_name' => 'string',
        'title_body' => 'string',
        'consent_id' => 'int',
        'start_date_time' => 'string',
        'custom_display_data' => '\OpenAPI\Client\Model\CustomDisplayData',
        'third_party_adr' => '\OpenAPI\Client\Model\ThirdPartyADR[]',
        'provider_id' => 'int',
        'consent_status' => 'string',
        'scope' => '\OpenAPI\Client\Model\Scope[]',
        'links' => '\OpenAPI\Client\Model\Links[]',
        'start_date' => 'string',
        'expiration_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_access_frequency' => null,
        'otsp_adr_name' => null,
        'expiration_date_time' => null,
        'preferences' => null,
        'otsp_adr' => null,
        'client_adr' => null,
        'renewal' => null,
        'client_trusted_advisor' => null,
        'revoke_date_time' => null,
        'provider_consent_id' => null,
        'revoke_date' => null,
        'title' => null,
        'application_display_name' => null,
        'title_body' => null,
        'consent_id' => 'int64',
        'start_date_time' => null,
        'custom_display_data' => null,
        'third_party_adr' => null,
        'provider_id' => 'int64',
        'consent_status' => null,
        'scope' => null,
        'links' => null,
        'start_date' => null,
        'expiration_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_access_frequency' => false,
        'otsp_adr_name' => false,
        'expiration_date_time' => false,
        'preferences' => false,
        'otsp_adr' => false,
        'client_adr' => false,
        'renewal' => false,
        'client_trusted_advisor' => false,
        'revoke_date_time' => false,
        'provider_consent_id' => false,
        'revoke_date' => false,
        'title' => false,
        'application_display_name' => false,
        'title_body' => false,
        'consent_id' => false,
        'start_date_time' => false,
        'custom_display_data' => false,
        'third_party_adr' => false,
        'provider_id' => false,
        'consent_status' => false,
        'scope' => false,
        'links' => false,
        'start_date' => false,
        'expiration_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_access_frequency' => 'dataAccessFrequency',
        'otsp_adr_name' => 'otspADRName',
        'expiration_date_time' => 'expirationDateTime',
        'preferences' => 'preferences',
        'otsp_adr' => 'otspADR',
        'client_adr' => 'clientADR',
        'renewal' => 'renewal',
        'client_trusted_advisor' => 'clientTrustedAdvisor',
        'revoke_date_time' => 'revokeDateTime',
        'provider_consent_id' => 'providerConsentId',
        'revoke_date' => 'revokeDate',
        'title' => 'title',
        'application_display_name' => 'applicationDisplayName',
        'title_body' => 'titleBody',
        'consent_id' => 'consentId',
        'start_date_time' => 'startDateTime',
        'custom_display_data' => 'customDisplayData',
        'third_party_adr' => 'thirdPartyADR',
        'provider_id' => 'providerId',
        'consent_status' => 'consentStatus',
        'scope' => 'scope',
        'links' => 'links',
        'start_date' => 'startDate',
        'expiration_date' => 'expirationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_access_frequency' => 'setDataAccessFrequency',
        'otsp_adr_name' => 'setOtspAdrName',
        'expiration_date_time' => 'setExpirationDateTime',
        'preferences' => 'setPreferences',
        'otsp_adr' => 'setOtspAdr',
        'client_adr' => 'setClientAdr',
        'renewal' => 'setRenewal',
        'client_trusted_advisor' => 'setClientTrustedAdvisor',
        'revoke_date_time' => 'setRevokeDateTime',
        'provider_consent_id' => 'setProviderConsentId',
        'revoke_date' => 'setRevokeDate',
        'title' => 'setTitle',
        'application_display_name' => 'setApplicationDisplayName',
        'title_body' => 'setTitleBody',
        'consent_id' => 'setConsentId',
        'start_date_time' => 'setStartDateTime',
        'custom_display_data' => 'setCustomDisplayData',
        'third_party_adr' => 'setThirdPartyAdr',
        'provider_id' => 'setProviderId',
        'consent_status' => 'setConsentStatus',
        'scope' => 'setScope',
        'links' => 'setLinks',
        'start_date' => 'setStartDate',
        'expiration_date' => 'setExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_access_frequency' => 'getDataAccessFrequency',
        'otsp_adr_name' => 'getOtspAdrName',
        'expiration_date_time' => 'getExpirationDateTime',
        'preferences' => 'getPreferences',
        'otsp_adr' => 'getOtspAdr',
        'client_adr' => 'getClientAdr',
        'renewal' => 'getRenewal',
        'client_trusted_advisor' => 'getClientTrustedAdvisor',
        'revoke_date_time' => 'getRevokeDateTime',
        'provider_consent_id' => 'getProviderConsentId',
        'revoke_date' => 'getRevokeDate',
        'title' => 'getTitle',
        'application_display_name' => 'getApplicationDisplayName',
        'title_body' => 'getTitleBody',
        'consent_id' => 'getConsentId',
        'start_date_time' => 'getStartDateTime',
        'custom_display_data' => 'getCustomDisplayData',
        'third_party_adr' => 'getThirdPartyAdr',
        'provider_id' => 'getProviderId',
        'consent_status' => 'getConsentStatus',
        'scope' => 'getScope',
        'links' => 'getLinks',
        'start_date' => 'getStartDate',
        'expiration_date' => 'getExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DATA_ACCESS_FREQUENCY_ONE_TIME = 'ONE_TIME';
    public const DATA_ACCESS_FREQUENCY_RECURRING = 'RECURRING';
    public const CONSENT_STATUS_ACTIVE = 'ACTIVE';
    public const CONSENT_STATUS_CONSENT_GENERATED = 'CONSENT_GENERATED';
    public const CONSENT_STATUS_CONSENT_ACCEPTED = 'CONSENT_ACCEPTED';
    public const CONSENT_STATUS_CONSENT_AUTHORIZED = 'CONSENT_AUTHORIZED';
    public const CONSENT_STATUS_CONSENT_MISMATCH = 'CONSENT_MISMATCH';
    public const CONSENT_STATUS_PENDING = 'PENDING';
    public const CONSENT_STATUS_EXPIRED = 'EXPIRED';
    public const CONSENT_STATUS_REVOKED = 'REVOKED';
    public const CONSENT_STATUS_CONSENT_REPEALED = 'CONSENT_REPEALED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataAccessFrequencyAllowableValues()
    {
        return [
            self::DATA_ACCESS_FREQUENCY_ONE_TIME,
            self::DATA_ACCESS_FREQUENCY_RECURRING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsentStatusAllowableValues()
    {
        return [
            self::CONSENT_STATUS_ACTIVE,
            self::CONSENT_STATUS_CONSENT_GENERATED,
            self::CONSENT_STATUS_CONSENT_ACCEPTED,
            self::CONSENT_STATUS_CONSENT_AUTHORIZED,
            self::CONSENT_STATUS_CONSENT_MISMATCH,
            self::CONSENT_STATUS_PENDING,
            self::CONSENT_STATUS_EXPIRED,
            self::CONSENT_STATUS_REVOKED,
            self::CONSENT_STATUS_CONSENT_REPEALED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('data_access_frequency', $data ?? [], null);
        $this->setIfExists('otsp_adr_name', $data ?? [], null);
        $this->setIfExists('expiration_date_time', $data ?? [], null);
        $this->setIfExists('preferences', $data ?? [], null);
        $this->setIfExists('otsp_adr', $data ?? [], null);
        $this->setIfExists('client_adr', $data ?? [], null);
        $this->setIfExists('renewal', $data ?? [], null);
        $this->setIfExists('client_trusted_advisor', $data ?? [], null);
        $this->setIfExists('revoke_date_time', $data ?? [], null);
        $this->setIfExists('provider_consent_id', $data ?? [], null);
        $this->setIfExists('revoke_date', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('application_display_name', $data ?? [], null);
        $this->setIfExists('title_body', $data ?? [], null);
        $this->setIfExists('consent_id', $data ?? [], null);
        $this->setIfExists('start_date_time', $data ?? [], null);
        $this->setIfExists('custom_display_data', $data ?? [], null);
        $this->setIfExists('third_party_adr', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('consent_status', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDataAccessFrequencyAllowableValues();
        if (!is_null($this->container['data_access_frequency']) && !in_array($this->container['data_access_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'data_access_frequency', must be one of '%s'",
                $this->container['data_access_frequency'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['expiration_date_time'] === null) {
            $invalidProperties[] = "'expiration_date_time' can't be null";
        }
        if ($this->container['preferences'] === null) {
            $invalidProperties[] = "'preferences' can't be null";
        }
        if ($this->container['client_adr'] === null) {
            $invalidProperties[] = "'client_adr' can't be null";
        }
        if ($this->container['revoke_date_time'] === null) {
            $invalidProperties[] = "'revoke_date_time' can't be null";
        }
        if ($this->container['revoke_date'] === null) {
            $invalidProperties[] = "'revoke_date' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['application_display_name'] === null) {
            $invalidProperties[] = "'application_display_name' can't be null";
        }
        if ($this->container['title_body'] === null) {
            $invalidProperties[] = "'title_body' can't be null";
        }
        if ($this->container['consent_id'] === null) {
            $invalidProperties[] = "'consent_id' can't be null";
        }
        if ($this->container['start_date_time'] === null) {
            $invalidProperties[] = "'start_date_time' can't be null";
        }
        if ($this->container['provider_id'] === null) {
            $invalidProperties[] = "'provider_id' can't be null";
        }
        if ($this->container['consent_status'] === null) {
            $invalidProperties[] = "'consent_status' can't be null";
        }
        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!is_null($this->container['consent_status']) && !in_array($this->container['consent_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'consent_status', must be one of '%s'",
                $this->container['consent_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['links'] === null) {
            $invalidProperties[] = "'links' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_access_frequency
     *
     * @return string|null
     */
    public function getDataAccessFrequency()
    {
        return $this->container['data_access_frequency'];
    }

    /**
     * Sets data_access_frequency
     *
     * @param string|null $data_access_frequency Data Access Frequency explains the number of times that this consent can be used.<br> Otherwise called as consent frequency type.
     *
     * @return self
     */
    public function setDataAccessFrequency($data_access_frequency)
    {
        if (is_null($data_access_frequency)) {
            throw new \InvalidArgumentException('non-nullable data_access_frequency cannot be null');
        }
        $allowedValues = $this->getDataAccessFrequencyAllowableValues();
        if (!in_array($data_access_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'data_access_frequency', must be one of '%s'",
                    $data_access_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_access_frequency'] = $data_access_frequency;

        return $this;
    }

    /**
     * Gets otsp_adr_name
     *
     * @return string|null
     */
    public function getOtspAdrName()
    {
        return $this->container['otsp_adr_name'];
    }

    /**
     * Sets otsp_adr_name
     *
     * @param string|null $otsp_adr_name Name of the Accredited Data Recipient/Organization
     *
     * @return self
     */
    public function setOtspAdrName($otsp_adr_name)
    {
        if (is_null($otsp_adr_name)) {
            throw new \InvalidArgumentException('non-nullable otsp_adr_name cannot be null');
        }
        $this->container['otsp_adr_name'] = $otsp_adr_name;

        return $this;
    }

    /**
     * Gets expiration_date_time
     *
     * @return string
     */
    public function getExpirationDateTime()
    {
        return $this->container['expiration_date_time'];
    }

    /**
     * Sets expiration_date_time
     *
     * @param string $expiration_date_time Consent expiry datetime.
     *
     * @return self
     */
    public function setExpirationDateTime($expiration_date_time)
    {
        if (is_null($expiration_date_time)) {
            throw new \InvalidArgumentException('non-nullable expiration_date_time cannot be null');
        }
        $this->container['expiration_date_time'] = $expiration_date_time;

        return $this;
    }

    /**
     * Gets preferences
     *
     * @return \OpenAPI\Client\Model\Preferences[]
     */
    public function getPreferences()
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences
     *
     * @param \OpenAPI\Client\Model\Preferences[] $preferences Preferences describes options about the additional usage of data or purge data
     *
     * @return self
     */
    public function setPreferences($preferences)
    {
        if (is_null($preferences)) {
            throw new \InvalidArgumentException('non-nullable preferences cannot be null');
        }
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets otsp_adr
     *
     * @return string|null
     */
    public function getOtspAdr()
    {
        return $this->container['otsp_adr'];
    }

    /**
     * Sets otsp_adr
     *
     * @param string|null $otsp_adr Unique/Accredition Id of the ADR
     *
     * @return self
     */
    public function setOtspAdr($otsp_adr)
    {
        if (is_null($otsp_adr)) {
            throw new \InvalidArgumentException('non-nullable otsp_adr cannot be null');
        }
        $this->container['otsp_adr'] = $otsp_adr;

        return $this;
    }

    /**
     * Gets client_adr
     *
     * @return string
     */
    public function getClientAdr()
    {
        return $this->container['client_adr'];
    }

    /**
     * Sets client_adr
     *
     * @param string $client_adr Client Name of the ADR
     *
     * @return self
     */
    public function setClientAdr($client_adr)
    {
        if (is_null($client_adr)) {
            throw new \InvalidArgumentException('non-nullable client_adr cannot be null');
        }
        $this->container['client_adr'] = $client_adr;

        return $this;
    }

    /**
     * Gets renewal
     *
     * @return \OpenAPI\Client\Model\Renewal|null
     */
    public function getRenewal()
    {
        return $this->container['renewal'];
    }

    /**
     * Sets renewal
     *
     * @param \OpenAPI\Client\Model\Renewal|null $renewal renewal
     *
     * @return self
     */
    public function setRenewal($renewal)
    {
        if (is_null($renewal)) {
            throw new \InvalidArgumentException('non-nullable renewal cannot be null');
        }
        $this->container['renewal'] = $renewal;

        return $this;
    }

    /**
     * Gets client_trusted_advisor
     *
     * @return \OpenAPI\Client\Model\ClientTrustedAdvisor[]|null
     */
    public function getClientTrustedAdvisor()
    {
        return $this->container['client_trusted_advisor'];
    }

    /**
     * Sets client_trusted_advisor
     *
     * @param \OpenAPI\Client\Model\ClientTrustedAdvisor[]|null $client_trusted_advisor describes information of client trusted advisor
     *
     * @return self
     */
    public function setClientTrustedAdvisor($client_trusted_advisor)
    {
        if (is_null($client_trusted_advisor)) {
            throw new \InvalidArgumentException('non-nullable client_trusted_advisor cannot be null');
        }
        $this->container['client_trusted_advisor'] = $client_trusted_advisor;

        return $this;
    }

    /**
     * Gets revoke_date_time
     *
     * @return string
     */
    public function getRevokeDateTime()
    {
        return $this->container['revoke_date_time'];
    }

    /**
     * Sets revoke_date_time
     *
     * @param string $revoke_date_time Consent revoke datetime.
     *
     * @return self
     */
    public function setRevokeDateTime($revoke_date_time)
    {
        if (is_null($revoke_date_time)) {
            throw new \InvalidArgumentException('non-nullable revoke_date_time cannot be null');
        }
        $this->container['revoke_date_time'] = $revoke_date_time;

        return $this;
    }

    /**
     * Gets provider_consent_id
     *
     * @return string|null
     */
    public function getProviderConsentId()
    {
        return $this->container['provider_consent_id'];
    }

    /**
     * Sets provider_consent_id
     *
     * @param string|null $provider_consent_id Provider consent id
     *
     * @return self
     */
    public function setProviderConsentId($provider_consent_id)
    {
        if (is_null($provider_consent_id)) {
            throw new \InvalidArgumentException('non-nullable provider_consent_id cannot be null');
        }
        $this->container['provider_consent_id'] = $provider_consent_id;

        return $this;
    }

    /**
     * Gets revoke_date
     *
     * @return string
     */
    public function getRevokeDate()
    {
        return $this->container['revoke_date'];
    }

    /**
     * Sets revoke_date
     *
     * @param string $revoke_date Consent revoke date.
     *
     * @return self
     */
    public function setRevokeDate($revoke_date)
    {
        if (is_null($revoke_date)) {
            throw new \InvalidArgumentException('non-nullable revoke_date cannot be null');
        }
        $this->container['revoke_date'] = $revoke_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title for the consent form.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets application_display_name
     *
     * @return string
     */
    public function getApplicationDisplayName()
    {
        return $this->container['application_display_name'];
    }

    /**
     * Sets application_display_name
     *
     * @param string $application_display_name Application display name.
     *
     * @return self
     */
    public function setApplicationDisplayName($application_display_name)
    {
        if (is_null($application_display_name)) {
            throw new \InvalidArgumentException('non-nullable application_display_name cannot be null');
        }
        $this->container['application_display_name'] = $application_display_name;

        return $this;
    }

    /**
     * Gets title_body
     *
     * @return string
     */
    public function getTitleBody()
    {
        return $this->container['title_body'];
    }

    /**
     * Sets title_body
     *
     * @param string $title_body Description for the title.
     *
     * @return self
     */
    public function setTitleBody($title_body)
    {
        if (is_null($title_body)) {
            throw new \InvalidArgumentException('non-nullable title_body cannot be null');
        }
        $this->container['title_body'] = $title_body;

        return $this;
    }

    /**
     * Gets consent_id
     *
     * @return int
     */
    public function getConsentId()
    {
        return $this->container['consent_id'];
    }

    /**
     * Sets consent_id
     *
     * @param int $consent_id Consent Id generated through POST Consent.
     *
     * @return self
     */
    public function setConsentId($consent_id)
    {
        if (is_null($consent_id)) {
            throw new \InvalidArgumentException('non-nullable consent_id cannot be null');
        }
        $this->container['consent_id'] = $consent_id;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return string
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param string $start_date_time Consent start datetime.
     *
     * @return self
     */
    public function setStartDateTime($start_date_time)
    {
        if (is_null($start_date_time)) {
            throw new \InvalidArgumentException('non-nullable start_date_time cannot be null');
        }
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets custom_display_data
     *
     * @return \OpenAPI\Client\Model\CustomDisplayData|null
     */
    public function getCustomDisplayData()
    {
        return $this->container['custom_display_data'];
    }

    /**
     * Sets custom_display_data
     *
     * @param \OpenAPI\Client\Model\CustomDisplayData|null $custom_display_data custom_display_data
     *
     * @return self
     */
    public function setCustomDisplayData($custom_display_data)
    {
        if (is_null($custom_display_data)) {
            throw new \InvalidArgumentException('non-nullable custom_display_data cannot be null');
        }
        $this->container['custom_display_data'] = $custom_display_data;

        return $this;
    }

    /**
     * Gets third_party_adr
     *
     * @return \OpenAPI\Client\Model\ThirdPartyADR[]|null
     */
    public function getThirdPartyAdr()
    {
        return $this->container['third_party_adr'];
    }

    /**
     * Sets third_party_adr
     *
     * @param \OpenAPI\Client\Model\ThirdPartyADR[]|null $third_party_adr ThirdPartyADR describes details of additional parties which are accredited data recipients under organization
     *
     * @return self
     */
    public function setThirdPartyAdr($third_party_adr)
    {
        if (is_null($third_party_adr)) {
            throw new \InvalidArgumentException('non-nullable third_party_adr cannot be null');
        }
        $this->container['third_party_adr'] = $third_party_adr;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return int
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param int $provider_id Provider Id for which the consent needs to be generated.
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets consent_status
     *
     * @return string
     */
    public function getConsentStatus()
    {
        return $this->container['consent_status'];
    }

    /**
     * Sets consent_status
     *
     * @param string $consent_status Status of the consent.
     *
     * @return self
     */
    public function setConsentStatus($consent_status)
    {
        if (is_null($consent_status)) {
            throw new \InvalidArgumentException('non-nullable consent_status cannot be null');
        }
        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!in_array($consent_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'consent_status', must be one of '%s'",
                    $consent_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consent_status'] = $consent_status;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return \OpenAPI\Client\Model\Scope[]
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \OpenAPI\Client\Model\Scope[] $scope Scope describes about the consent permissions and their purpose.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\Links[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\Links[] $links GET consent preferences API details
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Consent start date.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string $expiration_date Consent expiry date.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


