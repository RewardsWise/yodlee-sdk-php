<?php
/**
 * AccountDataset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountDataset Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountDataset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountDataset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_updated' => 'string',
        'update_eligibility' => 'string',
        'additional_status' => 'string',
        'next_update_scheduled' => 'string',
        'name' => 'string',
        'last_update_attempt' => 'string',
        'additional_status_error_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'last_updated' => null,
        'update_eligibility' => null,
        'additional_status' => null,
        'next_update_scheduled' => null,
        'name' => null,
        'last_update_attempt' => null,
        'additional_status_error_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'last_updated' => false,
        'update_eligibility' => false,
        'additional_status' => false,
        'next_update_scheduled' => false,
        'name' => false,
        'last_update_attempt' => false,
        'additional_status_error_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_updated' => 'lastUpdated',
        'update_eligibility' => 'updateEligibility',
        'additional_status' => 'additionalStatus',
        'next_update_scheduled' => 'nextUpdateScheduled',
        'name' => 'name',
        'last_update_attempt' => 'lastUpdateAttempt',
        'additional_status_error_code' => 'additionalStatusErrorCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_updated' => 'setLastUpdated',
        'update_eligibility' => 'setUpdateEligibility',
        'additional_status' => 'setAdditionalStatus',
        'next_update_scheduled' => 'setNextUpdateScheduled',
        'name' => 'setName',
        'last_update_attempt' => 'setLastUpdateAttempt',
        'additional_status_error_code' => 'setAdditionalStatusErrorCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_updated' => 'getLastUpdated',
        'update_eligibility' => 'getUpdateEligibility',
        'additional_status' => 'getAdditionalStatus',
        'next_update_scheduled' => 'getNextUpdateScheduled',
        'name' => 'getName',
        'last_update_attempt' => 'getLastUpdateAttempt',
        'additional_status_error_code' => 'getAdditionalStatusErrorCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UPDATE_ELIGIBILITY_ALLOW_UPDATE = 'ALLOW_UPDATE';
    public const UPDATE_ELIGIBILITY_ALLOW_UPDATE_WITH_CREDENTIALS = 'ALLOW_UPDATE_WITH_CREDENTIALS';
    public const UPDATE_ELIGIBILITY_DISALLOW_UPDATE = 'DISALLOW_UPDATE';
    public const ADDITIONAL_STATUS_LOGIN_IN_PROGRESS = 'LOGIN_IN_PROGRESS';
    public const ADDITIONAL_STATUS_DATA_RETRIEVAL_IN_PROGRESS = 'DATA_RETRIEVAL_IN_PROGRESS';
    public const ADDITIONAL_STATUS_ACCT_SUMMARY_RECEIVED = 'ACCT_SUMMARY_RECEIVED';
    public const ADDITIONAL_STATUS_AVAILABLE_DATA_RETRIEVED = 'AVAILABLE_DATA_RETRIEVED';
    public const ADDITIONAL_STATUS_PARTIAL_DATA_RETRIEVED = 'PARTIAL_DATA_RETRIEVED';
    public const ADDITIONAL_STATUS_DATA_RETRIEVAL_FAILED = 'DATA_RETRIEVAL_FAILED';
    public const ADDITIONAL_STATUS_DATA_NOT_AVAILABLE = 'DATA_NOT_AVAILABLE';
    public const ADDITIONAL_STATUS_ACCOUNT_LOCKED = 'ACCOUNT_LOCKED';
    public const ADDITIONAL_STATUS_ADDL_AUTHENTICATION_REQUIRED = 'ADDL_AUTHENTICATION_REQUIRED';
    public const ADDITIONAL_STATUS_BETA_SITE_DEV_IN_PROGRESS = 'BETA_SITE_DEV_IN_PROGRESS';
    public const ADDITIONAL_STATUS_CREDENTIALS_UPDATE_NEEDED = 'CREDENTIALS_UPDATE_NEEDED';
    public const ADDITIONAL_STATUS_INCORRECT_CREDENTIALS = 'INCORRECT_CREDENTIALS';
    public const ADDITIONAL_STATUS_PROPERTY_VALUE_NOT_AVAILABLE = 'PROPERTY_VALUE_NOT_AVAILABLE';
    public const ADDITIONAL_STATUS_INVALID_ADDL_INFO_PROVIDED = 'INVALID_ADDL_INFO_PROVIDED';
    public const ADDITIONAL_STATUS_REQUEST_TIME_OUT = 'REQUEST_TIME_OUT';
    public const ADDITIONAL_STATUS_SITE_BLOCKING_ERROR = 'SITE_BLOCKING_ERROR';
    public const ADDITIONAL_STATUS_UNEXPECTED_SITE_ERROR = 'UNEXPECTED_SITE_ERROR';
    public const ADDITIONAL_STATUS_SITE_NOT_SUPPORTED = 'SITE_NOT_SUPPORTED';
    public const ADDITIONAL_STATUS_SITE_UNAVAILABLE = 'SITE_UNAVAILABLE';
    public const ADDITIONAL_STATUS_TECH_ERROR = 'TECH_ERROR';
    public const ADDITIONAL_STATUS_USER_ACTION_NEEDED_AT_SITE = 'USER_ACTION_NEEDED_AT_SITE';
    public const ADDITIONAL_STATUS_SITE_SESSION_INVALIDATED = 'SITE_SESSION_INVALIDATED';
    public const ADDITIONAL_STATUS_NEW_AUTHENTICATION_REQUIRED = 'NEW_AUTHENTICATION_REQUIRED';
    public const ADDITIONAL_STATUS_DATASET_NOT_SUPPORTED = 'DATASET_NOT_SUPPORTED';
    public const ADDITIONAL_STATUS_ENROLLMENT_REQUIRED_FOR_DATASET = 'ENROLLMENT_REQUIRED_FOR_DATASET';
    public const ADDITIONAL_STATUS_CONSENT_REQUIRED = 'CONSENT_REQUIRED';
    public const ADDITIONAL_STATUS_CONSENT_EXPIRED = 'CONSENT_EXPIRED';
    public const ADDITIONAL_STATUS_CONSENT_REVOKED = 'CONSENT_REVOKED';
    public const ADDITIONAL_STATUS_INCORRECT_OAUTH_TOKEN = 'INCORRECT_OAUTH_TOKEN';
    public const ADDITIONAL_STATUS_MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS';
    public const NAME_BASIC_AGG_DATA = 'BASIC_AGG_DATA';
    public const NAME_ADVANCE_AGG_DATA = 'ADVANCE_AGG_DATA';
    public const NAME_ACCT_PROFILE = 'ACCT_PROFILE';
    public const NAME_DOCUMENT = 'DOCUMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateEligibilityAllowableValues()
    {
        return [
            self::UPDATE_ELIGIBILITY_ALLOW_UPDATE,
            self::UPDATE_ELIGIBILITY_ALLOW_UPDATE_WITH_CREDENTIALS,
            self::UPDATE_ELIGIBILITY_DISALLOW_UPDATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalStatusAllowableValues()
    {
        return [
            self::ADDITIONAL_STATUS_LOGIN_IN_PROGRESS,
            self::ADDITIONAL_STATUS_DATA_RETRIEVAL_IN_PROGRESS,
            self::ADDITIONAL_STATUS_ACCT_SUMMARY_RECEIVED,
            self::ADDITIONAL_STATUS_AVAILABLE_DATA_RETRIEVED,
            self::ADDITIONAL_STATUS_PARTIAL_DATA_RETRIEVED,
            self::ADDITIONAL_STATUS_DATA_RETRIEVAL_FAILED,
            self::ADDITIONAL_STATUS_DATA_NOT_AVAILABLE,
            self::ADDITIONAL_STATUS_ACCOUNT_LOCKED,
            self::ADDITIONAL_STATUS_ADDL_AUTHENTICATION_REQUIRED,
            self::ADDITIONAL_STATUS_BETA_SITE_DEV_IN_PROGRESS,
            self::ADDITIONAL_STATUS_CREDENTIALS_UPDATE_NEEDED,
            self::ADDITIONAL_STATUS_INCORRECT_CREDENTIALS,
            self::ADDITIONAL_STATUS_PROPERTY_VALUE_NOT_AVAILABLE,
            self::ADDITIONAL_STATUS_INVALID_ADDL_INFO_PROVIDED,
            self::ADDITIONAL_STATUS_REQUEST_TIME_OUT,
            self::ADDITIONAL_STATUS_SITE_BLOCKING_ERROR,
            self::ADDITIONAL_STATUS_UNEXPECTED_SITE_ERROR,
            self::ADDITIONAL_STATUS_SITE_NOT_SUPPORTED,
            self::ADDITIONAL_STATUS_SITE_UNAVAILABLE,
            self::ADDITIONAL_STATUS_TECH_ERROR,
            self::ADDITIONAL_STATUS_USER_ACTION_NEEDED_AT_SITE,
            self::ADDITIONAL_STATUS_SITE_SESSION_INVALIDATED,
            self::ADDITIONAL_STATUS_NEW_AUTHENTICATION_REQUIRED,
            self::ADDITIONAL_STATUS_DATASET_NOT_SUPPORTED,
            self::ADDITIONAL_STATUS_ENROLLMENT_REQUIRED_FOR_DATASET,
            self::ADDITIONAL_STATUS_CONSENT_REQUIRED,
            self::ADDITIONAL_STATUS_CONSENT_EXPIRED,
            self::ADDITIONAL_STATUS_CONSENT_REVOKED,
            self::ADDITIONAL_STATUS_INCORRECT_OAUTH_TOKEN,
            self::ADDITIONAL_STATUS_MIGRATION_IN_PROGRESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_BASIC_AGG_DATA,
            self::NAME_ADVANCE_AGG_DATA,
            self::NAME_ACCT_PROFILE,
            self::NAME_DOCUMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('update_eligibility', $data ?? [], null);
        $this->setIfExists('additional_status', $data ?? [], null);
        $this->setIfExists('next_update_scheduled', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('last_update_attempt', $data ?? [], null);
        $this->setIfExists('additional_status_error_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUpdateEligibilityAllowableValues();
        if (!is_null($this->container['update_eligibility']) && !in_array($this->container['update_eligibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_eligibility', must be one of '%s'",
                $this->container['update_eligibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdditionalStatusAllowableValues();
        if (!is_null($this->container['additional_status']) && !in_array($this->container['additional_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'additional_status', must be one of '%s'",
                $this->container['additional_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'name', must be one of '%s'",
                $this->container['name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated Indicate when the dataset is last updated successfully for the given provider account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets update_eligibility
     *
     * @return string|null
     */
    public function getUpdateEligibility()
    {
        return $this->container['update_eligibility'];
    }

    /**
     * Sets update_eligibility
     *
     * @param string|null $update_eligibility Indicate whether the dataset is eligible for update or not.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setUpdateEligibility($update_eligibility)
    {
        if (is_null($update_eligibility)) {
            throw new \InvalidArgumentException('non-nullable update_eligibility cannot be null');
        }
        $allowedValues = $this->getUpdateEligibilityAllowableValues();
        if (!in_array($update_eligibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_eligibility', must be one of '%s'",
                    $update_eligibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_eligibility'] = $update_eligibility;

        return $this;
    }

    /**
     * Gets additional_status
     *
     * @return string|null
     */
    public function getAdditionalStatus()
    {
        return $this->container['additional_status'];
    }

    /**
     * Sets additional_status
     *
     * @param string|null $additional_status The status of last update attempted for the dataset. <br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setAdditionalStatus($additional_status)
    {
        if (is_null($additional_status)) {
            throw new \InvalidArgumentException('non-nullable additional_status cannot be null');
        }
        $allowedValues = $this->getAdditionalStatusAllowableValues();
        if (!in_array($additional_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'additional_status', must be one of '%s'",
                    $additional_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_status'] = $additional_status;

        return $this;
    }

    /**
     * Gets next_update_scheduled
     *
     * @return string|null
     */
    public function getNextUpdateScheduled()
    {
        return $this->container['next_update_scheduled'];
    }

    /**
     * Sets next_update_scheduled
     *
     * @param string|null $next_update_scheduled Indicates when the next attempt to update the dataset is scheduled.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setNextUpdateScheduled($next_update_scheduled)
    {
        if (is_null($next_update_scheduled)) {
            throw new \InvalidArgumentException('non-nullable next_update_scheduled cannot be null');
        }
        $this->container['next_update_scheduled'] = $next_update_scheduled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $allowedValues = $this->getNameAllowableValues();
        if (!in_array($name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'name', must be one of '%s'",
                    $name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_update_attempt
     *
     * @return string|null
     */
    public function getLastUpdateAttempt()
    {
        return $this->container['last_update_attempt'];
    }

    /**
     * Sets last_update_attempt
     *
     * @param string|null $last_update_attempt Indicate when the last attempt was performed to update the dataset for the given provider account<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setLastUpdateAttempt($last_update_attempt)
    {
        if (is_null($last_update_attempt)) {
            throw new \InvalidArgumentException('non-nullable last_update_attempt cannot be null');
        }
        $this->container['last_update_attempt'] = $last_update_attempt;

        return $this;
    }

    /**
     * Gets additional_status_error_code
     *
     * @return string|null
     */
    public function getAdditionalStatusErrorCode()
    {
        return $this->container['additional_status_error_code'];
    }

    /**
     * Sets additional_status_error_code
     *
     * @param string|null $additional_status_error_code The status error code of last update attempted for the dataset.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST providerAccounts</li><li>GET providerAccounts</li><li>GET dataExtracts/userData</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setAdditionalStatusErrorCode($additional_status_error_code)
    {
        if (is_null($additional_status_error_code)) {
            throw new \InvalidArgumentException('non-nullable additional_status_error_code cannot be null');
        }
        $this->container['additional_status_error_code'] = $additional_status_error_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


