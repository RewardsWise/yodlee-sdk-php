<?php
/**
 * UserResponsePreferences
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserResponsePreferences Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserResponsePreferences implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserResponsePreferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_format' => 'string',
        'time_zone' => 'string',
        'currency' => 'string',
        'locale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_format' => null,
        'time_zone' => null,
        'currency' => null,
        'locale' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_format' => false,
        'time_zone' => false,
        'currency' => false,
        'locale' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_format' => 'dateFormat',
        'time_zone' => 'timeZone',
        'currency' => 'currency',
        'locale' => 'locale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_format' => 'setDateFormat',
        'time_zone' => 'setTimeZone',
        'currency' => 'setCurrency',
        'locale' => 'setLocale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_format' => 'getDateFormat',
        'time_zone' => 'getTimeZone',
        'currency' => 'getCurrency',
        'locale' => 'getLocale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_USD = 'USD';
    public const CURRENCY_AUD = 'AUD';
    public const CURRENCY_BRL = 'BRL';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_HKD = 'HKD';
    public const CURRENCY_IDR = 'IDR';
    public const CURRENCY_INR = 'INR';
    public const CURRENCY_JPY = 'JPY';
    public const CURRENCY_NZD = 'NZD';
    public const CURRENCY_SGD = 'SGD';
    public const CURRENCY_ZAR = 'ZAR';
    public const CURRENCY_CNY = 'CNY';
    public const CURRENCY_VND = 'VND';
    public const CURRENCY_MYR = 'MYR';
    public const CURRENCY_CHF = 'CHF';
    public const CURRENCY_AED = 'AED';
    public const CURRENCY_AFA = 'AFA';
    public const CURRENCY_ALL = 'ALL';
    public const CURRENCY_AMD = 'AMD';
    public const CURRENCY_ANG = 'ANG';
    public const CURRENCY_AOA = 'AOA';
    public const CURRENCY_ARS = 'ARS';
    public const CURRENCY_AWG = 'AWG';
    public const CURRENCY_AZM = 'AZM';
    public const CURRENCY_BAM = 'BAM';
    public const CURRENCY_BBD = 'BBD';
    public const CURRENCY_BDT = 'BDT';
    public const CURRENCY_BGL = 'BGL';
    public const CURRENCY_BHD = 'BHD';
    public const CURRENCY_BIF = 'BIF';
    public const CURRENCY_BMD = 'BMD';
    public const CURRENCY_BND = 'BND';
    public const CURRENCY_BOB = 'BOB';
    public const CURRENCY_BSD = 'BSD';
    public const CURRENCY_BTN = 'BTN';
    public const CURRENCY_BWP = 'BWP';
    public const CURRENCY_BYR = 'BYR';
    public const CURRENCY_BZD = 'BZD';
    public const CURRENCY_CDF = 'CDF';
    public const CURRENCY_CLP = 'CLP';
    public const CURRENCY_COP = 'COP';
    public const CURRENCY_CRC = 'CRC';
    public const CURRENCY_CUP = 'CUP';
    public const CURRENCY_CVE = 'CVE';
    public const CURRENCY_CYP = 'CYP';
    public const CURRENCY_CZK = 'CZK';
    public const CURRENCY_DJF = 'DJF';
    public const CURRENCY_DKK = 'DKK';
    public const CURRENCY_DOP = 'DOP';
    public const CURRENCY_DZD = 'DZD';
    public const CURRENCY_EEK = 'EEK';
    public const CURRENCY_EGP = 'EGP';
    public const CURRENCY_ERN = 'ERN';
    public const CURRENCY_ETB = 'ETB';
    public const CURRENCY_FJD = 'FJD';
    public const CURRENCY_FKP = 'FKP';
    public const CURRENCY_GEL = 'GEL';
    public const CURRENCY_GGP = 'GGP';
    public const CURRENCY_GHC = 'GHC';
    public const CURRENCY_GIP = 'GIP';
    public const CURRENCY_GMD = 'GMD';
    public const CURRENCY_GNF = 'GNF';
    public const CURRENCY_GTQ = 'GTQ';
    public const CURRENCY_GYD = 'GYD';
    public const CURRENCY_HNL = 'HNL';
    public const CURRENCY_HRK = 'HRK';
    public const CURRENCY_HTG = 'HTG';
    public const CURRENCY_HUF = 'HUF';
    public const CURRENCY_ILS = 'ILS';
    public const CURRENCY_IMP = 'IMP';
    public const CURRENCY_IQD = 'IQD';
    public const CURRENCY_IRR = 'IRR';
    public const CURRENCY_ISK = 'ISK';
    public const CURRENCY_JEP = 'JEP';
    public const CURRENCY_JMD = 'JMD';
    public const CURRENCY_JOD = 'JOD';
    public const CURRENCY_KES = 'KES';
    public const CURRENCY_KGS = 'KGS';
    public const CURRENCY_KHR = 'KHR';
    public const CURRENCY_KMF = 'KMF';
    public const CURRENCY_KPW = 'KPW';
    public const CURRENCY_KRW = 'KRW';
    public const CURRENCY_KWD = 'KWD';
    public const CURRENCY_KYD = 'KYD';
    public const CURRENCY_KZT = 'KZT';
    public const CURRENCY_LAK = 'LAK';
    public const CURRENCY_LBP = 'LBP';
    public const CURRENCY_LKR = 'LKR';
    public const CURRENCY_LRD = 'LRD';
    public const CURRENCY_LSL = 'LSL';
    public const CURRENCY_LTL = 'LTL';
    public const CURRENCY_LVL = 'LVL';
    public const CURRENCY_LYD = 'LYD';
    public const CURRENCY_MAD = 'MAD';
    public const CURRENCY_MDL = 'MDL';
    public const CURRENCY_MGF = 'MGF';
    public const CURRENCY_MKD = 'MKD';
    public const CURRENCY_MMK = 'MMK';
    public const CURRENCY_MNT = 'MNT';
    public const CURRENCY_MOP = 'MOP';
    public const CURRENCY_MRO = 'MRO';
    public const CURRENCY_MTL = 'MTL';
    public const CURRENCY_MUR = 'MUR';
    public const CURRENCY_MVR = 'MVR';
    public const CURRENCY_MWK = 'MWK';
    public const CURRENCY_MXN = 'MXN';
    public const CURRENCY_MZM = 'MZM';
    public const CURRENCY_NAD = 'NAD';
    public const CURRENCY_NGN = 'NGN';
    public const CURRENCY_NIO = 'NIO';
    public const CURRENCY_NOK = 'NOK';
    public const CURRENCY_NPR = 'NPR';
    public const CURRENCY_OMR = 'OMR';
    public const CURRENCY_PAB = 'PAB';
    public const CURRENCY_PEN = 'PEN';
    public const CURRENCY_PGK = 'PGK';
    public const CURRENCY_PHP = 'PHP';
    public const CURRENCY_PKR = 'PKR';
    public const CURRENCY_PLN = 'PLN';
    public const CURRENCY_PYG = 'PYG';
    public const CURRENCY_QAR = 'QAR';
    public const CURRENCY_ROL = 'ROL';
    public const CURRENCY_RUR = 'RUR';
    public const CURRENCY_RWF = 'RWF';
    public const CURRENCY_SAR = 'SAR';
    public const CURRENCY_SBD = 'SBD';
    public const CURRENCY_SCR = 'SCR';
    public const CURRENCY_SDD = 'SDD';
    public const CURRENCY_SEK = 'SEK';
    public const CURRENCY_SHP = 'SHP';
    public const CURRENCY_SIT = 'SIT';
    public const CURRENCY_SKK = 'SKK';
    public const CURRENCY_SLL = 'SLL';
    public const CURRENCY_SOS = 'SOS';
    public const CURRENCY_SPL = 'SPL';
    public const CURRENCY_SRG = 'SRG';
    public const CURRENCY_STD = 'STD';
    public const CURRENCY_SVC = 'SVC';
    public const CURRENCY_SYP = 'SYP';
    public const CURRENCY_SZL = 'SZL';
    public const CURRENCY_THB = 'THB';
    public const CURRENCY_TJR = 'TJR';
    public const CURRENCY_TMM = 'TMM';
    public const CURRENCY_TND = 'TND';
    public const CURRENCY_TOP = 'TOP';
    public const CURRENCY_TRL = 'TRL';
    public const CURRENCY_TTD = 'TTD';
    public const CURRENCY_TVD = 'TVD';
    public const CURRENCY_TWD = 'TWD';
    public const CURRENCY_TZS = 'TZS';
    public const CURRENCY_UAH = 'UAH';
    public const CURRENCY_UGX = 'UGX';
    public const CURRENCY_UYU = 'UYU';
    public const CURRENCY_UZS = 'UZS';
    public const CURRENCY_VEB = 'VEB';
    public const CURRENCY_VUV = 'VUV';
    public const CURRENCY_WST = 'WST';
    public const CURRENCY_XAF = 'XAF';
    public const CURRENCY_XAG = 'XAG';
    public const CURRENCY_XAU = 'XAU';
    public const CURRENCY_XCD = 'XCD';
    public const CURRENCY_XDR = 'XDR';
    public const CURRENCY_XOF = 'XOF';
    public const CURRENCY_XPD = 'XPD';
    public const CURRENCY_XPF = 'XPF';
    public const CURRENCY_XPT = 'XPT';
    public const CURRENCY_YER = 'YER';
    public const CURRENCY_YUM = 'YUM';
    public const CURRENCY_ZMK = 'ZMK';
    public const CURRENCY_ZWD = 'ZWD';
    public const CURRENCY_ADP = 'ADP';
    public const CURRENCY_ATS = 'ATS';
    public const CURRENCY_BEF = 'BEF';
    public const CURRENCY_BUK = 'BUK';
    public const CURRENCY_CSD = 'CSD';
    public const CURRENCY_CSK = 'CSK';
    public const CURRENCY_DDM = 'DDM';
    public const CURRENCY_DEM = 'DEM';
    public const CURRENCY_ECS = 'ECS';
    public const CURRENCY_ESP = 'ESP';
    public const CURRENCY_FIM = 'FIM';
    public const CURRENCY_GRD = 'GRD';
    public const CURRENCY_GWP = 'GWP';
    public const CURRENCY_IEP = 'IEP';
    public const CURRENCY_ITL = 'ITL';
    public const CURRENCY_LUF = 'LUF';
    public const CURRENCY_MLF = 'MLF';
    public const CURRENCY_NLG = 'NLG';
    public const CURRENCY_PTE = 'PTE';
    public const CURRENCY_SUR = 'SUR';
    public const CURRENCY_TPE = 'TPE';
    public const CURRENCY_UAK = 'UAK';
    public const CURRENCY_XBA = 'XBA';
    public const CURRENCY_XBB = 'XBB';
    public const CURRENCY_XBC = 'XBC';
    public const CURRENCY_XBD = 'XBD';
    public const CURRENCY_XEU = 'XEU';
    public const CURRENCY_XFO = 'XFO';
    public const CURRENCY_XFU = 'XFU';
    public const CURRENCY_XGF = 'XGF';
    public const CURRENCY_XMK = 'XMK';
    public const CURRENCY_XRM = 'XRM';
    public const CURRENCY_XTS = 'XTS';
    public const CURRENCY_YDD = 'YDD';
    public const CURRENCY_YUD = 'YUD';
    public const CURRENCY_ZRN = 'ZRN';
    public const CURRENCY_TJS = 'TJS';
    public const CURRENCY_RON = 'RON';
    public const CURRENCY_BGN = 'BGN';
    public const CURRENCY_BTC = 'BTC';
    public const CURRENCY_XBT = 'XBT';
    public const CURRENCY_CNH = 'CNH';
    public const CURRENCY_RUB = 'RUB';
    public const CURRENCY__TRY = 'TRY';
    public const CURRENCY_GHS = 'GHS';
    public const CURRENCY_TMT = 'TMT';
    public const CURRENCY_ZMW = 'ZMW';
    public const CURRENCY_VEF = 'VEF';
    public const CURRENCY_SSP = 'SSP';
    public const CURRENCY_ALK = 'ALK';
    public const LOCALE_EN_US = 'en_US';
    public const LOCALE_EN_AN = 'en_AN';
    public const LOCALE_EN_GB = 'en_GB';
    public const LOCALE_EN_AU = 'en_AU';
    public const LOCALE_EN_BE = 'en_BE';
    public const LOCALE_ZH_CN = 'zh_CN';
    public const LOCALE_EN_IN = 'en_IN';
    public const LOCALE_EN_CA = 'en_CA';
    public const LOCALE_EN_ES = 'en_ES';
    public const LOCALE_EN_NZ = 'en_NZ';
    public const LOCALE_EN_IE = 'en_IE';
    public const LOCALE_EN_IL = 'en_IL';
    public const LOCALE_EN_FR = 'en_FR';
    public const LOCALE_EN_AE = 'en_AE';
    public const LOCALE_EN_FJ = 'en_FJ';
    public const LOCALE_EN_GU = 'en_GU';
    public const LOCALE_EN_HK = 'en_HK';
    public const LOCALE_EN_IT = 'en_IT';
    public const LOCALE_EN_JP = 'en_JP';
    public const LOCALE_EN_KH = 'en_KH';
    public const LOCALE_EN_KP = 'en_KP';
    public const LOCALE_EN_KR = 'en_KR';
    public const LOCALE_EN_MY = 'en_MY';
    public const LOCALE_EN_PG = 'en_PG';
    public const LOCALE_EN_PH = 'en_PH';
    public const LOCALE_EN_SB = 'en_SB';
    public const LOCALE_EN_SG = 'en_SG';
    public const LOCALE_EN_TH = 'en_TH';
    public const LOCALE_EN_TO = 'en_TO';
    public const LOCALE_EN_VN = 'en_VN';
    public const LOCALE_EN_VU = 'en_VU';
    public const LOCALE_EN_WS = 'en_WS';
    public const LOCALE_ES_ES = 'es_ES';
    public const LOCALE_FR_CA = 'fr_CA';
    public const LOCALE_FR_FR = 'fr_FR';
    public const LOCALE_NL_AN = 'nl_AN';
    public const LOCALE_EN_CH = 'en_CH';
    public const LOCALE_EN_ZA = 'en_ZA';
    public const LOCALE_EN_CN = 'en_CN';
    public const LOCALE_EN_FI = 'en_FI';
    public const LOCALE_EN_AT = 'en_AT';
    public const LOCALE_DE_AT = 'de_AT';
    public const LOCALE_EN_DE = 'en_DE';
    public const LOCALE_DE_DE = 'de_DE';
    public const LOCALE_DE_RU = 'de_RU';
    public const LOCALE_EN_ID = 'en_ID';
    public const LOCALE_EN_MX = 'en_MX';
    public const LOCALE_ES_MX = 'es_MX';
    public const LOCALE_EN_PT = 'en_PT';
    public const LOCALE_EN_SE = 'en_SE';
    public const LOCALE_EN_GLOBAL = 'en_GLOBAL';
    public const LOCALE_PT_BR = 'pt_BR';
    public const LOCALE_EN_DK = 'en_DK';
    public const LOCALE_EN_BR = 'en_BR';
    public const LOCALE_EN_BM = 'en_BM';
    public const LOCALE_EN_CK = 'en_CK';
    public const LOCALE_EN_CO = 'en_CO';
    public const LOCALE_EN_JE = 'en_JE';
    public const LOCALE_EN_BG = 'en_BG';
    public const LOCALE_EN_BW = 'en_BW';
    public const LOCALE_EN_MW = 'en_MW';
    public const LOCALE_EN_KE = 'en_KE';
    public const LOCALE_EN_SZ = 'en_SZ';
    public const LOCALE_EN_ZW = 'en_ZW';
    public const LOCALE_EN_NL = 'en_NL';
    public const LOCALE_NL_NL = 'nl_NL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_CAD,
            self::CURRENCY_EUR,
            self::CURRENCY_GBP,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_NZD,
            self::CURRENCY_SGD,
            self::CURRENCY_ZAR,
            self::CURRENCY_CNY,
            self::CURRENCY_VND,
            self::CURRENCY_MYR,
            self::CURRENCY_CHF,
            self::CURRENCY_AED,
            self::CURRENCY_AFA,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AWG,
            self::CURRENCY_AZM,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGL,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYR,
            self::CURRENCY_BZD,
            self::CURRENCY_CDF,
            self::CURRENCY_CLP,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CYP,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EEK,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GEL,
            self::CURRENCY_GGP,
            self::CURRENCY_GHC,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_ILS,
            self::CURRENCY_IMP,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JEP,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LTL,
            self::CURRENCY_LVL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGF,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRO,
            self::CURRENCY_MTL,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MZM,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_ROL,
            self::CURRENCY_RUR,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDD,
            self::CURRENCY_SEK,
            self::CURRENCY_SHP,
            self::CURRENCY_SIT,
            self::CURRENCY_SKK,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SPL,
            self::CURRENCY_SRG,
            self::CURRENCY_STD,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJR,
            self::CURRENCY_TMM,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY_TRL,
            self::CURRENCY_TTD,
            self::CURRENCY_TVD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VEB,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XAG,
            self::CURRENCY_XAU,
            self::CURRENCY_XCD,
            self::CURRENCY_XDR,
            self::CURRENCY_XOF,
            self::CURRENCY_XPD,
            self::CURRENCY_XPF,
            self::CURRENCY_XPT,
            self::CURRENCY_YER,
            self::CURRENCY_YUM,
            self::CURRENCY_ZMK,
            self::CURRENCY_ZWD,
            self::CURRENCY_ADP,
            self::CURRENCY_ATS,
            self::CURRENCY_BEF,
            self::CURRENCY_BUK,
            self::CURRENCY_CSD,
            self::CURRENCY_CSK,
            self::CURRENCY_DDM,
            self::CURRENCY_DEM,
            self::CURRENCY_ECS,
            self::CURRENCY_ESP,
            self::CURRENCY_FIM,
            self::CURRENCY_GRD,
            self::CURRENCY_GWP,
            self::CURRENCY_IEP,
            self::CURRENCY_ITL,
            self::CURRENCY_LUF,
            self::CURRENCY_MLF,
            self::CURRENCY_NLG,
            self::CURRENCY_PTE,
            self::CURRENCY_SUR,
            self::CURRENCY_TPE,
            self::CURRENCY_UAK,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XEU,
            self::CURRENCY_XFO,
            self::CURRENCY_XFU,
            self::CURRENCY_XGF,
            self::CURRENCY_XMK,
            self::CURRENCY_XRM,
            self::CURRENCY_XTS,
            self::CURRENCY_YDD,
            self::CURRENCY_YUD,
            self::CURRENCY_ZRN,
            self::CURRENCY_TJS,
            self::CURRENCY_RON,
            self::CURRENCY_BGN,
            self::CURRENCY_BTC,
            self::CURRENCY_XBT,
            self::CURRENCY_CNH,
            self::CURRENCY_RUB,
            self::CURRENCY__TRY,
            self::CURRENCY_GHS,
            self::CURRENCY_TMT,
            self::CURRENCY_ZMW,
            self::CURRENCY_VEF,
            self::CURRENCY_SSP,
            self::CURRENCY_ALK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_EN_US,
            self::LOCALE_EN_AN,
            self::LOCALE_EN_GB,
            self::LOCALE_EN_AU,
            self::LOCALE_EN_BE,
            self::LOCALE_ZH_CN,
            self::LOCALE_EN_IN,
            self::LOCALE_EN_CA,
            self::LOCALE_EN_ES,
            self::LOCALE_EN_NZ,
            self::LOCALE_EN_IE,
            self::LOCALE_EN_IL,
            self::LOCALE_EN_FR,
            self::LOCALE_EN_AE,
            self::LOCALE_EN_FJ,
            self::LOCALE_EN_GU,
            self::LOCALE_EN_HK,
            self::LOCALE_EN_IT,
            self::LOCALE_EN_JP,
            self::LOCALE_EN_KH,
            self::LOCALE_EN_KP,
            self::LOCALE_EN_KR,
            self::LOCALE_EN_MY,
            self::LOCALE_EN_PG,
            self::LOCALE_EN_PH,
            self::LOCALE_EN_SB,
            self::LOCALE_EN_SG,
            self::LOCALE_EN_TH,
            self::LOCALE_EN_TO,
            self::LOCALE_EN_VN,
            self::LOCALE_EN_VU,
            self::LOCALE_EN_WS,
            self::LOCALE_ES_ES,
            self::LOCALE_FR_CA,
            self::LOCALE_FR_FR,
            self::LOCALE_NL_AN,
            self::LOCALE_EN_CH,
            self::LOCALE_EN_ZA,
            self::LOCALE_EN_CN,
            self::LOCALE_EN_FI,
            self::LOCALE_EN_AT,
            self::LOCALE_DE_AT,
            self::LOCALE_EN_DE,
            self::LOCALE_DE_DE,
            self::LOCALE_DE_RU,
            self::LOCALE_EN_ID,
            self::LOCALE_EN_MX,
            self::LOCALE_ES_MX,
            self::LOCALE_EN_PT,
            self::LOCALE_EN_SE,
            self::LOCALE_EN_GLOBAL,
            self::LOCALE_PT_BR,
            self::LOCALE_EN_DK,
            self::LOCALE_EN_BR,
            self::LOCALE_EN_BM,
            self::LOCALE_EN_CK,
            self::LOCALE_EN_CO,
            self::LOCALE_EN_JE,
            self::LOCALE_EN_BG,
            self::LOCALE_EN_BW,
            self::LOCALE_EN_MW,
            self::LOCALE_EN_KE,
            self::LOCALE_EN_SZ,
            self::LOCALE_EN_ZW,
            self::LOCALE_EN_NL,
            self::LOCALE_NL_NL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['date_format']) && (mb_strlen($this->container['date_format']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'date_format', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['date_format']) && (mb_strlen($this->container['date_format']) < 1)) {
            $invalidProperties[] = "invalid value for 'date_format', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['time_zone']) && (mb_strlen($this->container['time_zone']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'time_zone', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['time_zone']) && (mb_strlen($this->container['time_zone']) < 1)) {
            $invalidProperties[] = "invalid value for 'time_zone', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locale', must be one of '%s'",
                $this->container['locale'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_format
     *
     * @return string|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param string|null $date_format The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            throw new \InvalidArgumentException('non-nullable date_format cannot be null');
        }
        if ((mb_strlen($date_format) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $date_format when calling UserResponsePreferences., must be smaller than or equal to 2147483647.');
        }
        if ((mb_strlen($date_format) < 1)) {
            throw new \InvalidArgumentException('invalid length for $date_format when calling UserResponsePreferences., must be bigger than or equal to 1.');
        }

        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone The timezone of the user. This attribute is just a place holder and has no impact on any other API services.
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        if ((mb_strlen($time_zone) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $time_zone when calling UserResponsePreferences., must be smaller than or equal to 2147483647.');
        }
        if ((mb_strlen($time_zone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $time_zone when calling UserResponsePreferences., must be bigger than or equal to 1.');
        }

        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $allowedValues = $this->getLocaleAllowableValues();
        if (!in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locale', must be one of '%s'",
                    $locale,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


