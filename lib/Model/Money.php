<?php
/**
 * Money
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * Money Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Money implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Money';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'converted_amount' => 'float',
        'currency' => 'string',
        'converted_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'converted_amount' => 'double',
        'currency' => null,
        'converted_currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'converted_amount' => false,
        'currency' => false,
        'converted_currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'converted_amount' => 'convertedAmount',
        'currency' => 'currency',
        'converted_currency' => 'convertedCurrency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'converted_amount' => 'setConvertedAmount',
        'currency' => 'setCurrency',
        'converted_currency' => 'setConvertedCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'converted_amount' => 'getConvertedAmount',
        'currency' => 'getCurrency',
        'converted_currency' => 'getConvertedCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_USD = 'USD';
    public const CURRENCY_AUD = 'AUD';
    public const CURRENCY_BRL = 'BRL';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_HKD = 'HKD';
    public const CURRENCY_IDR = 'IDR';
    public const CURRENCY_INR = 'INR';
    public const CURRENCY_JPY = 'JPY';
    public const CURRENCY_NZD = 'NZD';
    public const CURRENCY_SGD = 'SGD';
    public const CURRENCY_ZAR = 'ZAR';
    public const CURRENCY_CNY = 'CNY';
    public const CURRENCY_VND = 'VND';
    public const CURRENCY_MYR = 'MYR';
    public const CURRENCY_CHF = 'CHF';
    public const CURRENCY_AED = 'AED';
    public const CURRENCY_AFA = 'AFA';
    public const CURRENCY_ALL = 'ALL';
    public const CURRENCY_AMD = 'AMD';
    public const CURRENCY_ANG = 'ANG';
    public const CURRENCY_AOA = 'AOA';
    public const CURRENCY_ARS = 'ARS';
    public const CURRENCY_AWG = 'AWG';
    public const CURRENCY_AZM = 'AZM';
    public const CURRENCY_BAM = 'BAM';
    public const CURRENCY_BBD = 'BBD';
    public const CURRENCY_BDT = 'BDT';
    public const CURRENCY_BGL = 'BGL';
    public const CURRENCY_BHD = 'BHD';
    public const CURRENCY_BIF = 'BIF';
    public const CURRENCY_BMD = 'BMD';
    public const CURRENCY_BND = 'BND';
    public const CURRENCY_BOB = 'BOB';
    public const CURRENCY_BSD = 'BSD';
    public const CURRENCY_BTN = 'BTN';
    public const CURRENCY_BWP = 'BWP';
    public const CURRENCY_BYR = 'BYR';
    public const CURRENCY_BZD = 'BZD';
    public const CURRENCY_CDF = 'CDF';
    public const CURRENCY_CLP = 'CLP';
    public const CURRENCY_COP = 'COP';
    public const CURRENCY_CRC = 'CRC';
    public const CURRENCY_CUP = 'CUP';
    public const CURRENCY_CVE = 'CVE';
    public const CURRENCY_CYP = 'CYP';
    public const CURRENCY_CZK = 'CZK';
    public const CURRENCY_DJF = 'DJF';
    public const CURRENCY_DKK = 'DKK';
    public const CURRENCY_DOP = 'DOP';
    public const CURRENCY_DZD = 'DZD';
    public const CURRENCY_EEK = 'EEK';
    public const CURRENCY_EGP = 'EGP';
    public const CURRENCY_ERN = 'ERN';
    public const CURRENCY_ETB = 'ETB';
    public const CURRENCY_FJD = 'FJD';
    public const CURRENCY_FKP = 'FKP';
    public const CURRENCY_GEL = 'GEL';
    public const CURRENCY_GGP = 'GGP';
    public const CURRENCY_GHC = 'GHC';
    public const CURRENCY_GIP = 'GIP';
    public const CURRENCY_GMD = 'GMD';
    public const CURRENCY_GNF = 'GNF';
    public const CURRENCY_GTQ = 'GTQ';
    public const CURRENCY_GYD = 'GYD';
    public const CURRENCY_HNL = 'HNL';
    public const CURRENCY_HRK = 'HRK';
    public const CURRENCY_HTG = 'HTG';
    public const CURRENCY_HUF = 'HUF';
    public const CURRENCY_ILS = 'ILS';
    public const CURRENCY_IMP = 'IMP';
    public const CURRENCY_IQD = 'IQD';
    public const CURRENCY_IRR = 'IRR';
    public const CURRENCY_ISK = 'ISK';
    public const CURRENCY_JEP = 'JEP';
    public const CURRENCY_JMD = 'JMD';
    public const CURRENCY_JOD = 'JOD';
    public const CURRENCY_KES = 'KES';
    public const CURRENCY_KGS = 'KGS';
    public const CURRENCY_KHR = 'KHR';
    public const CURRENCY_KMF = 'KMF';
    public const CURRENCY_KPW = 'KPW';
    public const CURRENCY_KRW = 'KRW';
    public const CURRENCY_KWD = 'KWD';
    public const CURRENCY_KYD = 'KYD';
    public const CURRENCY_KZT = 'KZT';
    public const CURRENCY_LAK = 'LAK';
    public const CURRENCY_LBP = 'LBP';
    public const CURRENCY_LKR = 'LKR';
    public const CURRENCY_LRD = 'LRD';
    public const CURRENCY_LSL = 'LSL';
    public const CURRENCY_LTL = 'LTL';
    public const CURRENCY_LVL = 'LVL';
    public const CURRENCY_LYD = 'LYD';
    public const CURRENCY_MAD = 'MAD';
    public const CURRENCY_MDL = 'MDL';
    public const CURRENCY_MGF = 'MGF';
    public const CURRENCY_MKD = 'MKD';
    public const CURRENCY_MMK = 'MMK';
    public const CURRENCY_MNT = 'MNT';
    public const CURRENCY_MOP = 'MOP';
    public const CURRENCY_MRO = 'MRO';
    public const CURRENCY_MTL = 'MTL';
    public const CURRENCY_MUR = 'MUR';
    public const CURRENCY_MVR = 'MVR';
    public const CURRENCY_MWK = 'MWK';
    public const CURRENCY_MXN = 'MXN';
    public const CURRENCY_MZM = 'MZM';
    public const CURRENCY_NAD = 'NAD';
    public const CURRENCY_NGN = 'NGN';
    public const CURRENCY_NIO = 'NIO';
    public const CURRENCY_NOK = 'NOK';
    public const CURRENCY_NPR = 'NPR';
    public const CURRENCY_OMR = 'OMR';
    public const CURRENCY_PAB = 'PAB';
    public const CURRENCY_PEN = 'PEN';
    public const CURRENCY_PGK = 'PGK';
    public const CURRENCY_PHP = 'PHP';
    public const CURRENCY_PKR = 'PKR';
    public const CURRENCY_PLN = 'PLN';
    public const CURRENCY_PYG = 'PYG';
    public const CURRENCY_QAR = 'QAR';
    public const CURRENCY_ROL = 'ROL';
    public const CURRENCY_RUR = 'RUR';
    public const CURRENCY_RWF = 'RWF';
    public const CURRENCY_SAR = 'SAR';
    public const CURRENCY_SBD = 'SBD';
    public const CURRENCY_SCR = 'SCR';
    public const CURRENCY_SDD = 'SDD';
    public const CURRENCY_SEK = 'SEK';
    public const CURRENCY_SHP = 'SHP';
    public const CURRENCY_SIT = 'SIT';
    public const CURRENCY_SKK = 'SKK';
    public const CURRENCY_SLL = 'SLL';
    public const CURRENCY_SOS = 'SOS';
    public const CURRENCY_SPL = 'SPL';
    public const CURRENCY_SRG = 'SRG';
    public const CURRENCY_STD = 'STD';
    public const CURRENCY_SVC = 'SVC';
    public const CURRENCY_SYP = 'SYP';
    public const CURRENCY_SZL = 'SZL';
    public const CURRENCY_THB = 'THB';
    public const CURRENCY_TJR = 'TJR';
    public const CURRENCY_TMM = 'TMM';
    public const CURRENCY_TND = 'TND';
    public const CURRENCY_TOP = 'TOP';
    public const CURRENCY_TRL = 'TRL';
    public const CURRENCY_TTD = 'TTD';
    public const CURRENCY_TVD = 'TVD';
    public const CURRENCY_TWD = 'TWD';
    public const CURRENCY_TZS = 'TZS';
    public const CURRENCY_UAH = 'UAH';
    public const CURRENCY_UGX = 'UGX';
    public const CURRENCY_UYU = 'UYU';
    public const CURRENCY_UZS = 'UZS';
    public const CURRENCY_VEB = 'VEB';
    public const CURRENCY_VUV = 'VUV';
    public const CURRENCY_WST = 'WST';
    public const CURRENCY_XAF = 'XAF';
    public const CURRENCY_XAG = 'XAG';
    public const CURRENCY_XAU = 'XAU';
    public const CURRENCY_XCD = 'XCD';
    public const CURRENCY_XDR = 'XDR';
    public const CURRENCY_XOF = 'XOF';
    public const CURRENCY_XPD = 'XPD';
    public const CURRENCY_XPF = 'XPF';
    public const CURRENCY_XPT = 'XPT';
    public const CURRENCY_YER = 'YER';
    public const CURRENCY_YUM = 'YUM';
    public const CURRENCY_ZMK = 'ZMK';
    public const CURRENCY_ZWD = 'ZWD';
    public const CURRENCY_ADP = 'ADP';
    public const CURRENCY_ATS = 'ATS';
    public const CURRENCY_BEF = 'BEF';
    public const CURRENCY_BUK = 'BUK';
    public const CURRENCY_CSD = 'CSD';
    public const CURRENCY_CSK = 'CSK';
    public const CURRENCY_DDM = 'DDM';
    public const CURRENCY_DEM = 'DEM';
    public const CURRENCY_ECS = 'ECS';
    public const CURRENCY_ESP = 'ESP';
    public const CURRENCY_FIM = 'FIM';
    public const CURRENCY_GRD = 'GRD';
    public const CURRENCY_GWP = 'GWP';
    public const CURRENCY_IEP = 'IEP';
    public const CURRENCY_ITL = 'ITL';
    public const CURRENCY_LUF = 'LUF';
    public const CURRENCY_MLF = 'MLF';
    public const CURRENCY_NLG = 'NLG';
    public const CURRENCY_PTE = 'PTE';
    public const CURRENCY_SUR = 'SUR';
    public const CURRENCY_TPE = 'TPE';
    public const CURRENCY_UAK = 'UAK';
    public const CURRENCY_XBA = 'XBA';
    public const CURRENCY_XBB = 'XBB';
    public const CURRENCY_XBC = 'XBC';
    public const CURRENCY_XBD = 'XBD';
    public const CURRENCY_XEU = 'XEU';
    public const CURRENCY_XFO = 'XFO';
    public const CURRENCY_XFU = 'XFU';
    public const CURRENCY_XGF = 'XGF';
    public const CURRENCY_XMK = 'XMK';
    public const CURRENCY_XRM = 'XRM';
    public const CURRENCY_XTS = 'XTS';
    public const CURRENCY_YDD = 'YDD';
    public const CURRENCY_YUD = 'YUD';
    public const CURRENCY_ZRN = 'ZRN';
    public const CURRENCY_TJS = 'TJS';
    public const CURRENCY_RON = 'RON';
    public const CURRENCY_BGN = 'BGN';
    public const CURRENCY_BTC = 'BTC';
    public const CURRENCY_XBT = 'XBT';
    public const CURRENCY_CNH = 'CNH';
    public const CURRENCY_RUB = 'RUB';
    public const CURRENCY__TRY = 'TRY';
    public const CURRENCY_GHS = 'GHS';
    public const CURRENCY_TMT = 'TMT';
    public const CURRENCY_ZMW = 'ZMW';
    public const CURRENCY_VEF = 'VEF';
    public const CURRENCY_SSP = 'SSP';
    public const CURRENCY_ALK = 'ALK';
    public const CONVERTED_CURRENCY_USD = 'USD';
    public const CONVERTED_CURRENCY_AUD = 'AUD';
    public const CONVERTED_CURRENCY_BRL = 'BRL';
    public const CONVERTED_CURRENCY_CAD = 'CAD';
    public const CONVERTED_CURRENCY_EUR = 'EUR';
    public const CONVERTED_CURRENCY_GBP = 'GBP';
    public const CONVERTED_CURRENCY_HKD = 'HKD';
    public const CONVERTED_CURRENCY_IDR = 'IDR';
    public const CONVERTED_CURRENCY_INR = 'INR';
    public const CONVERTED_CURRENCY_JPY = 'JPY';
    public const CONVERTED_CURRENCY_NZD = 'NZD';
    public const CONVERTED_CURRENCY_SGD = 'SGD';
    public const CONVERTED_CURRENCY_ZAR = 'ZAR';
    public const CONVERTED_CURRENCY_CNY = 'CNY';
    public const CONVERTED_CURRENCY_VND = 'VND';
    public const CONVERTED_CURRENCY_MYR = 'MYR';
    public const CONVERTED_CURRENCY_CHF = 'CHF';
    public const CONVERTED_CURRENCY_AED = 'AED';
    public const CONVERTED_CURRENCY_AFA = 'AFA';
    public const CONVERTED_CURRENCY_ALL = 'ALL';
    public const CONVERTED_CURRENCY_AMD = 'AMD';
    public const CONVERTED_CURRENCY_ANG = 'ANG';
    public const CONVERTED_CURRENCY_AOA = 'AOA';
    public const CONVERTED_CURRENCY_ARS = 'ARS';
    public const CONVERTED_CURRENCY_AWG = 'AWG';
    public const CONVERTED_CURRENCY_AZM = 'AZM';
    public const CONVERTED_CURRENCY_BAM = 'BAM';
    public const CONVERTED_CURRENCY_BBD = 'BBD';
    public const CONVERTED_CURRENCY_BDT = 'BDT';
    public const CONVERTED_CURRENCY_BGL = 'BGL';
    public const CONVERTED_CURRENCY_BHD = 'BHD';
    public const CONVERTED_CURRENCY_BIF = 'BIF';
    public const CONVERTED_CURRENCY_BMD = 'BMD';
    public const CONVERTED_CURRENCY_BND = 'BND';
    public const CONVERTED_CURRENCY_BOB = 'BOB';
    public const CONVERTED_CURRENCY_BSD = 'BSD';
    public const CONVERTED_CURRENCY_BTN = 'BTN';
    public const CONVERTED_CURRENCY_BWP = 'BWP';
    public const CONVERTED_CURRENCY_BYR = 'BYR';
    public const CONVERTED_CURRENCY_BZD = 'BZD';
    public const CONVERTED_CURRENCY_CDF = 'CDF';
    public const CONVERTED_CURRENCY_CLP = 'CLP';
    public const CONVERTED_CURRENCY_COP = 'COP';
    public const CONVERTED_CURRENCY_CRC = 'CRC';
    public const CONVERTED_CURRENCY_CUP = 'CUP';
    public const CONVERTED_CURRENCY_CVE = 'CVE';
    public const CONVERTED_CURRENCY_CYP = 'CYP';
    public const CONVERTED_CURRENCY_CZK = 'CZK';
    public const CONVERTED_CURRENCY_DJF = 'DJF';
    public const CONVERTED_CURRENCY_DKK = 'DKK';
    public const CONVERTED_CURRENCY_DOP = 'DOP';
    public const CONVERTED_CURRENCY_DZD = 'DZD';
    public const CONVERTED_CURRENCY_EEK = 'EEK';
    public const CONVERTED_CURRENCY_EGP = 'EGP';
    public const CONVERTED_CURRENCY_ERN = 'ERN';
    public const CONVERTED_CURRENCY_ETB = 'ETB';
    public const CONVERTED_CURRENCY_FJD = 'FJD';
    public const CONVERTED_CURRENCY_FKP = 'FKP';
    public const CONVERTED_CURRENCY_GEL = 'GEL';
    public const CONVERTED_CURRENCY_GGP = 'GGP';
    public const CONVERTED_CURRENCY_GHC = 'GHC';
    public const CONVERTED_CURRENCY_GIP = 'GIP';
    public const CONVERTED_CURRENCY_GMD = 'GMD';
    public const CONVERTED_CURRENCY_GNF = 'GNF';
    public const CONVERTED_CURRENCY_GTQ = 'GTQ';
    public const CONVERTED_CURRENCY_GYD = 'GYD';
    public const CONVERTED_CURRENCY_HNL = 'HNL';
    public const CONVERTED_CURRENCY_HRK = 'HRK';
    public const CONVERTED_CURRENCY_HTG = 'HTG';
    public const CONVERTED_CURRENCY_HUF = 'HUF';
    public const CONVERTED_CURRENCY_ILS = 'ILS';
    public const CONVERTED_CURRENCY_IMP = 'IMP';
    public const CONVERTED_CURRENCY_IQD = 'IQD';
    public const CONVERTED_CURRENCY_IRR = 'IRR';
    public const CONVERTED_CURRENCY_ISK = 'ISK';
    public const CONVERTED_CURRENCY_JEP = 'JEP';
    public const CONVERTED_CURRENCY_JMD = 'JMD';
    public const CONVERTED_CURRENCY_JOD = 'JOD';
    public const CONVERTED_CURRENCY_KES = 'KES';
    public const CONVERTED_CURRENCY_KGS = 'KGS';
    public const CONVERTED_CURRENCY_KHR = 'KHR';
    public const CONVERTED_CURRENCY_KMF = 'KMF';
    public const CONVERTED_CURRENCY_KPW = 'KPW';
    public const CONVERTED_CURRENCY_KRW = 'KRW';
    public const CONVERTED_CURRENCY_KWD = 'KWD';
    public const CONVERTED_CURRENCY_KYD = 'KYD';
    public const CONVERTED_CURRENCY_KZT = 'KZT';
    public const CONVERTED_CURRENCY_LAK = 'LAK';
    public const CONVERTED_CURRENCY_LBP = 'LBP';
    public const CONVERTED_CURRENCY_LKR = 'LKR';
    public const CONVERTED_CURRENCY_LRD = 'LRD';
    public const CONVERTED_CURRENCY_LSL = 'LSL';
    public const CONVERTED_CURRENCY_LTL = 'LTL';
    public const CONVERTED_CURRENCY_LVL = 'LVL';
    public const CONVERTED_CURRENCY_LYD = 'LYD';
    public const CONVERTED_CURRENCY_MAD = 'MAD';
    public const CONVERTED_CURRENCY_MDL = 'MDL';
    public const CONVERTED_CURRENCY_MGF = 'MGF';
    public const CONVERTED_CURRENCY_MKD = 'MKD';
    public const CONVERTED_CURRENCY_MMK = 'MMK';
    public const CONVERTED_CURRENCY_MNT = 'MNT';
    public const CONVERTED_CURRENCY_MOP = 'MOP';
    public const CONVERTED_CURRENCY_MRO = 'MRO';
    public const CONVERTED_CURRENCY_MTL = 'MTL';
    public const CONVERTED_CURRENCY_MUR = 'MUR';
    public const CONVERTED_CURRENCY_MVR = 'MVR';
    public const CONVERTED_CURRENCY_MWK = 'MWK';
    public const CONVERTED_CURRENCY_MXN = 'MXN';
    public const CONVERTED_CURRENCY_MZM = 'MZM';
    public const CONVERTED_CURRENCY_NAD = 'NAD';
    public const CONVERTED_CURRENCY_NGN = 'NGN';
    public const CONVERTED_CURRENCY_NIO = 'NIO';
    public const CONVERTED_CURRENCY_NOK = 'NOK';
    public const CONVERTED_CURRENCY_NPR = 'NPR';
    public const CONVERTED_CURRENCY_OMR = 'OMR';
    public const CONVERTED_CURRENCY_PAB = 'PAB';
    public const CONVERTED_CURRENCY_PEN = 'PEN';
    public const CONVERTED_CURRENCY_PGK = 'PGK';
    public const CONVERTED_CURRENCY_PHP = 'PHP';
    public const CONVERTED_CURRENCY_PKR = 'PKR';
    public const CONVERTED_CURRENCY_PLN = 'PLN';
    public const CONVERTED_CURRENCY_PYG = 'PYG';
    public const CONVERTED_CURRENCY_QAR = 'QAR';
    public const CONVERTED_CURRENCY_ROL = 'ROL';
    public const CONVERTED_CURRENCY_RUR = 'RUR';
    public const CONVERTED_CURRENCY_RWF = 'RWF';
    public const CONVERTED_CURRENCY_SAR = 'SAR';
    public const CONVERTED_CURRENCY_SBD = 'SBD';
    public const CONVERTED_CURRENCY_SCR = 'SCR';
    public const CONVERTED_CURRENCY_SDD = 'SDD';
    public const CONVERTED_CURRENCY_SEK = 'SEK';
    public const CONVERTED_CURRENCY_SHP = 'SHP';
    public const CONVERTED_CURRENCY_SIT = 'SIT';
    public const CONVERTED_CURRENCY_SKK = 'SKK';
    public const CONVERTED_CURRENCY_SLL = 'SLL';
    public const CONVERTED_CURRENCY_SOS = 'SOS';
    public const CONVERTED_CURRENCY_SPL = 'SPL';
    public const CONVERTED_CURRENCY_SRG = 'SRG';
    public const CONVERTED_CURRENCY_STD = 'STD';
    public const CONVERTED_CURRENCY_SVC = 'SVC';
    public const CONVERTED_CURRENCY_SYP = 'SYP';
    public const CONVERTED_CURRENCY_SZL = 'SZL';
    public const CONVERTED_CURRENCY_THB = 'THB';
    public const CONVERTED_CURRENCY_TJR = 'TJR';
    public const CONVERTED_CURRENCY_TMM = 'TMM';
    public const CONVERTED_CURRENCY_TND = 'TND';
    public const CONVERTED_CURRENCY_TOP = 'TOP';
    public const CONVERTED_CURRENCY_TRL = 'TRL';
    public const CONVERTED_CURRENCY_TTD = 'TTD';
    public const CONVERTED_CURRENCY_TVD = 'TVD';
    public const CONVERTED_CURRENCY_TWD = 'TWD';
    public const CONVERTED_CURRENCY_TZS = 'TZS';
    public const CONVERTED_CURRENCY_UAH = 'UAH';
    public const CONVERTED_CURRENCY_UGX = 'UGX';
    public const CONVERTED_CURRENCY_UYU = 'UYU';
    public const CONVERTED_CURRENCY_UZS = 'UZS';
    public const CONVERTED_CURRENCY_VEB = 'VEB';
    public const CONVERTED_CURRENCY_VUV = 'VUV';
    public const CONVERTED_CURRENCY_WST = 'WST';
    public const CONVERTED_CURRENCY_XAF = 'XAF';
    public const CONVERTED_CURRENCY_XAG = 'XAG';
    public const CONVERTED_CURRENCY_XAU = 'XAU';
    public const CONVERTED_CURRENCY_XCD = 'XCD';
    public const CONVERTED_CURRENCY_XDR = 'XDR';
    public const CONVERTED_CURRENCY_XOF = 'XOF';
    public const CONVERTED_CURRENCY_XPD = 'XPD';
    public const CONVERTED_CURRENCY_XPF = 'XPF';
    public const CONVERTED_CURRENCY_XPT = 'XPT';
    public const CONVERTED_CURRENCY_YER = 'YER';
    public const CONVERTED_CURRENCY_YUM = 'YUM';
    public const CONVERTED_CURRENCY_ZMK = 'ZMK';
    public const CONVERTED_CURRENCY_ZWD = 'ZWD';
    public const CONVERTED_CURRENCY_ADP = 'ADP';
    public const CONVERTED_CURRENCY_ATS = 'ATS';
    public const CONVERTED_CURRENCY_BEF = 'BEF';
    public const CONVERTED_CURRENCY_BUK = 'BUK';
    public const CONVERTED_CURRENCY_CSD = 'CSD';
    public const CONVERTED_CURRENCY_CSK = 'CSK';
    public const CONVERTED_CURRENCY_DDM = 'DDM';
    public const CONVERTED_CURRENCY_DEM = 'DEM';
    public const CONVERTED_CURRENCY_ECS = 'ECS';
    public const CONVERTED_CURRENCY_ESP = 'ESP';
    public const CONVERTED_CURRENCY_FIM = 'FIM';
    public const CONVERTED_CURRENCY_GRD = 'GRD';
    public const CONVERTED_CURRENCY_GWP = 'GWP';
    public const CONVERTED_CURRENCY_IEP = 'IEP';
    public const CONVERTED_CURRENCY_ITL = 'ITL';
    public const CONVERTED_CURRENCY_LUF = 'LUF';
    public const CONVERTED_CURRENCY_MLF = 'MLF';
    public const CONVERTED_CURRENCY_NLG = 'NLG';
    public const CONVERTED_CURRENCY_PTE = 'PTE';
    public const CONVERTED_CURRENCY_SUR = 'SUR';
    public const CONVERTED_CURRENCY_TPE = 'TPE';
    public const CONVERTED_CURRENCY_UAK = 'UAK';
    public const CONVERTED_CURRENCY_XBA = 'XBA';
    public const CONVERTED_CURRENCY_XBB = 'XBB';
    public const CONVERTED_CURRENCY_XBC = 'XBC';
    public const CONVERTED_CURRENCY_XBD = 'XBD';
    public const CONVERTED_CURRENCY_XEU = 'XEU';
    public const CONVERTED_CURRENCY_XFO = 'XFO';
    public const CONVERTED_CURRENCY_XFU = 'XFU';
    public const CONVERTED_CURRENCY_XGF = 'XGF';
    public const CONVERTED_CURRENCY_XMK = 'XMK';
    public const CONVERTED_CURRENCY_XRM = 'XRM';
    public const CONVERTED_CURRENCY_XTS = 'XTS';
    public const CONVERTED_CURRENCY_YDD = 'YDD';
    public const CONVERTED_CURRENCY_YUD = 'YUD';
    public const CONVERTED_CURRENCY_ZRN = 'ZRN';
    public const CONVERTED_CURRENCY_TJS = 'TJS';
    public const CONVERTED_CURRENCY_RON = 'RON';
    public const CONVERTED_CURRENCY_BGN = 'BGN';
    public const CONVERTED_CURRENCY_BTC = 'BTC';
    public const CONVERTED_CURRENCY_XBT = 'XBT';
    public const CONVERTED_CURRENCY_CNH = 'CNH';
    public const CONVERTED_CURRENCY_RUB = 'RUB';
    public const CONVERTED_CURRENCY__TRY = 'TRY';
    public const CONVERTED_CURRENCY_GHS = 'GHS';
    public const CONVERTED_CURRENCY_TMT = 'TMT';
    public const CONVERTED_CURRENCY_ZMW = 'ZMW';
    public const CONVERTED_CURRENCY_VEF = 'VEF';
    public const CONVERTED_CURRENCY_SSP = 'SSP';
    public const CONVERTED_CURRENCY_ALK = 'ALK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_CAD,
            self::CURRENCY_EUR,
            self::CURRENCY_GBP,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_NZD,
            self::CURRENCY_SGD,
            self::CURRENCY_ZAR,
            self::CURRENCY_CNY,
            self::CURRENCY_VND,
            self::CURRENCY_MYR,
            self::CURRENCY_CHF,
            self::CURRENCY_AED,
            self::CURRENCY_AFA,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AWG,
            self::CURRENCY_AZM,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGL,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYR,
            self::CURRENCY_BZD,
            self::CURRENCY_CDF,
            self::CURRENCY_CLP,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CYP,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EEK,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GEL,
            self::CURRENCY_GGP,
            self::CURRENCY_GHC,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_ILS,
            self::CURRENCY_IMP,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JEP,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LTL,
            self::CURRENCY_LVL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGF,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRO,
            self::CURRENCY_MTL,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MZM,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_ROL,
            self::CURRENCY_RUR,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDD,
            self::CURRENCY_SEK,
            self::CURRENCY_SHP,
            self::CURRENCY_SIT,
            self::CURRENCY_SKK,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SPL,
            self::CURRENCY_SRG,
            self::CURRENCY_STD,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJR,
            self::CURRENCY_TMM,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY_TRL,
            self::CURRENCY_TTD,
            self::CURRENCY_TVD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VEB,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XAG,
            self::CURRENCY_XAU,
            self::CURRENCY_XCD,
            self::CURRENCY_XDR,
            self::CURRENCY_XOF,
            self::CURRENCY_XPD,
            self::CURRENCY_XPF,
            self::CURRENCY_XPT,
            self::CURRENCY_YER,
            self::CURRENCY_YUM,
            self::CURRENCY_ZMK,
            self::CURRENCY_ZWD,
            self::CURRENCY_ADP,
            self::CURRENCY_ATS,
            self::CURRENCY_BEF,
            self::CURRENCY_BUK,
            self::CURRENCY_CSD,
            self::CURRENCY_CSK,
            self::CURRENCY_DDM,
            self::CURRENCY_DEM,
            self::CURRENCY_ECS,
            self::CURRENCY_ESP,
            self::CURRENCY_FIM,
            self::CURRENCY_GRD,
            self::CURRENCY_GWP,
            self::CURRENCY_IEP,
            self::CURRENCY_ITL,
            self::CURRENCY_LUF,
            self::CURRENCY_MLF,
            self::CURRENCY_NLG,
            self::CURRENCY_PTE,
            self::CURRENCY_SUR,
            self::CURRENCY_TPE,
            self::CURRENCY_UAK,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XEU,
            self::CURRENCY_XFO,
            self::CURRENCY_XFU,
            self::CURRENCY_XGF,
            self::CURRENCY_XMK,
            self::CURRENCY_XRM,
            self::CURRENCY_XTS,
            self::CURRENCY_YDD,
            self::CURRENCY_YUD,
            self::CURRENCY_ZRN,
            self::CURRENCY_TJS,
            self::CURRENCY_RON,
            self::CURRENCY_BGN,
            self::CURRENCY_BTC,
            self::CURRENCY_XBT,
            self::CURRENCY_CNH,
            self::CURRENCY_RUB,
            self::CURRENCY__TRY,
            self::CURRENCY_GHS,
            self::CURRENCY_TMT,
            self::CURRENCY_ZMW,
            self::CURRENCY_VEF,
            self::CURRENCY_SSP,
            self::CURRENCY_ALK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConvertedCurrencyAllowableValues()
    {
        return [
            self::CONVERTED_CURRENCY_USD,
            self::CONVERTED_CURRENCY_AUD,
            self::CONVERTED_CURRENCY_BRL,
            self::CONVERTED_CURRENCY_CAD,
            self::CONVERTED_CURRENCY_EUR,
            self::CONVERTED_CURRENCY_GBP,
            self::CONVERTED_CURRENCY_HKD,
            self::CONVERTED_CURRENCY_IDR,
            self::CONVERTED_CURRENCY_INR,
            self::CONVERTED_CURRENCY_JPY,
            self::CONVERTED_CURRENCY_NZD,
            self::CONVERTED_CURRENCY_SGD,
            self::CONVERTED_CURRENCY_ZAR,
            self::CONVERTED_CURRENCY_CNY,
            self::CONVERTED_CURRENCY_VND,
            self::CONVERTED_CURRENCY_MYR,
            self::CONVERTED_CURRENCY_CHF,
            self::CONVERTED_CURRENCY_AED,
            self::CONVERTED_CURRENCY_AFA,
            self::CONVERTED_CURRENCY_ALL,
            self::CONVERTED_CURRENCY_AMD,
            self::CONVERTED_CURRENCY_ANG,
            self::CONVERTED_CURRENCY_AOA,
            self::CONVERTED_CURRENCY_ARS,
            self::CONVERTED_CURRENCY_AWG,
            self::CONVERTED_CURRENCY_AZM,
            self::CONVERTED_CURRENCY_BAM,
            self::CONVERTED_CURRENCY_BBD,
            self::CONVERTED_CURRENCY_BDT,
            self::CONVERTED_CURRENCY_BGL,
            self::CONVERTED_CURRENCY_BHD,
            self::CONVERTED_CURRENCY_BIF,
            self::CONVERTED_CURRENCY_BMD,
            self::CONVERTED_CURRENCY_BND,
            self::CONVERTED_CURRENCY_BOB,
            self::CONVERTED_CURRENCY_BSD,
            self::CONVERTED_CURRENCY_BTN,
            self::CONVERTED_CURRENCY_BWP,
            self::CONVERTED_CURRENCY_BYR,
            self::CONVERTED_CURRENCY_BZD,
            self::CONVERTED_CURRENCY_CDF,
            self::CONVERTED_CURRENCY_CLP,
            self::CONVERTED_CURRENCY_COP,
            self::CONVERTED_CURRENCY_CRC,
            self::CONVERTED_CURRENCY_CUP,
            self::CONVERTED_CURRENCY_CVE,
            self::CONVERTED_CURRENCY_CYP,
            self::CONVERTED_CURRENCY_CZK,
            self::CONVERTED_CURRENCY_DJF,
            self::CONVERTED_CURRENCY_DKK,
            self::CONVERTED_CURRENCY_DOP,
            self::CONVERTED_CURRENCY_DZD,
            self::CONVERTED_CURRENCY_EEK,
            self::CONVERTED_CURRENCY_EGP,
            self::CONVERTED_CURRENCY_ERN,
            self::CONVERTED_CURRENCY_ETB,
            self::CONVERTED_CURRENCY_FJD,
            self::CONVERTED_CURRENCY_FKP,
            self::CONVERTED_CURRENCY_GEL,
            self::CONVERTED_CURRENCY_GGP,
            self::CONVERTED_CURRENCY_GHC,
            self::CONVERTED_CURRENCY_GIP,
            self::CONVERTED_CURRENCY_GMD,
            self::CONVERTED_CURRENCY_GNF,
            self::CONVERTED_CURRENCY_GTQ,
            self::CONVERTED_CURRENCY_GYD,
            self::CONVERTED_CURRENCY_HNL,
            self::CONVERTED_CURRENCY_HRK,
            self::CONVERTED_CURRENCY_HTG,
            self::CONVERTED_CURRENCY_HUF,
            self::CONVERTED_CURRENCY_ILS,
            self::CONVERTED_CURRENCY_IMP,
            self::CONVERTED_CURRENCY_IQD,
            self::CONVERTED_CURRENCY_IRR,
            self::CONVERTED_CURRENCY_ISK,
            self::CONVERTED_CURRENCY_JEP,
            self::CONVERTED_CURRENCY_JMD,
            self::CONVERTED_CURRENCY_JOD,
            self::CONVERTED_CURRENCY_KES,
            self::CONVERTED_CURRENCY_KGS,
            self::CONVERTED_CURRENCY_KHR,
            self::CONVERTED_CURRENCY_KMF,
            self::CONVERTED_CURRENCY_KPW,
            self::CONVERTED_CURRENCY_KRW,
            self::CONVERTED_CURRENCY_KWD,
            self::CONVERTED_CURRENCY_KYD,
            self::CONVERTED_CURRENCY_KZT,
            self::CONVERTED_CURRENCY_LAK,
            self::CONVERTED_CURRENCY_LBP,
            self::CONVERTED_CURRENCY_LKR,
            self::CONVERTED_CURRENCY_LRD,
            self::CONVERTED_CURRENCY_LSL,
            self::CONVERTED_CURRENCY_LTL,
            self::CONVERTED_CURRENCY_LVL,
            self::CONVERTED_CURRENCY_LYD,
            self::CONVERTED_CURRENCY_MAD,
            self::CONVERTED_CURRENCY_MDL,
            self::CONVERTED_CURRENCY_MGF,
            self::CONVERTED_CURRENCY_MKD,
            self::CONVERTED_CURRENCY_MMK,
            self::CONVERTED_CURRENCY_MNT,
            self::CONVERTED_CURRENCY_MOP,
            self::CONVERTED_CURRENCY_MRO,
            self::CONVERTED_CURRENCY_MTL,
            self::CONVERTED_CURRENCY_MUR,
            self::CONVERTED_CURRENCY_MVR,
            self::CONVERTED_CURRENCY_MWK,
            self::CONVERTED_CURRENCY_MXN,
            self::CONVERTED_CURRENCY_MZM,
            self::CONVERTED_CURRENCY_NAD,
            self::CONVERTED_CURRENCY_NGN,
            self::CONVERTED_CURRENCY_NIO,
            self::CONVERTED_CURRENCY_NOK,
            self::CONVERTED_CURRENCY_NPR,
            self::CONVERTED_CURRENCY_OMR,
            self::CONVERTED_CURRENCY_PAB,
            self::CONVERTED_CURRENCY_PEN,
            self::CONVERTED_CURRENCY_PGK,
            self::CONVERTED_CURRENCY_PHP,
            self::CONVERTED_CURRENCY_PKR,
            self::CONVERTED_CURRENCY_PLN,
            self::CONVERTED_CURRENCY_PYG,
            self::CONVERTED_CURRENCY_QAR,
            self::CONVERTED_CURRENCY_ROL,
            self::CONVERTED_CURRENCY_RUR,
            self::CONVERTED_CURRENCY_RWF,
            self::CONVERTED_CURRENCY_SAR,
            self::CONVERTED_CURRENCY_SBD,
            self::CONVERTED_CURRENCY_SCR,
            self::CONVERTED_CURRENCY_SDD,
            self::CONVERTED_CURRENCY_SEK,
            self::CONVERTED_CURRENCY_SHP,
            self::CONVERTED_CURRENCY_SIT,
            self::CONVERTED_CURRENCY_SKK,
            self::CONVERTED_CURRENCY_SLL,
            self::CONVERTED_CURRENCY_SOS,
            self::CONVERTED_CURRENCY_SPL,
            self::CONVERTED_CURRENCY_SRG,
            self::CONVERTED_CURRENCY_STD,
            self::CONVERTED_CURRENCY_SVC,
            self::CONVERTED_CURRENCY_SYP,
            self::CONVERTED_CURRENCY_SZL,
            self::CONVERTED_CURRENCY_THB,
            self::CONVERTED_CURRENCY_TJR,
            self::CONVERTED_CURRENCY_TMM,
            self::CONVERTED_CURRENCY_TND,
            self::CONVERTED_CURRENCY_TOP,
            self::CONVERTED_CURRENCY_TRL,
            self::CONVERTED_CURRENCY_TTD,
            self::CONVERTED_CURRENCY_TVD,
            self::CONVERTED_CURRENCY_TWD,
            self::CONVERTED_CURRENCY_TZS,
            self::CONVERTED_CURRENCY_UAH,
            self::CONVERTED_CURRENCY_UGX,
            self::CONVERTED_CURRENCY_UYU,
            self::CONVERTED_CURRENCY_UZS,
            self::CONVERTED_CURRENCY_VEB,
            self::CONVERTED_CURRENCY_VUV,
            self::CONVERTED_CURRENCY_WST,
            self::CONVERTED_CURRENCY_XAF,
            self::CONVERTED_CURRENCY_XAG,
            self::CONVERTED_CURRENCY_XAU,
            self::CONVERTED_CURRENCY_XCD,
            self::CONVERTED_CURRENCY_XDR,
            self::CONVERTED_CURRENCY_XOF,
            self::CONVERTED_CURRENCY_XPD,
            self::CONVERTED_CURRENCY_XPF,
            self::CONVERTED_CURRENCY_XPT,
            self::CONVERTED_CURRENCY_YER,
            self::CONVERTED_CURRENCY_YUM,
            self::CONVERTED_CURRENCY_ZMK,
            self::CONVERTED_CURRENCY_ZWD,
            self::CONVERTED_CURRENCY_ADP,
            self::CONVERTED_CURRENCY_ATS,
            self::CONVERTED_CURRENCY_BEF,
            self::CONVERTED_CURRENCY_BUK,
            self::CONVERTED_CURRENCY_CSD,
            self::CONVERTED_CURRENCY_CSK,
            self::CONVERTED_CURRENCY_DDM,
            self::CONVERTED_CURRENCY_DEM,
            self::CONVERTED_CURRENCY_ECS,
            self::CONVERTED_CURRENCY_ESP,
            self::CONVERTED_CURRENCY_FIM,
            self::CONVERTED_CURRENCY_GRD,
            self::CONVERTED_CURRENCY_GWP,
            self::CONVERTED_CURRENCY_IEP,
            self::CONVERTED_CURRENCY_ITL,
            self::CONVERTED_CURRENCY_LUF,
            self::CONVERTED_CURRENCY_MLF,
            self::CONVERTED_CURRENCY_NLG,
            self::CONVERTED_CURRENCY_PTE,
            self::CONVERTED_CURRENCY_SUR,
            self::CONVERTED_CURRENCY_TPE,
            self::CONVERTED_CURRENCY_UAK,
            self::CONVERTED_CURRENCY_XBA,
            self::CONVERTED_CURRENCY_XBB,
            self::CONVERTED_CURRENCY_XBC,
            self::CONVERTED_CURRENCY_XBD,
            self::CONVERTED_CURRENCY_XEU,
            self::CONVERTED_CURRENCY_XFO,
            self::CONVERTED_CURRENCY_XFU,
            self::CONVERTED_CURRENCY_XGF,
            self::CONVERTED_CURRENCY_XMK,
            self::CONVERTED_CURRENCY_XRM,
            self::CONVERTED_CURRENCY_XTS,
            self::CONVERTED_CURRENCY_YDD,
            self::CONVERTED_CURRENCY_YUD,
            self::CONVERTED_CURRENCY_ZRN,
            self::CONVERTED_CURRENCY_TJS,
            self::CONVERTED_CURRENCY_RON,
            self::CONVERTED_CURRENCY_BGN,
            self::CONVERTED_CURRENCY_BTC,
            self::CONVERTED_CURRENCY_XBT,
            self::CONVERTED_CURRENCY_CNH,
            self::CONVERTED_CURRENCY_RUB,
            self::CONVERTED_CURRENCY__TRY,
            self::CONVERTED_CURRENCY_GHS,
            self::CONVERTED_CURRENCY_TMT,
            self::CONVERTED_CURRENCY_ZMW,
            self::CONVERTED_CURRENCY_VEF,
            self::CONVERTED_CURRENCY_SSP,
            self::CONVERTED_CURRENCY_ALK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('converted_amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('converted_currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConvertedCurrencyAllowableValues();
        if (!is_null($this->container['converted_currency']) && !in_array($this->container['converted_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'converted_currency', must be one of '%s'",
                $this->container['converted_currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Value of amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets converted_amount
     *
     * @return float|null
     */
    public function getConvertedAmount()
    {
        return $this->container['converted_amount'];
    }

    /**
     * Sets converted_amount
     *
     * @param float|null $converted_amount Value of the converted amount.
     *
     * @return self
     */
    public function setConvertedAmount($converted_amount)
    {
        if (is_null($converted_amount)) {
            throw new \InvalidArgumentException('non-nullable converted_amount cannot be null');
        }
        $this->container['converted_amount'] = $converted_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency should be a valid three-letter ISO Code.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets converted_currency
     *
     * @return string|null
     */
    public function getConvertedCurrency()
    {
        return $this->container['converted_currency'];
    }

    /**
     * Sets converted_currency
     *
     * @param string|null $converted_currency Currency should be a valid three-letter ISO Code.
     *
     * @return self
     */
    public function setConvertedCurrency($converted_currency)
    {
        if (is_null($converted_currency)) {
            throw new \InvalidArgumentException('non-nullable converted_currency cannot be null');
        }
        $allowedValues = $this->getConvertedCurrencyAllowableValues();
        if (!in_array($converted_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'converted_currency', must be one of '%s'",
                    $converted_currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['converted_currency'] = $converted_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


