<?php
/**
 * Account
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'available_cash' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'include_in_net_worth' => 'bool',
        'money_market_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'enrollment_date' => 'string',
        'estimated_date' => 'string',
        'memo' => 'string',
        'guarantor' => 'string',
        'interest_paid_last_year' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'last_updated' => 'string',
        'balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'nscc_member_clearing_code' => 'string',
        'home_insurance_type' => 'string',
        'id' => 'int',
        'cash' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'total_credit_line' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'provider_name' => 'string',
        'valuation_type' => 'string',
        'margin_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'apr' => 'float',
        'available_credit' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'source_product_name' => 'string',
        'current_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'is_manual' => 'bool',
        'profile' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountProfile',
        'escrow_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'next_level' => 'string',
        'classification' => 'string',
        'loan_payoff_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'interest_rate_type' => 'string',
        'loan_pay_by_date' => 'string',
        'face_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'policy_from_date' => 'string',
        'source_loan_offset_enabled' => 'bool',
        'dtcc_member_clearing_code' => 'string',
        'premium_payment_term' => 'string',
        'policy_term' => 'string',
        'repayment_plan_type' => 'string',
        'aggregated_account_type' => 'string',
        'available_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_status' => 'string',
        'life_insurance_type' => 'string',
        'full_account_number' => 'string',
        'premium' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'aggregation_source' => 'string',
        'over_draft_limit' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'nickname' => 'string',
        'term' => 'string',
        'interest_rate' => 'float',
        'death_benefit' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'address' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress',
        'source_loan_repayment_type' => 'string',
        'cash_value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'holder' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHolder[]',
        '_401k_loan' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'home_value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_number' => 'string',
        'created_date' => 'string',
        'interest_paid_ytd' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'business_information' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessInformation',
        'max_redraw' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'provider_account_id' => 'int',
        'collateral' => 'string',
        'dataset' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountDataset[]',
        'running_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'source_id' => 'string',
        'due_date' => 'string',
        'frequency' => 'string',
        'source_account_ownership' => 'string',
        'maturity_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'associated_provider_account_id' => 'int[]',
        'is_asset' => 'bool',
        'principal_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'total_cash_limit' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'maturity_date' => 'string',
        'minimum_amount_due' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'annual_percentage_yield' => 'float',
        'account_type' => 'string',
        'origination_date' => 'string',
        'total_vested_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'reward_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\RewardBalance[]',
        'source_account_status' => 'string',
        'linked_account_ids' => 'int[]',
        'derived_apr' => 'float',
        'policy_effective_date' => 'string',
        'total_unvested_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'annuity_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_category' => 'string',
        'account_name' => 'string',
        'total_credit_limit' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'policy_status' => 'string',
        'short_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'lender' => 'string',
        'last_employee_contribution_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'provider_id' => 'string',
        'last_payment_date' => 'string',
        'primary_reward_unit' => 'string',
        'last_payment_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'remaining_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'user_classification' => 'string',
        'bank_transfer_code' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\BankTransferCode[]',
        'expiration_date' => 'string',
        'coverage' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Coverage[]',
        'cash_apr' => 'float',
        'auto_refresh' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AutoRefresh',
        'oauth_migration_status' => 'string',
        'displayed_name' => 'string',
        'full_account_number_list' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\FullAccountNumberList',
        'amount_due' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'current_level' => 'string',
        'original_loan_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'policy_to_date' => 'string',
        'loan_payoff_details' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\LoanPayoffDetails',
        'payment_profile' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\PaymentProfile',
        'container' => 'string',
        'is_owned_at_source' => 'bool',
        'last_employee_contribution_date' => 'string',
        'last_payment' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'recurring_payment' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'min_redraw' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'available_cash' => null,
        'include_in_net_worth' => null,
        'money_market_balance' => null,
        'enrollment_date' => null,
        'estimated_date' => null,
        'memo' => null,
        'guarantor' => null,
        'interest_paid_last_year' => null,
        'last_updated' => null,
        'balance' => null,
        'nscc_member_clearing_code' => null,
        'home_insurance_type' => null,
        'id' => 'int64',
        'cash' => null,
        'total_credit_line' => null,
        'provider_name' => null,
        'valuation_type' => null,
        'margin_balance' => null,
        'apr' => 'double',
        'available_credit' => null,
        'source_product_name' => null,
        'current_balance' => null,
        'is_manual' => null,
        'profile' => null,
        'escrow_balance' => null,
        'next_level' => null,
        'classification' => null,
        'loan_payoff_amount' => null,
        'interest_rate_type' => null,
        'loan_pay_by_date' => null,
        'face_amount' => null,
        'policy_from_date' => null,
        'source_loan_offset_enabled' => null,
        'dtcc_member_clearing_code' => null,
        'premium_payment_term' => null,
        'policy_term' => null,
        'repayment_plan_type' => null,
        'aggregated_account_type' => null,
        'available_balance' => null,
        'account_status' => null,
        'life_insurance_type' => null,
        'full_account_number' => null,
        'premium' => null,
        'aggregation_source' => null,
        'over_draft_limit' => null,
        'nickname' => null,
        'term' => null,
        'interest_rate' => 'double',
        'death_benefit' => null,
        'address' => null,
        'source_loan_repayment_type' => null,
        'cash_value' => null,
        'holder' => null,
        '_401k_loan' => null,
        'home_value' => null,
        'account_number' => null,
        'created_date' => null,
        'interest_paid_ytd' => null,
        'business_information' => null,
        'max_redraw' => null,
        'provider_account_id' => 'int64',
        'collateral' => null,
        'dataset' => null,
        'running_balance' => null,
        'source_id' => null,
        'due_date' => null,
        'frequency' => null,
        'source_account_ownership' => null,
        'maturity_amount' => null,
        'associated_provider_account_id' => 'int64',
        'is_asset' => null,
        'principal_balance' => null,
        'total_cash_limit' => null,
        'maturity_date' => null,
        'minimum_amount_due' => null,
        'annual_percentage_yield' => 'double',
        'account_type' => null,
        'origination_date' => null,
        'total_vested_balance' => null,
        'reward_balance' => null,
        'source_account_status' => null,
        'linked_account_ids' => 'int64',
        'derived_apr' => 'double',
        'policy_effective_date' => null,
        'total_unvested_balance' => null,
        'annuity_balance' => null,
        'account_category' => null,
        'account_name' => null,
        'total_credit_limit' => null,
        'policy_status' => null,
        'short_balance' => null,
        'lender' => null,
        'last_employee_contribution_amount' => null,
        'provider_id' => null,
        'last_payment_date' => null,
        'primary_reward_unit' => null,
        'last_payment_amount' => null,
        'remaining_balance' => null,
        'user_classification' => null,
        'bank_transfer_code' => null,
        'expiration_date' => null,
        'coverage' => null,
        'cash_apr' => 'double',
        'auto_refresh' => null,
        'oauth_migration_status' => null,
        'displayed_name' => null,
        'full_account_number_list' => null,
        'amount_due' => null,
        'current_level' => null,
        'original_loan_amount' => null,
        'policy_to_date' => null,
        'loan_payoff_details' => null,
        'payment_profile' => null,
        'container' => null,
        'is_owned_at_source' => null,
        'last_employee_contribution_date' => null,
        'last_payment' => null,
        'recurring_payment' => null,
        'min_redraw' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'available_cash' => false,
        'include_in_net_worth' => false,
        'money_market_balance' => false,
        'enrollment_date' => false,
        'estimated_date' => false,
        'memo' => false,
        'guarantor' => false,
        'interest_paid_last_year' => false,
        'last_updated' => false,
        'balance' => false,
        'nscc_member_clearing_code' => false,
        'home_insurance_type' => false,
        'id' => false,
        'cash' => false,
        'total_credit_line' => false,
        'provider_name' => false,
        'valuation_type' => false,
        'margin_balance' => false,
        'apr' => false,
        'available_credit' => false,
        'source_product_name' => false,
        'current_balance' => false,
        'is_manual' => false,
        'profile' => false,
        'escrow_balance' => false,
        'next_level' => false,
        'classification' => false,
        'loan_payoff_amount' => false,
        'interest_rate_type' => false,
        'loan_pay_by_date' => false,
        'face_amount' => false,
        'policy_from_date' => false,
        'source_loan_offset_enabled' => false,
        'dtcc_member_clearing_code' => false,
        'premium_payment_term' => false,
        'policy_term' => false,
        'repayment_plan_type' => false,
        'aggregated_account_type' => false,
        'available_balance' => false,
        'account_status' => false,
        'life_insurance_type' => false,
        'full_account_number' => false,
        'premium' => false,
        'aggregation_source' => false,
        'over_draft_limit' => false,
        'nickname' => false,
        'term' => false,
        'interest_rate' => false,
        'death_benefit' => false,
        'address' => false,
        'source_loan_repayment_type' => false,
        'cash_value' => false,
        'holder' => false,
        '_401k_loan' => false,
        'home_value' => false,
        'account_number' => false,
        'created_date' => false,
        'interest_paid_ytd' => false,
        'business_information' => false,
        'max_redraw' => false,
        'provider_account_id' => false,
        'collateral' => false,
        'dataset' => false,
        'running_balance' => false,
        'source_id' => false,
        'due_date' => false,
        'frequency' => false,
        'source_account_ownership' => false,
        'maturity_amount' => false,
        'associated_provider_account_id' => false,
        'is_asset' => false,
        'principal_balance' => false,
        'total_cash_limit' => false,
        'maturity_date' => false,
        'minimum_amount_due' => false,
        'annual_percentage_yield' => false,
        'account_type' => false,
        'origination_date' => false,
        'total_vested_balance' => false,
        'reward_balance' => false,
        'source_account_status' => false,
        'linked_account_ids' => false,
        'derived_apr' => false,
        'policy_effective_date' => false,
        'total_unvested_balance' => false,
        'annuity_balance' => false,
        'account_category' => false,
        'account_name' => false,
        'total_credit_limit' => false,
        'policy_status' => false,
        'short_balance' => false,
        'lender' => false,
        'last_employee_contribution_amount' => false,
        'provider_id' => false,
        'last_payment_date' => false,
        'primary_reward_unit' => false,
        'last_payment_amount' => false,
        'remaining_balance' => false,
        'user_classification' => false,
        'bank_transfer_code' => false,
        'expiration_date' => false,
        'coverage' => false,
        'cash_apr' => false,
        'auto_refresh' => false,
        'oauth_migration_status' => false,
        'displayed_name' => false,
        'full_account_number_list' => false,
        'amount_due' => false,
        'current_level' => false,
        'original_loan_amount' => false,
        'policy_to_date' => false,
        'loan_payoff_details' => false,
        'payment_profile' => false,
        'container' => false,
        'is_owned_at_source' => false,
        'last_employee_contribution_date' => false,
        'last_payment' => false,
        'recurring_payment' => false,
        'min_redraw' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_cash' => 'availableCash',
        'include_in_net_worth' => 'includeInNetWorth',
        'money_market_balance' => 'moneyMarketBalance',
        'enrollment_date' => 'enrollmentDate',
        'estimated_date' => 'estimatedDate',
        'memo' => 'memo',
        'guarantor' => 'guarantor',
        'interest_paid_last_year' => 'interestPaidLastYear',
        'last_updated' => 'lastUpdated',
        'balance' => 'balance',
        'nscc_member_clearing_code' => 'nsccMemberClearingCode',
        'home_insurance_type' => 'homeInsuranceType',
        'id' => 'id',
        'cash' => 'cash',
        'total_credit_line' => 'totalCreditLine',
        'provider_name' => 'providerName',
        'valuation_type' => 'valuationType',
        'margin_balance' => 'marginBalance',
        'apr' => 'apr',
        'available_credit' => 'availableCredit',
        'source_product_name' => 'sourceProductName',
        'current_balance' => 'currentBalance',
        'is_manual' => 'isManual',
        'profile' => 'profile',
        'escrow_balance' => 'escrowBalance',
        'next_level' => 'nextLevel',
        'classification' => 'classification',
        'loan_payoff_amount' => 'loanPayoffAmount',
        'interest_rate_type' => 'interestRateType',
        'loan_pay_by_date' => 'loanPayByDate',
        'face_amount' => 'faceAmount',
        'policy_from_date' => 'policyFromDate',
        'source_loan_offset_enabled' => 'sourceLoanOffsetEnabled',
        'dtcc_member_clearing_code' => 'dtccMemberClearingCode',
        'premium_payment_term' => 'premiumPaymentTerm',
        'policy_term' => 'policyTerm',
        'repayment_plan_type' => 'repaymentPlanType',
        'aggregated_account_type' => 'aggregatedAccountType',
        'available_balance' => 'availableBalance',
        'account_status' => 'accountStatus',
        'life_insurance_type' => 'lifeInsuranceType',
        'full_account_number' => 'fullAccountNumber',
        'premium' => 'premium',
        'aggregation_source' => 'aggregationSource',
        'over_draft_limit' => 'overDraftLimit',
        'nickname' => 'nickname',
        'term' => 'term',
        'interest_rate' => 'interestRate',
        'death_benefit' => 'deathBenefit',
        'address' => 'address',
        'source_loan_repayment_type' => 'sourceLoanRepaymentType',
        'cash_value' => 'cashValue',
        'holder' => 'holder',
        '_401k_loan' => '401kLoan',
        'home_value' => 'homeValue',
        'account_number' => 'accountNumber',
        'created_date' => 'createdDate',
        'interest_paid_ytd' => 'interestPaidYTD',
        'business_information' => 'businessInformation',
        'max_redraw' => 'maxRedraw',
        'provider_account_id' => 'providerAccountId',
        'collateral' => 'collateral',
        'dataset' => 'dataset',
        'running_balance' => 'runningBalance',
        'source_id' => 'sourceId',
        'due_date' => 'dueDate',
        'frequency' => 'frequency',
        'source_account_ownership' => 'sourceAccountOwnership',
        'maturity_amount' => 'maturityAmount',
        'associated_provider_account_id' => 'associatedProviderAccountId',
        'is_asset' => 'isAsset',
        'principal_balance' => 'principalBalance',
        'total_cash_limit' => 'totalCashLimit',
        'maturity_date' => 'maturityDate',
        'minimum_amount_due' => 'minimumAmountDue',
        'annual_percentage_yield' => 'annualPercentageYield',
        'account_type' => 'accountType',
        'origination_date' => 'originationDate',
        'total_vested_balance' => 'totalVestedBalance',
        'reward_balance' => 'rewardBalance',
        'source_account_status' => 'sourceAccountStatus',
        'linked_account_ids' => 'linkedAccountIds',
        'derived_apr' => 'derivedApr',
        'policy_effective_date' => 'policyEffectiveDate',
        'total_unvested_balance' => 'totalUnvestedBalance',
        'annuity_balance' => 'annuityBalance',
        'account_category' => 'accountCategory',
        'account_name' => 'accountName',
        'total_credit_limit' => 'totalCreditLimit',
        'policy_status' => 'policyStatus',
        'short_balance' => 'shortBalance',
        'lender' => 'lender',
        'last_employee_contribution_amount' => 'lastEmployeeContributionAmount',
        'provider_id' => 'providerId',
        'last_payment_date' => 'lastPaymentDate',
        'primary_reward_unit' => 'primaryRewardUnit',
        'last_payment_amount' => 'lastPaymentAmount',
        'remaining_balance' => 'remainingBalance',
        'user_classification' => 'userClassification',
        'bank_transfer_code' => 'bankTransferCode',
        'expiration_date' => 'expirationDate',
        'coverage' => 'coverage',
        'cash_apr' => 'cashApr',
        'auto_refresh' => 'autoRefresh',
        'oauth_migration_status' => 'oauthMigrationStatus',
        'displayed_name' => 'displayedName',
        'full_account_number_list' => 'fullAccountNumberList',
        'amount_due' => 'amountDue',
        'current_level' => 'currentLevel',
        'original_loan_amount' => 'originalLoanAmount',
        'policy_to_date' => 'policyToDate',
        'loan_payoff_details' => 'loanPayoffDetails',
        'payment_profile' => 'paymentProfile',
        'container' => 'CONTAINER',
        'is_owned_at_source' => 'isOwnedAtSource',
        'last_employee_contribution_date' => 'lastEmployeeContributionDate',
        'last_payment' => 'lastPayment',
        'recurring_payment' => 'recurringPayment',
        'min_redraw' => 'minRedraw'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_cash' => 'setAvailableCash',
        'include_in_net_worth' => 'setIncludeInNetWorth',
        'money_market_balance' => 'setMoneyMarketBalance',
        'enrollment_date' => 'setEnrollmentDate',
        'estimated_date' => 'setEstimatedDate',
        'memo' => 'setMemo',
        'guarantor' => 'setGuarantor',
        'interest_paid_last_year' => 'setInterestPaidLastYear',
        'last_updated' => 'setLastUpdated',
        'balance' => 'setBalance',
        'nscc_member_clearing_code' => 'setNsccMemberClearingCode',
        'home_insurance_type' => 'setHomeInsuranceType',
        'id' => 'setId',
        'cash' => 'setCash',
        'total_credit_line' => 'setTotalCreditLine',
        'provider_name' => 'setProviderName',
        'valuation_type' => 'setValuationType',
        'margin_balance' => 'setMarginBalance',
        'apr' => 'setApr',
        'available_credit' => 'setAvailableCredit',
        'source_product_name' => 'setSourceProductName',
        'current_balance' => 'setCurrentBalance',
        'is_manual' => 'setIsManual',
        'profile' => 'setProfile',
        'escrow_balance' => 'setEscrowBalance',
        'next_level' => 'setNextLevel',
        'classification' => 'setClassification',
        'loan_payoff_amount' => 'setLoanPayoffAmount',
        'interest_rate_type' => 'setInterestRateType',
        'loan_pay_by_date' => 'setLoanPayByDate',
        'face_amount' => 'setFaceAmount',
        'policy_from_date' => 'setPolicyFromDate',
        'source_loan_offset_enabled' => 'setSourceLoanOffsetEnabled',
        'dtcc_member_clearing_code' => 'setDtccMemberClearingCode',
        'premium_payment_term' => 'setPremiumPaymentTerm',
        'policy_term' => 'setPolicyTerm',
        'repayment_plan_type' => 'setRepaymentPlanType',
        'aggregated_account_type' => 'setAggregatedAccountType',
        'available_balance' => 'setAvailableBalance',
        'account_status' => 'setAccountStatus',
        'life_insurance_type' => 'setLifeInsuranceType',
        'full_account_number' => 'setFullAccountNumber',
        'premium' => 'setPremium',
        'aggregation_source' => 'setAggregationSource',
        'over_draft_limit' => 'setOverDraftLimit',
        'nickname' => 'setNickname',
        'term' => 'setTerm',
        'interest_rate' => 'setInterestRate',
        'death_benefit' => 'setDeathBenefit',
        'address' => 'setAddress',
        'source_loan_repayment_type' => 'setSourceLoanRepaymentType',
        'cash_value' => 'setCashValue',
        'holder' => 'setHolder',
        '_401k_loan' => 'set401kLoan',
        'home_value' => 'setHomeValue',
        'account_number' => 'setAccountNumber',
        'created_date' => 'setCreatedDate',
        'interest_paid_ytd' => 'setInterestPaidYtd',
        'business_information' => 'setBusinessInformation',
        'max_redraw' => 'setMaxRedraw',
        'provider_account_id' => 'setProviderAccountId',
        'collateral' => 'setCollateral',
        'dataset' => 'setDataset',
        'running_balance' => 'setRunningBalance',
        'source_id' => 'setSourceId',
        'due_date' => 'setDueDate',
        'frequency' => 'setFrequency',
        'source_account_ownership' => 'setSourceAccountOwnership',
        'maturity_amount' => 'setMaturityAmount',
        'associated_provider_account_id' => 'setAssociatedProviderAccountId',
        'is_asset' => 'setIsAsset',
        'principal_balance' => 'setPrincipalBalance',
        'total_cash_limit' => 'setTotalCashLimit',
        'maturity_date' => 'setMaturityDate',
        'minimum_amount_due' => 'setMinimumAmountDue',
        'annual_percentage_yield' => 'setAnnualPercentageYield',
        'account_type' => 'setAccountType',
        'origination_date' => 'setOriginationDate',
        'total_vested_balance' => 'setTotalVestedBalance',
        'reward_balance' => 'setRewardBalance',
        'source_account_status' => 'setSourceAccountStatus',
        'linked_account_ids' => 'setLinkedAccountIds',
        'derived_apr' => 'setDerivedApr',
        'policy_effective_date' => 'setPolicyEffectiveDate',
        'total_unvested_balance' => 'setTotalUnvestedBalance',
        'annuity_balance' => 'setAnnuityBalance',
        'account_category' => 'setAccountCategory',
        'account_name' => 'setAccountName',
        'total_credit_limit' => 'setTotalCreditLimit',
        'policy_status' => 'setPolicyStatus',
        'short_balance' => 'setShortBalance',
        'lender' => 'setLender',
        'last_employee_contribution_amount' => 'setLastEmployeeContributionAmount',
        'provider_id' => 'setProviderId',
        'last_payment_date' => 'setLastPaymentDate',
        'primary_reward_unit' => 'setPrimaryRewardUnit',
        'last_payment_amount' => 'setLastPaymentAmount',
        'remaining_balance' => 'setRemainingBalance',
        'user_classification' => 'setUserClassification',
        'bank_transfer_code' => 'setBankTransferCode',
        'expiration_date' => 'setExpirationDate',
        'coverage' => 'setCoverage',
        'cash_apr' => 'setCashApr',
        'auto_refresh' => 'setAutoRefresh',
        'oauth_migration_status' => 'setOauthMigrationStatus',
        'displayed_name' => 'setDisplayedName',
        'full_account_number_list' => 'setFullAccountNumberList',
        'amount_due' => 'setAmountDue',
        'current_level' => 'setCurrentLevel',
        'original_loan_amount' => 'setOriginalLoanAmount',
        'policy_to_date' => 'setPolicyToDate',
        'loan_payoff_details' => 'setLoanPayoffDetails',
        'payment_profile' => 'setPaymentProfile',
        'container' => 'setContainer',
        'is_owned_at_source' => 'setIsOwnedAtSource',
        'last_employee_contribution_date' => 'setLastEmployeeContributionDate',
        'last_payment' => 'setLastPayment',
        'recurring_payment' => 'setRecurringPayment',
        'min_redraw' => 'setMinRedraw'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_cash' => 'getAvailableCash',
        'include_in_net_worth' => 'getIncludeInNetWorth',
        'money_market_balance' => 'getMoneyMarketBalance',
        'enrollment_date' => 'getEnrollmentDate',
        'estimated_date' => 'getEstimatedDate',
        'memo' => 'getMemo',
        'guarantor' => 'getGuarantor',
        'interest_paid_last_year' => 'getInterestPaidLastYear',
        'last_updated' => 'getLastUpdated',
        'balance' => 'getBalance',
        'nscc_member_clearing_code' => 'getNsccMemberClearingCode',
        'home_insurance_type' => 'getHomeInsuranceType',
        'id' => 'getId',
        'cash' => 'getCash',
        'total_credit_line' => 'getTotalCreditLine',
        'provider_name' => 'getProviderName',
        'valuation_type' => 'getValuationType',
        'margin_balance' => 'getMarginBalance',
        'apr' => 'getApr',
        'available_credit' => 'getAvailableCredit',
        'source_product_name' => 'getSourceProductName',
        'current_balance' => 'getCurrentBalance',
        'is_manual' => 'getIsManual',
        'profile' => 'getProfile',
        'escrow_balance' => 'getEscrowBalance',
        'next_level' => 'getNextLevel',
        'classification' => 'getClassification',
        'loan_payoff_amount' => 'getLoanPayoffAmount',
        'interest_rate_type' => 'getInterestRateType',
        'loan_pay_by_date' => 'getLoanPayByDate',
        'face_amount' => 'getFaceAmount',
        'policy_from_date' => 'getPolicyFromDate',
        'source_loan_offset_enabled' => 'getSourceLoanOffsetEnabled',
        'dtcc_member_clearing_code' => 'getDtccMemberClearingCode',
        'premium_payment_term' => 'getPremiumPaymentTerm',
        'policy_term' => 'getPolicyTerm',
        'repayment_plan_type' => 'getRepaymentPlanType',
        'aggregated_account_type' => 'getAggregatedAccountType',
        'available_balance' => 'getAvailableBalance',
        'account_status' => 'getAccountStatus',
        'life_insurance_type' => 'getLifeInsuranceType',
        'full_account_number' => 'getFullAccountNumber',
        'premium' => 'getPremium',
        'aggregation_source' => 'getAggregationSource',
        'over_draft_limit' => 'getOverDraftLimit',
        'nickname' => 'getNickname',
        'term' => 'getTerm',
        'interest_rate' => 'getInterestRate',
        'death_benefit' => 'getDeathBenefit',
        'address' => 'getAddress',
        'source_loan_repayment_type' => 'getSourceLoanRepaymentType',
        'cash_value' => 'getCashValue',
        'holder' => 'getHolder',
        '_401k_loan' => 'get401kLoan',
        'home_value' => 'getHomeValue',
        'account_number' => 'getAccountNumber',
        'created_date' => 'getCreatedDate',
        'interest_paid_ytd' => 'getInterestPaidYtd',
        'business_information' => 'getBusinessInformation',
        'max_redraw' => 'getMaxRedraw',
        'provider_account_id' => 'getProviderAccountId',
        'collateral' => 'getCollateral',
        'dataset' => 'getDataset',
        'running_balance' => 'getRunningBalance',
        'source_id' => 'getSourceId',
        'due_date' => 'getDueDate',
        'frequency' => 'getFrequency',
        'source_account_ownership' => 'getSourceAccountOwnership',
        'maturity_amount' => 'getMaturityAmount',
        'associated_provider_account_id' => 'getAssociatedProviderAccountId',
        'is_asset' => 'getIsAsset',
        'principal_balance' => 'getPrincipalBalance',
        'total_cash_limit' => 'getTotalCashLimit',
        'maturity_date' => 'getMaturityDate',
        'minimum_amount_due' => 'getMinimumAmountDue',
        'annual_percentage_yield' => 'getAnnualPercentageYield',
        'account_type' => 'getAccountType',
        'origination_date' => 'getOriginationDate',
        'total_vested_balance' => 'getTotalVestedBalance',
        'reward_balance' => 'getRewardBalance',
        'source_account_status' => 'getSourceAccountStatus',
        'linked_account_ids' => 'getLinkedAccountIds',
        'derived_apr' => 'getDerivedApr',
        'policy_effective_date' => 'getPolicyEffectiveDate',
        'total_unvested_balance' => 'getTotalUnvestedBalance',
        'annuity_balance' => 'getAnnuityBalance',
        'account_category' => 'getAccountCategory',
        'account_name' => 'getAccountName',
        'total_credit_limit' => 'getTotalCreditLimit',
        'policy_status' => 'getPolicyStatus',
        'short_balance' => 'getShortBalance',
        'lender' => 'getLender',
        'last_employee_contribution_amount' => 'getLastEmployeeContributionAmount',
        'provider_id' => 'getProviderId',
        'last_payment_date' => 'getLastPaymentDate',
        'primary_reward_unit' => 'getPrimaryRewardUnit',
        'last_payment_amount' => 'getLastPaymentAmount',
        'remaining_balance' => 'getRemainingBalance',
        'user_classification' => 'getUserClassification',
        'bank_transfer_code' => 'getBankTransferCode',
        'expiration_date' => 'getExpirationDate',
        'coverage' => 'getCoverage',
        'cash_apr' => 'getCashApr',
        'auto_refresh' => 'getAutoRefresh',
        'oauth_migration_status' => 'getOauthMigrationStatus',
        'displayed_name' => 'getDisplayedName',
        'full_account_number_list' => 'getFullAccountNumberList',
        'amount_due' => 'getAmountDue',
        'current_level' => 'getCurrentLevel',
        'original_loan_amount' => 'getOriginalLoanAmount',
        'policy_to_date' => 'getPolicyToDate',
        'loan_payoff_details' => 'getLoanPayoffDetails',
        'payment_profile' => 'getPaymentProfile',
        'container' => 'getContainer',
        'is_owned_at_source' => 'getIsOwnedAtSource',
        'last_employee_contribution_date' => 'getLastEmployeeContributionDate',
        'last_payment' => 'getLastPayment',
        'recurring_payment' => 'getRecurringPayment',
        'min_redraw' => 'getMinRedraw'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HOME_INSURANCE_TYPE_HOME_OWNER = 'HOME_OWNER';
    public const HOME_INSURANCE_TYPE_RENTAL = 'RENTAL';
    public const HOME_INSURANCE_TYPE_RENTER = 'RENTER';
    public const HOME_INSURANCE_TYPE_UNKNOWN = 'UNKNOWN';
    public const HOME_INSURANCE_TYPE_OTHER = 'OTHER';
    public const VALUATION_TYPE_SYSTEM = 'SYSTEM';
    public const VALUATION_TYPE_MANUAL = 'MANUAL';
    public const CLASSIFICATION_OTHER = 'OTHER';
    public const CLASSIFICATION_PERSONAL = 'PERSONAL';
    public const CLASSIFICATION_CORPORATE = 'CORPORATE';
    public const CLASSIFICATION_SMALL_BUSINESS = 'SMALL_BUSINESS';
    public const CLASSIFICATION_TRUST = 'TRUST';
    public const CLASSIFICATION_ADD_ON_CARD = 'ADD_ON_CARD';
    public const CLASSIFICATION_VIRTUAL_CARD = 'VIRTUAL_CARD';
    public const INTEREST_RATE_TYPE_FIXED = 'FIXED';
    public const INTEREST_RATE_TYPE_VARIABLE = 'VARIABLE';
    public const INTEREST_RATE_TYPE_UNKNOWN = 'UNKNOWN';
    public const INTEREST_RATE_TYPE_OTHER = 'OTHER';
    public const REPAYMENT_PLAN_TYPE_STANDARD = 'STANDARD';
    public const REPAYMENT_PLAN_TYPE_GRADUATED = 'GRADUATED';
    public const REPAYMENT_PLAN_TYPE_EXTENDED = 'EXTENDED';
    public const REPAYMENT_PLAN_TYPE_INCOME_BASED = 'INCOME_BASED';
    public const REPAYMENT_PLAN_TYPE_INCOME_CONTINGENT = 'INCOME_CONTINGENT';
    public const REPAYMENT_PLAN_TYPE_INCOME_SENSITIVE = 'INCOME_SENSITIVE';
    public const REPAYMENT_PLAN_TYPE_PAY_AS_YOU_EARN = 'PAY_AS_YOU_EARN';
    public const REPAYMENT_PLAN_TYPE_REVISED_PAY_AS_YOU_EARN = 'REVISED_PAY_AS_YOU_EARN';
    public const ACCOUNT_STATUS_ACTIVE = 'ACTIVE';
    public const ACCOUNT_STATUS_INACTIVE = 'INACTIVE';
    public const ACCOUNT_STATUS_TO_BE_CLOSED = 'TO_BE_CLOSED';
    public const ACCOUNT_STATUS_CLOSED = 'CLOSED';
    public const ACCOUNT_STATUS_DELETED = 'DELETED';
    public const LIFE_INSURANCE_TYPE_OTHER = 'OTHER';
    public const LIFE_INSURANCE_TYPE_TERM_LIFE_INSURANCE = 'TERM_LIFE_INSURANCE';
    public const LIFE_INSURANCE_TYPE_UNIVERSAL_LIFE_INSURANCE = 'UNIVERSAL_LIFE_INSURANCE';
    public const LIFE_INSURANCE_TYPE_WHOLE_LIFE_INSURANCE = 'WHOLE_LIFE_INSURANCE';
    public const LIFE_INSURANCE_TYPE_VARIABLE_LIFE_INSURANCE = 'VARIABLE_LIFE_INSURANCE';
    public const LIFE_INSURANCE_TYPE_ULIP = 'ULIP';
    public const LIFE_INSURANCE_TYPE_ENDOWMENT = 'ENDOWMENT';
    public const AGGREGATION_SOURCE_SYSTEM = 'SYSTEM';
    public const AGGREGATION_SOURCE_USER = 'USER';
    public const FREQUENCY_DAILY = 'DAILY';
    public const FREQUENCY_ONE_TIME = 'ONE_TIME';
    public const FREQUENCY_WEEKLY = 'WEEKLY';
    public const FREQUENCY_EVERY_2_WEEKS = 'EVERY_2_WEEKS';
    public const FREQUENCY_SEMI_MONTHLY = 'SEMI_MONTHLY';
    public const FREQUENCY_MONTHLY = 'MONTHLY';
    public const FREQUENCY_QUARTERLY = 'QUARTERLY';
    public const FREQUENCY_SEMI_ANNUALLY = 'SEMI_ANNUALLY';
    public const FREQUENCY_ANNUALLY = 'ANNUALLY';
    public const FREQUENCY_EVERY_2_MONTHS = 'EVERY_2_MONTHS';
    public const FREQUENCY_EBILL = 'EBILL';
    public const FREQUENCY_FIRST_DAY_MONTHLY = 'FIRST_DAY_MONTHLY';
    public const FREQUENCY_LAST_DAY_MONTHLY = 'LAST_DAY_MONTHLY';
    public const FREQUENCY_EVERY_4_WEEKS = 'EVERY_4_WEEKS';
    public const FREQUENCY_UNKNOWN = 'UNKNOWN';
    public const FREQUENCY_OTHER = 'OTHER';
    public const SOURCE_ACCOUNT_STATUS_IN_REPAYMENT = 'IN_REPAYMENT';
    public const SOURCE_ACCOUNT_STATUS_DEFAULTED = 'DEFAULTED';
    public const SOURCE_ACCOUNT_STATUS_IN_SCHOOL = 'IN_SCHOOL';
    public const SOURCE_ACCOUNT_STATUS_IN_GRACE_PERIOD = 'IN_GRACE_PERIOD';
    public const SOURCE_ACCOUNT_STATUS_DELINQUENCY = 'DELINQUENCY';
    public const SOURCE_ACCOUNT_STATUS_DEFERMENT = 'DEFERMENT';
    public const SOURCE_ACCOUNT_STATUS_FORBEARANCE = 'FORBEARANCE';
    public const POLICY_STATUS_ACTIVE = 'ACTIVE';
    public const POLICY_STATUS_IN_ACTIVE = 'IN_ACTIVE';
    public const POLICY_STATUS_OTHER = 'OTHER';
    public const USER_CLASSIFICATION_BUSINESS = 'BUSINESS';
    public const USER_CLASSIFICATION_PERSONAL = 'PERSONAL';
    public const OAUTH_MIGRATION_STATUS_IN_PROGRESS = 'IN_PROGRESS';
    public const OAUTH_MIGRATION_STATUS_TO_BE_MIGRATED = 'TO_BE_MIGRATED';
    public const OAUTH_MIGRATION_STATUS_COMPLETED = 'COMPLETED';
    public const OAUTH_MIGRATION_STATUS_MIGRATED = 'MIGRATED';
    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_CREDIT_CARD = 'creditCard';
    public const CONTAINER_INVESTMENT = 'investment';
    public const CONTAINER_INSURANCE = 'insurance';
    public const CONTAINER_LOAN = 'loan';
    public const CONTAINER_REWARD = 'reward';
    public const CONTAINER_BILL = 'bill';
    public const CONTAINER_REAL_ESTATE = 'realEstate';
    public const CONTAINER_OTHER_ASSETS = 'otherAssets';
    public const CONTAINER_OTHER_LIABILITIES = 'otherLiabilities';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeInsuranceTypeAllowableValues()
    {
        return [
            self::HOME_INSURANCE_TYPE_HOME_OWNER,
            self::HOME_INSURANCE_TYPE_RENTAL,
            self::HOME_INSURANCE_TYPE_RENTER,
            self::HOME_INSURANCE_TYPE_UNKNOWN,
            self::HOME_INSURANCE_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValuationTypeAllowableValues()
    {
        return [
            self::VALUATION_TYPE_SYSTEM,
            self::VALUATION_TYPE_MANUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_OTHER,
            self::CLASSIFICATION_PERSONAL,
            self::CLASSIFICATION_CORPORATE,
            self::CLASSIFICATION_SMALL_BUSINESS,
            self::CLASSIFICATION_TRUST,
            self::CLASSIFICATION_ADD_ON_CARD,
            self::CLASSIFICATION_VIRTUAL_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestRateTypeAllowableValues()
    {
        return [
            self::INTEREST_RATE_TYPE_FIXED,
            self::INTEREST_RATE_TYPE_VARIABLE,
            self::INTEREST_RATE_TYPE_UNKNOWN,
            self::INTEREST_RATE_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepaymentPlanTypeAllowableValues()
    {
        return [
            self::REPAYMENT_PLAN_TYPE_STANDARD,
            self::REPAYMENT_PLAN_TYPE_GRADUATED,
            self::REPAYMENT_PLAN_TYPE_EXTENDED,
            self::REPAYMENT_PLAN_TYPE_INCOME_BASED,
            self::REPAYMENT_PLAN_TYPE_INCOME_CONTINGENT,
            self::REPAYMENT_PLAN_TYPE_INCOME_SENSITIVE,
            self::REPAYMENT_PLAN_TYPE_PAY_AS_YOU_EARN,
            self::REPAYMENT_PLAN_TYPE_REVISED_PAY_AS_YOU_EARN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_ACTIVE,
            self::ACCOUNT_STATUS_INACTIVE,
            self::ACCOUNT_STATUS_TO_BE_CLOSED,
            self::ACCOUNT_STATUS_CLOSED,
            self::ACCOUNT_STATUS_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLifeInsuranceTypeAllowableValues()
    {
        return [
            self::LIFE_INSURANCE_TYPE_OTHER,
            self::LIFE_INSURANCE_TYPE_TERM_LIFE_INSURANCE,
            self::LIFE_INSURANCE_TYPE_UNIVERSAL_LIFE_INSURANCE,
            self::LIFE_INSURANCE_TYPE_WHOLE_LIFE_INSURANCE,
            self::LIFE_INSURANCE_TYPE_VARIABLE_LIFE_INSURANCE,
            self::LIFE_INSURANCE_TYPE_ULIP,
            self::LIFE_INSURANCE_TYPE_ENDOWMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAggregationSourceAllowableValues()
    {
        return [
            self::AGGREGATION_SOURCE_SYSTEM,
            self::AGGREGATION_SOURCE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_DAILY,
            self::FREQUENCY_ONE_TIME,
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_EVERY_2_WEEKS,
            self::FREQUENCY_SEMI_MONTHLY,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_QUARTERLY,
            self::FREQUENCY_SEMI_ANNUALLY,
            self::FREQUENCY_ANNUALLY,
            self::FREQUENCY_EVERY_2_MONTHS,
            self::FREQUENCY_EBILL,
            self::FREQUENCY_FIRST_DAY_MONTHLY,
            self::FREQUENCY_LAST_DAY_MONTHLY,
            self::FREQUENCY_EVERY_4_WEEKS,
            self::FREQUENCY_UNKNOWN,
            self::FREQUENCY_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAccountStatusAllowableValues()
    {
        return [
            self::SOURCE_ACCOUNT_STATUS_IN_REPAYMENT,
            self::SOURCE_ACCOUNT_STATUS_DEFAULTED,
            self::SOURCE_ACCOUNT_STATUS_IN_SCHOOL,
            self::SOURCE_ACCOUNT_STATUS_IN_GRACE_PERIOD,
            self::SOURCE_ACCOUNT_STATUS_DELINQUENCY,
            self::SOURCE_ACCOUNT_STATUS_DEFERMENT,
            self::SOURCE_ACCOUNT_STATUS_FORBEARANCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyStatusAllowableValues()
    {
        return [
            self::POLICY_STATUS_ACTIVE,
            self::POLICY_STATUS_IN_ACTIVE,
            self::POLICY_STATUS_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserClassificationAllowableValues()
    {
        return [
            self::USER_CLASSIFICATION_BUSINESS,
            self::USER_CLASSIFICATION_PERSONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOauthMigrationStatusAllowableValues()
    {
        return [
            self::OAUTH_MIGRATION_STATUS_IN_PROGRESS,
            self::OAUTH_MIGRATION_STATUS_TO_BE_MIGRATED,
            self::OAUTH_MIGRATION_STATUS_COMPLETED,
            self::OAUTH_MIGRATION_STATUS_MIGRATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_CREDIT_CARD,
            self::CONTAINER_INVESTMENT,
            self::CONTAINER_INSURANCE,
            self::CONTAINER_LOAN,
            self::CONTAINER_REWARD,
            self::CONTAINER_BILL,
            self::CONTAINER_REAL_ESTATE,
            self::CONTAINER_OTHER_ASSETS,
            self::CONTAINER_OTHER_LIABILITIES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('available_cash', $data ?? [], null);
        $this->setIfExists('include_in_net_worth', $data ?? [], null);
        $this->setIfExists('money_market_balance', $data ?? [], null);
        $this->setIfExists('enrollment_date', $data ?? [], null);
        $this->setIfExists('estimated_date', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('guarantor', $data ?? [], null);
        $this->setIfExists('interest_paid_last_year', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('nscc_member_clearing_code', $data ?? [], null);
        $this->setIfExists('home_insurance_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('cash', $data ?? [], null);
        $this->setIfExists('total_credit_line', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('valuation_type', $data ?? [], null);
        $this->setIfExists('margin_balance', $data ?? [], null);
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('available_credit', $data ?? [], null);
        $this->setIfExists('source_product_name', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('is_manual', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('escrow_balance', $data ?? [], null);
        $this->setIfExists('next_level', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('loan_payoff_amount', $data ?? [], null);
        $this->setIfExists('interest_rate_type', $data ?? [], null);
        $this->setIfExists('loan_pay_by_date', $data ?? [], null);
        $this->setIfExists('face_amount', $data ?? [], null);
        $this->setIfExists('policy_from_date', $data ?? [], null);
        $this->setIfExists('source_loan_offset_enabled', $data ?? [], null);
        $this->setIfExists('dtcc_member_clearing_code', $data ?? [], null);
        $this->setIfExists('premium_payment_term', $data ?? [], null);
        $this->setIfExists('policy_term', $data ?? [], null);
        $this->setIfExists('repayment_plan_type', $data ?? [], null);
        $this->setIfExists('aggregated_account_type', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('account_status', $data ?? [], null);
        $this->setIfExists('life_insurance_type', $data ?? [], null);
        $this->setIfExists('full_account_number', $data ?? [], null);
        $this->setIfExists('premium', $data ?? [], null);
        $this->setIfExists('aggregation_source', $data ?? [], null);
        $this->setIfExists('over_draft_limit', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('term', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('death_benefit', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('source_loan_repayment_type', $data ?? [], null);
        $this->setIfExists('cash_value', $data ?? [], null);
        $this->setIfExists('holder', $data ?? [], null);
        $this->setIfExists('_401k_loan', $data ?? [], null);
        $this->setIfExists('home_value', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('interest_paid_ytd', $data ?? [], null);
        $this->setIfExists('business_information', $data ?? [], null);
        $this->setIfExists('max_redraw', $data ?? [], null);
        $this->setIfExists('provider_account_id', $data ?? [], null);
        $this->setIfExists('collateral', $data ?? [], null);
        $this->setIfExists('dataset', $data ?? [], null);
        $this->setIfExists('running_balance', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('source_account_ownership', $data ?? [], null);
        $this->setIfExists('maturity_amount', $data ?? [], null);
        $this->setIfExists('associated_provider_account_id', $data ?? [], null);
        $this->setIfExists('is_asset', $data ?? [], null);
        $this->setIfExists('principal_balance', $data ?? [], null);
        $this->setIfExists('total_cash_limit', $data ?? [], null);
        $this->setIfExists('maturity_date', $data ?? [], null);
        $this->setIfExists('minimum_amount_due', $data ?? [], null);
        $this->setIfExists('annual_percentage_yield', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('origination_date', $data ?? [], null);
        $this->setIfExists('total_vested_balance', $data ?? [], null);
        $this->setIfExists('reward_balance', $data ?? [], null);
        $this->setIfExists('source_account_status', $data ?? [], null);
        $this->setIfExists('linked_account_ids', $data ?? [], null);
        $this->setIfExists('derived_apr', $data ?? [], null);
        $this->setIfExists('policy_effective_date', $data ?? [], null);
        $this->setIfExists('total_unvested_balance', $data ?? [], null);
        $this->setIfExists('annuity_balance', $data ?? [], null);
        $this->setIfExists('account_category', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('total_credit_limit', $data ?? [], null);
        $this->setIfExists('policy_status', $data ?? [], null);
        $this->setIfExists('short_balance', $data ?? [], null);
        $this->setIfExists('lender', $data ?? [], null);
        $this->setIfExists('last_employee_contribution_amount', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('last_payment_date', $data ?? [], null);
        $this->setIfExists('primary_reward_unit', $data ?? [], null);
        $this->setIfExists('last_payment_amount', $data ?? [], null);
        $this->setIfExists('remaining_balance', $data ?? [], null);
        $this->setIfExists('user_classification', $data ?? [], null);
        $this->setIfExists('bank_transfer_code', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('coverage', $data ?? [], null);
        $this->setIfExists('cash_apr', $data ?? [], null);
        $this->setIfExists('auto_refresh', $data ?? [], null);
        $this->setIfExists('oauth_migration_status', $data ?? [], null);
        $this->setIfExists('displayed_name', $data ?? [], null);
        $this->setIfExists('full_account_number_list', $data ?? [], null);
        $this->setIfExists('amount_due', $data ?? [], null);
        $this->setIfExists('current_level', $data ?? [], null);
        $this->setIfExists('original_loan_amount', $data ?? [], null);
        $this->setIfExists('policy_to_date', $data ?? [], null);
        $this->setIfExists('loan_payoff_details', $data ?? [], null);
        $this->setIfExists('payment_profile', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('is_owned_at_source', $data ?? [], null);
        $this->setIfExists('last_employee_contribution_date', $data ?? [], null);
        $this->setIfExists('last_payment', $data ?? [], null);
        $this->setIfExists('recurring_payment', $data ?? [], null);
        $this->setIfExists('min_redraw', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHomeInsuranceTypeAllowableValues();
        if (!is_null($this->container['home_insurance_type']) && !in_array($this->container['home_insurance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'home_insurance_type', must be one of '%s'",
                $this->container['home_insurance_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValuationTypeAllowableValues();
        if (!is_null($this->container['valuation_type']) && !in_array($this->container['valuation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'valuation_type', must be one of '%s'",
                $this->container['valuation_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($this->container['classification']) && !in_array($this->container['classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'classification', must be one of '%s'",
                $this->container['classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterestRateTypeAllowableValues();
        if (!is_null($this->container['interest_rate_type']) && !in_array($this->container['interest_rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interest_rate_type', must be one of '%s'",
                $this->container['interest_rate_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRepaymentPlanTypeAllowableValues();
        if (!is_null($this->container['repayment_plan_type']) && !in_array($this->container['repayment_plan_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'repayment_plan_type', must be one of '%s'",
                $this->container['repayment_plan_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['account_status']) && !in_array($this->container['account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_status', must be one of '%s'",
                $this->container['account_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLifeInsuranceTypeAllowableValues();
        if (!is_null($this->container['life_insurance_type']) && !in_array($this->container['life_insurance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'life_insurance_type', must be one of '%s'",
                $this->container['life_insurance_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAggregationSourceAllowableValues();
        if (!is_null($this->container['aggregation_source']) && !in_array($this->container['aggregation_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aggregation_source', must be one of '%s'",
                $this->container['aggregation_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'frequency', must be one of '%s'",
                $this->container['frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAccountStatusAllowableValues();
        if (!is_null($this->container['source_account_status']) && !in_array($this->container['source_account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_account_status', must be one of '%s'",
                $this->container['source_account_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPolicyStatusAllowableValues();
        if (!is_null($this->container['policy_status']) && !in_array($this->container['policy_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'policy_status', must be one of '%s'",
                $this->container['policy_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserClassificationAllowableValues();
        if (!is_null($this->container['user_classification']) && !in_array($this->container['user_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_classification', must be one of '%s'",
                $this->container['user_classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOauthMigrationStatusAllowableValues();
        if (!is_null($this->container['oauth_migration_status']) && !in_array($this->container['oauth_migration_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'oauth_migration_status', must be one of '%s'",
                $this->container['oauth_migration_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContainerAllowableValues();
        if (!is_null($this->container['container']) && !in_array($this->container['container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container', must be one of '%s'",
                $this->container['container'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available_cash
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAvailableCash()
    {
        return $this->container['available_cash'];
    }

    /**
     * Sets available_cash
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $available_cash available_cash
     *
     * @return self
     */
    public function setAvailableCash($available_cash)
    {
        if (is_null($available_cash)) {
            throw new \InvalidArgumentException('non-nullable available_cash cannot be null');
        }
        $this->container['available_cash'] = $available_cash;

        return $this;
    }

    /**
     * Gets include_in_net_worth
     *
     * @return bool|null
     */
    public function getIncludeInNetWorth()
    {
        return $this->container['include_in_net_worth'];
    }

    /**
     * Sets include_in_net_worth
     *
     * @param bool|null $include_in_net_worth Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setIncludeInNetWorth($include_in_net_worth)
    {
        if (is_null($include_in_net_worth)) {
            throw new \InvalidArgumentException('non-nullable include_in_net_worth cannot be null');
        }
        $this->container['include_in_net_worth'] = $include_in_net_worth;

        return $this;
    }

    /**
     * Gets money_market_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMoneyMarketBalance()
    {
        return $this->container['money_market_balance'];
    }

    /**
     * Sets money_market_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $money_market_balance money_market_balance
     *
     * @return self
     */
    public function setMoneyMarketBalance($money_market_balance)
    {
        if (is_null($money_market_balance)) {
            throw new \InvalidArgumentException('non-nullable money_market_balance cannot be null');
        }
        $this->container['money_market_balance'] = $money_market_balance;

        return $this;
    }

    /**
     * Gets enrollment_date
     *
     * @return string|null
     */
    public function getEnrollmentDate()
    {
        return $this->container['enrollment_date'];
    }

    /**
     * Sets enrollment_date
     *
     * @param string|null $enrollment_date Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setEnrollmentDate($enrollment_date)
    {
        if (is_null($enrollment_date)) {
            throw new \InvalidArgumentException('non-nullable enrollment_date cannot be null');
        }
        $this->container['enrollment_date'] = $enrollment_date;

        return $this;
    }

    /**
     * Gets estimated_date
     *
     * @return string|null
     */
    public function getEstimatedDate()
    {
        return $this->container['estimated_date'];
    }

    /**
     * Sets estimated_date
     *
     * @param string|null $estimated_date The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setEstimatedDate($estimated_date)
    {
        if (is_null($estimated_date)) {
            throw new \InvalidArgumentException('non-nullable estimated_date cannot be null');
        }
        $this->container['estimated_date'] = $estimated_date;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets guarantor
     *
     * @return string|null
     */
    public function getGuarantor()
    {
        return $this->container['guarantor'];
    }

    /**
     * Sets guarantor
     *
     * @param string|null $guarantor A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setGuarantor($guarantor)
    {
        if (is_null($guarantor)) {
            throw new \InvalidArgumentException('non-nullable guarantor cannot be null');
        }
        $this->container['guarantor'] = $guarantor;

        return $this;
    }

    /**
     * Gets interest_paid_last_year
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getInterestPaidLastYear()
    {
        return $this->container['interest_paid_last_year'];
    }

    /**
     * Sets interest_paid_last_year
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $interest_paid_last_year interest_paid_last_year
     *
     * @return self
     */
    public function setInterestPaidLastYear($interest_paid_last_year)
    {
        if (is_null($interest_paid_last_year)) {
            throw new \InvalidArgumentException('non-nullable interest_paid_last_year cannot be null');
        }
        $this->container['interest_paid_last_year'] = $interest_paid_last_year;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets nscc_member_clearing_code
     *
     * @return string|null
     */
    public function getNsccMemberClearingCode()
    {
        return $this->container['nscc_member_clearing_code'];
    }

    /**
     * Sets nscc_member_clearing_code
     *
     * @param string|null $nscc_member_clearing_code Used in the mutual fund industry as a standard method of identifying funds, firms, and other intermediaries such as third-party administrators and recordkeepers.<br>This attribute will only populate when account is aggregated through ATV flow.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: Investment container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setNsccMemberClearingCode($nscc_member_clearing_code)
    {
        if (is_null($nscc_member_clearing_code)) {
            throw new \InvalidArgumentException('non-nullable nscc_member_clearing_code cannot be null');
        }
        $this->container['nscc_member_clearing_code'] = $nscc_member_clearing_code;

        return $this;
    }

    /**
     * Gets home_insurance_type
     *
     * @return string|null
     */
    public function getHomeInsuranceType()
    {
        return $this->container['home_insurance_type'];
    }

    /**
     * Sets home_insurance_type
     *
     * @param string|null $home_insurance_type Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setHomeInsuranceType($home_insurance_type)
    {
        if (is_null($home_insurance_type)) {
            throw new \InvalidArgumentException('non-nullable home_insurance_type cannot be null');
        }
        $allowedValues = $this->getHomeInsuranceTypeAllowableValues();
        if (!in_array($home_insurance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'home_insurance_type', must be one of '%s'",
                    $home_insurance_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['home_insurance_type'] = $home_insurance_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cash
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getCash()
    {
        return $this->container['cash'];
    }

    /**
     * Sets cash
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $cash cash
     *
     * @return self
     */
    public function setCash($cash)
    {
        if (is_null($cash)) {
            throw new \InvalidArgumentException('non-nullable cash cannot be null');
        }
        $this->container['cash'] = $cash;

        return $this;
    }

    /**
     * Gets total_credit_line
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getTotalCreditLine()
    {
        return $this->container['total_credit_line'];
    }

    /**
     * Sets total_credit_line
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $total_credit_line total_credit_line
     *
     * @return self
     */
    public function setTotalCreditLine($total_credit_line)
    {
        if (is_null($total_credit_line)) {
            throw new \InvalidArgumentException('non-nullable total_credit_line cannot be null');
        }
        $this->container['total_credit_line'] = $total_credit_line;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets valuation_type
     *
     * @return string|null
     */
    public function getValuationType()
    {
        return $this->container['valuation_type'];
    }

    /**
     * Sets valuation_type
     *
     * @param string|null $valuation_type The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setValuationType($valuation_type)
    {
        if (is_null($valuation_type)) {
            throw new \InvalidArgumentException('non-nullable valuation_type cannot be null');
        }
        $allowedValues = $this->getValuationTypeAllowableValues();
        if (!in_array($valuation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'valuation_type', must be one of '%s'",
                    $valuation_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['valuation_type'] = $valuation_type;

        return $this;
    }

    /**
     * Gets margin_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMarginBalance()
    {
        return $this->container['margin_balance'];
    }

    /**
     * Sets margin_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $margin_balance margin_balance
     *
     * @return self
     */
    public function setMarginBalance($margin_balance)
    {
        if (is_null($margin_balance)) {
            throw new \InvalidArgumentException('non-nullable margin_balance cannot be null');
        }
        $this->container['margin_balance'] = $margin_balance;

        return $this;
    }

    /**
     * Gets apr
     *
     * @return float|null
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr
     *
     * @param float|null $apr The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            throw new \InvalidArgumentException('non-nullable apr cannot be null');
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets available_credit
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $available_credit available_credit
     *
     * @return self
     */
    public function setAvailableCredit($available_credit)
    {
        if (is_null($available_credit)) {
            throw new \InvalidArgumentException('non-nullable available_credit cannot be null');
        }
        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets source_product_name
     *
     * @return string|null
     */
    public function getSourceProductName()
    {
        return $this->container['source_product_name'];
    }

    /**
     * Sets source_product_name
     *
     * @param string|null $source_product_name sourceProductName: The account unique identifier belonging to which product name/provider account model name. (Example - Westpac Choice, CBA Smart Access.). This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: Bank,Card,Loan container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setSourceProductName($source_product_name)
    {
        if (is_null($source_product_name)) {
            throw new \InvalidArgumentException('non-nullable source_product_name cannot be null');
        }
        $this->container['source_product_name'] = $source_product_name;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $current_balance current_balance
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        if (is_null($is_manual)) {
            throw new \InvalidArgumentException('non-nullable is_manual cannot be null');
        }
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountProfile|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountProfile|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets escrow_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getEscrowBalance()
    {
        return $this->container['escrow_balance'];
    }

    /**
     * Sets escrow_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $escrow_balance escrow_balance
     *
     * @return self
     */
    public function setEscrowBalance($escrow_balance)
    {
        if (is_null($escrow_balance)) {
            throw new \InvalidArgumentException('non-nullable escrow_balance cannot be null');
        }
        $this->container['escrow_balance'] = $escrow_balance;

        return $this;
    }

    /**
     * Gets next_level
     *
     * @return string|null
     */
    public function getNextLevel()
    {
        return $this->container['next_level'];
    }

    /**
     * Sets next_level
     *
     * @param string|null $next_level The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setNextLevel($next_level)
    {
        if (is_null($next_level)) {
            throw new \InvalidArgumentException('non-nullable next_level cannot be null');
        }
        $this->container['next_level'] = $next_level;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $allowedValues = $this->getClassificationAllowableValues();
        if (!in_array($classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'classification', must be one of '%s'",
                    $classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets loan_payoff_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLoanPayoffAmount()
    {
        return $this->container['loan_payoff_amount'];
    }

    /**
     * Sets loan_payoff_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $loan_payoff_amount loan_payoff_amount
     *
     * @return self
     */
    public function setLoanPayoffAmount($loan_payoff_amount)
    {
        if (is_null($loan_payoff_amount)) {
            throw new \InvalidArgumentException('non-nullable loan_payoff_amount cannot be null');
        }
        $this->container['loan_payoff_amount'] = $loan_payoff_amount;

        return $this;
    }

    /**
     * Gets interest_rate_type
     *
     * @return string|null
     */
    public function getInterestRateType()
    {
        return $this->container['interest_rate_type'];
    }

    /**
     * Sets interest_rate_type
     *
     * @param string|null $interest_rate_type The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setInterestRateType($interest_rate_type)
    {
        if (is_null($interest_rate_type)) {
            throw new \InvalidArgumentException('non-nullable interest_rate_type cannot be null');
        }
        $allowedValues = $this->getInterestRateTypeAllowableValues();
        if (!in_array($interest_rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interest_rate_type', must be one of '%s'",
                    $interest_rate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interest_rate_type'] = $interest_rate_type;

        return $this;
    }

    /**
     * Gets loan_pay_by_date
     *
     * @return string|null
     */
    public function getLoanPayByDate()
    {
        return $this->container['loan_pay_by_date'];
    }

    /**
     * Sets loan_pay_by_date
     *
     * @param string|null $loan_pay_by_date The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLoanPayByDate($loan_pay_by_date)
    {
        if (is_null($loan_pay_by_date)) {
            throw new \InvalidArgumentException('non-nullable loan_pay_by_date cannot be null');
        }
        $this->container['loan_pay_by_date'] = $loan_pay_by_date;

        return $this;
    }

    /**
     * Gets face_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getFaceAmount()
    {
        return $this->container['face_amount'];
    }

    /**
     * Sets face_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $face_amount face_amount
     *
     * @return self
     */
    public function setFaceAmount($face_amount)
    {
        if (is_null($face_amount)) {
            throw new \InvalidArgumentException('non-nullable face_amount cannot be null');
        }
        $this->container['face_amount'] = $face_amount;

        return $this;
    }

    /**
     * Gets policy_from_date
     *
     * @return string|null
     */
    public function getPolicyFromDate()
    {
        return $this->container['policy_from_date'];
    }

    /**
     * Sets policy_from_date
     *
     * @param string|null $policy_from_date The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPolicyFromDate($policy_from_date)
    {
        if (is_null($policy_from_date)) {
            throw new \InvalidArgumentException('non-nullable policy_from_date cannot be null');
        }
        $this->container['policy_from_date'] = $policy_from_date;

        return $this;
    }

    /**
     * Gets source_loan_offset_enabled
     *
     * @return bool|null
     */
    public function getSourceLoanOffsetEnabled()
    {
        return $this->container['source_loan_offset_enabled'];
    }

    /**
     * Sets source_loan_offset_enabled
     *
     * @param bool|null $source_loan_offset_enabled Set to true if one or more offset accounts are configured for this loan account.This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: Loan container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setSourceLoanOffsetEnabled($source_loan_offset_enabled)
    {
        if (is_null($source_loan_offset_enabled)) {
            throw new \InvalidArgumentException('non-nullable source_loan_offset_enabled cannot be null');
        }
        $this->container['source_loan_offset_enabled'] = $source_loan_offset_enabled;

        return $this;
    }

    /**
     * Gets dtcc_member_clearing_code
     *
     * @return string|null
     */
    public function getDtccMemberClearingCode()
    {
        return $this->container['dtcc_member_clearing_code'];
    }

    /**
     * Sets dtcc_member_clearing_code
     *
     * @param string|null $dtcc_member_clearing_code Helps facilitate transactions between financial institutions.<br>This attribute will only populate when account is aggregated through ATV flow.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: Investment container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setDtccMemberClearingCode($dtcc_member_clearing_code)
    {
        if (is_null($dtcc_member_clearing_code)) {
            throw new \InvalidArgumentException('non-nullable dtcc_member_clearing_code cannot be null');
        }
        $this->container['dtcc_member_clearing_code'] = $dtcc_member_clearing_code;

        return $this;
    }

    /**
     * Gets premium_payment_term
     *
     * @return string|null
     */
    public function getPremiumPaymentTerm()
    {
        return $this->container['premium_payment_term'];
    }

    /**
     * Sets premium_payment_term
     *
     * @param string|null $premium_payment_term The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPremiumPaymentTerm($premium_payment_term)
    {
        if (is_null($premium_payment_term)) {
            throw new \InvalidArgumentException('non-nullable premium_payment_term cannot be null');
        }
        $this->container['premium_payment_term'] = $premium_payment_term;

        return $this;
    }

    /**
     * Gets policy_term
     *
     * @return string|null
     */
    public function getPolicyTerm()
    {
        return $this->container['policy_term'];
    }

    /**
     * Sets policy_term
     *
     * @param string|null $policy_term The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPolicyTerm($policy_term)
    {
        if (is_null($policy_term)) {
            throw new \InvalidArgumentException('non-nullable policy_term cannot be null');
        }
        $this->container['policy_term'] = $policy_term;

        return $this;
    }

    /**
     * Gets repayment_plan_type
     *
     * @return string|null
     */
    public function getRepaymentPlanType()
    {
        return $this->container['repayment_plan_type'];
    }

    /**
     * Sets repayment_plan_type
     *
     * @param string|null $repayment_plan_type The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
     *
     * @return self
     */
    public function setRepaymentPlanType($repayment_plan_type)
    {
        if (is_null($repayment_plan_type)) {
            throw new \InvalidArgumentException('non-nullable repayment_plan_type cannot be null');
        }
        $allowedValues = $this->getRepaymentPlanTypeAllowableValues();
        if (!in_array($repayment_plan_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'repayment_plan_type', must be one of '%s'",
                    $repayment_plan_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repayment_plan_type'] = $repayment_plan_type;

        return $this;
    }

    /**
     * Gets aggregated_account_type
     *
     * @return string|null
     */
    public function getAggregatedAccountType()
    {
        return $this->container['aggregated_account_type'];
    }

    /**
     * Sets aggregated_account_type
     *
     * @param string|null $aggregated_account_type The type of account that is aggregated.
     *
     * @return self
     */
    public function setAggregatedAccountType($aggregated_account_type)
    {
        if (is_null($aggregated_account_type)) {
            throw new \InvalidArgumentException('non-nullable aggregated_account_type cannot be null');
        }
        $this->container['aggregated_account_type'] = $aggregated_account_type;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string|null
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string|null $account_status The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setAccountStatus($account_status)
    {
        if (is_null($account_status)) {
            throw new \InvalidArgumentException('non-nullable account_status cannot be null');
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!in_array($account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_status', must be one of '%s'",
                    $account_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets life_insurance_type
     *
     * @return string|null
     */
    public function getLifeInsuranceType()
    {
        return $this->container['life_insurance_type'];
    }

    /**
     * Sets life_insurance_type
     *
     * @param string|null $life_insurance_type Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setLifeInsuranceType($life_insurance_type)
    {
        if (is_null($life_insurance_type)) {
            throw new \InvalidArgumentException('non-nullable life_insurance_type cannot be null');
        }
        $allowedValues = $this->getLifeInsuranceTypeAllowableValues();
        if (!in_array($life_insurance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'life_insurance_type', must be one of '%s'",
                    $life_insurance_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['life_insurance_type'] = $life_insurance_type;

        return $this;
    }

    /**
     * Gets full_account_number
     *
     * @return string|null
     */
    public function getFullAccountNumber()
    {
        return $this->container['full_account_number'];
    }

    /**
     * Sets full_account_number
     *
     * @param string|null $full_account_number Full account number of the account that is included only when include = fullAccountNumber is provided in the request. For student loan account the account number that will be used for ACH or fund transfer<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward, otherAssets, otherLiabilities <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><b> Note : </b> fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</ul>
     *
     * @return self
     */
    public function setFullAccountNumber($full_account_number)
    {
        if (is_null($full_account_number)) {
            throw new \InvalidArgumentException('non-nullable full_account_number cannot be null');
        }
        $this->container['full_account_number'] = $full_account_number;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $premium premium
     *
     * @return self
     */
    public function setPremium($premium)
    {
        if (is_null($premium)) {
            throw new \InvalidArgumentException('non-nullable premium cannot be null');
        }
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets aggregation_source
     *
     * @return string|null
     */
    public function getAggregationSource()
    {
        return $this->container['aggregation_source'];
    }

    /**
     * Sets aggregation_source
     *
     * @param string|null $aggregation_source The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setAggregationSource($aggregation_source)
    {
        if (is_null($aggregation_source)) {
            throw new \InvalidArgumentException('non-nullable aggregation_source cannot be null');
        }
        $allowedValues = $this->getAggregationSourceAllowableValues();
        if (!in_array($aggregation_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aggregation_source', must be one of '%s'",
                    $aggregation_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aggregation_source'] = $aggregation_source;

        return $this;
    }

    /**
     * Gets over_draft_limit
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getOverDraftLimit()
    {
        return $this->container['over_draft_limit'];
    }

    /**
     * Sets over_draft_limit
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $over_draft_limit over_draft_limit
     *
     * @return self
     */
    public function setOverDraftLimit($over_draft_limit)
    {
        if (is_null($over_draft_limit)) {
            throw new \InvalidArgumentException('non-nullable over_draft_limit cannot be null');
        }
        $this->container['over_draft_limit'] = $over_draft_limit;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string|null
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string|null $term The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setTerm($term)
    {
        if (is_null($term)) {
            throw new \InvalidArgumentException('non-nullable term cannot be null');
        }
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets death_benefit
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getDeathBenefit()
    {
        return $this->container['death_benefit'];
    }

    /**
     * Sets death_benefit
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $death_benefit death_benefit
     *
     * @return self
     */
    public function setDeathBenefit($death_benefit)
    {
        if (is_null($death_benefit)) {
            throw new \InvalidArgumentException('non-nullable death_benefit cannot be null');
        }
        $this->container['death_benefit'] = $death_benefit;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets source_loan_repayment_type
     *
     * @return string|null
     */
    public function getSourceLoanRepaymentType()
    {
        return $this->container['source_loan_repayment_type'];
    }

    /**
     * Sets source_loan_repayment_type
     *
     * @param string|null $source_loan_repayment_type Options in place for repayments. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: Loan container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setSourceLoanRepaymentType($source_loan_repayment_type)
    {
        if (is_null($source_loan_repayment_type)) {
            throw new \InvalidArgumentException('non-nullable source_loan_repayment_type cannot be null');
        }
        $this->container['source_loan_repayment_type'] = $source_loan_repayment_type;

        return $this;
    }

    /**
     * Gets cash_value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getCashValue()
    {
        return $this->container['cash_value'];
    }

    /**
     * Sets cash_value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $cash_value cash_value
     *
     * @return self
     */
    public function setCashValue($cash_value)
    {
        if (is_null($cash_value)) {
            throw new \InvalidArgumentException('non-nullable cash_value cannot be null');
        }
        $this->container['cash_value'] = $cash_value;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHolder[]|null
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountHolder[]|null $holder Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
     *
     * @return self
     */
    public function setHolder($holder)
    {
        if (is_null($holder)) {
            throw new \InvalidArgumentException('non-nullable holder cannot be null');
        }
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets _401k_loan
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function get401kLoan()
    {
        return $this->container['_401k_loan'];
    }

    /**
     * Sets _401k_loan
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $_401k_loan _401k_loan
     *
     * @return self
     */
    public function set401kLoan($_401k_loan)
    {
        if (is_null($_401k_loan)) {
            throw new \InvalidArgumentException('non-nullable _401k_loan cannot be null');
        }
        $this->container['_401k_loan'] = $_401k_loan;

        return $this;
    }

    /**
     * Gets home_value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getHomeValue()
    {
        return $this->container['home_value'];
    }

    /**
     * Sets home_value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $home_value home_value
     *
     * @return self
     */
    public function setHomeValue($home_value)
    {
        if (is_null($home_value)) {
            throw new \InvalidArgumentException('non-nullable home_value cannot be null');
        }
        $this->container['home_value'] = $home_value;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string|null $created_date The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets interest_paid_ytd
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getInterestPaidYtd()
    {
        return $this->container['interest_paid_ytd'];
    }

    /**
     * Sets interest_paid_ytd
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $interest_paid_ytd interest_paid_ytd
     *
     * @return self
     */
    public function setInterestPaidYtd($interest_paid_ytd)
    {
        if (is_null($interest_paid_ytd)) {
            throw new \InvalidArgumentException('non-nullable interest_paid_ytd cannot be null');
        }
        $this->container['interest_paid_ytd'] = $interest_paid_ytd;

        return $this;
    }

    /**
     * Gets business_information
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessInformation|null
     */
    public function getBusinessInformation()
    {
        return $this->container['business_information'];
    }

    /**
     * Sets business_information
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessInformation|null $business_information business_information
     *
     * @return self
     */
    public function setBusinessInformation($business_information)
    {
        if (is_null($business_information)) {
            throw new \InvalidArgumentException('non-nullable business_information cannot be null');
        }
        $this->container['business_information'] = $business_information;

        return $this;
    }

    /**
     * Gets max_redraw
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMaxRedraw()
    {
        return $this->container['max_redraw'];
    }

    /**
     * Sets max_redraw
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $max_redraw max_redraw
     *
     * @return self
     */
    public function setMaxRedraw($max_redraw)
    {
        if (is_null($max_redraw)) {
            throw new \InvalidArgumentException('non-nullable max_redraw cannot be null');
        }
        $this->container['max_redraw'] = $max_redraw;

        return $this;
    }

    /**
     * Gets provider_account_id
     *
     * @return int|null
     */
    public function getProviderAccountId()
    {
        return $this->container['provider_account_id'];
    }

    /**
     * Sets provider_account_id
     *
     * @param int|null $provider_account_id The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setProviderAccountId($provider_account_id)
    {
        if (is_null($provider_account_id)) {
            throw new \InvalidArgumentException('non-nullable provider_account_id cannot be null');
        }
        $this->container['provider_account_id'] = $provider_account_id;

        return $this;
    }

    /**
     * Gets collateral
     *
     * @return string|null
     */
    public function getCollateral()
    {
        return $this->container['collateral'];
    }

    /**
     * Sets collateral
     *
     * @param string|null $collateral Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setCollateral($collateral)
    {
        if (is_null($collateral)) {
            throw new \InvalidArgumentException('non-nullable collateral cannot be null');
        }
        $this->container['collateral'] = $collateral;

        return $this;
    }

    /**
     * Gets dataset
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountDataset[]|null
     */
    public function getDataset()
    {
        return $this->container['dataset'];
    }

    /**
     * Sets dataset
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountDataset[]|null $dataset Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setDataset($dataset)
    {
        if (is_null($dataset)) {
            throw new \InvalidArgumentException('non-nullable dataset cannot be null');
        }
        $this->container['dataset'] = $dataset;

        return $this;
    }

    /**
     * Gets running_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getRunningBalance()
    {
        return $this->container['running_balance'];
    }

    /**
     * Sets running_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $running_balance running_balance
     *
     * @return self
     */
    public function setRunningBalance($running_balance)
    {
        if (is_null($running_balance)) {
            throw new \InvalidArgumentException('non-nullable running_balance cannot be null');
        }
        $this->container['running_balance'] = $running_balance;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string|null $source_id A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string|null $frequency The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'frequency', must be one of '%s'",
                    $frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets source_account_ownership
     *
     * @return string|null
     */
    public function getSourceAccountOwnership()
    {
        return $this->container['source_account_ownership'];
    }

    /**
     * Sets source_account_ownership
     *
     * @param string|null $source_account_ownership Value indicating the number of customers that have ownership of the account, according to the data holder's definition of account ownership. Does not indicate that all account owners are eligible consumers. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: Bank,Card,Loan container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setSourceAccountOwnership($source_account_ownership)
    {
        if (is_null($source_account_ownership)) {
            throw new \InvalidArgumentException('non-nullable source_account_ownership cannot be null');
        }
        $this->container['source_account_ownership'] = $source_account_ownership;

        return $this;
    }

    /**
     * Gets maturity_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMaturityAmount()
    {
        return $this->container['maturity_amount'];
    }

    /**
     * Sets maturity_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $maturity_amount maturity_amount
     *
     * @return self
     */
    public function setMaturityAmount($maturity_amount)
    {
        if (is_null($maturity_amount)) {
            throw new \InvalidArgumentException('non-nullable maturity_amount cannot be null');
        }
        $this->container['maturity_amount'] = $maturity_amount;

        return $this;
    }

    /**
     * Gets associated_provider_account_id
     *
     * @return int[]|null
     */
    public function getAssociatedProviderAccountId()
    {
        return $this->container['associated_provider_account_id'];
    }

    /**
     * Sets associated_provider_account_id
     *
     * @param int[]|null $associated_provider_account_id The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAssociatedProviderAccountId($associated_provider_account_id)
    {
        if (is_null($associated_provider_account_id)) {
            throw new \InvalidArgumentException('non-nullable associated_provider_account_id cannot be null');
        }
        $this->container['associated_provider_account_id'] = $associated_provider_account_id;

        return $this;
    }

    /**
     * Gets is_asset
     *
     * @return bool|null
     */
    public function getIsAsset()
    {
        return $this->container['is_asset'];
    }

    /**
     * Sets is_asset
     *
     * @param bool|null $is_asset The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setIsAsset($is_asset)
    {
        if (is_null($is_asset)) {
            throw new \InvalidArgumentException('non-nullable is_asset cannot be null');
        }
        $this->container['is_asset'] = $is_asset;

        return $this;
    }

    /**
     * Gets principal_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getPrincipalBalance()
    {
        return $this->container['principal_balance'];
    }

    /**
     * Sets principal_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $principal_balance principal_balance
     *
     * @return self
     */
    public function setPrincipalBalance($principal_balance)
    {
        if (is_null($principal_balance)) {
            throw new \InvalidArgumentException('non-nullable principal_balance cannot be null');
        }
        $this->container['principal_balance'] = $principal_balance;

        return $this;
    }

    /**
     * Gets total_cash_limit
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getTotalCashLimit()
    {
        return $this->container['total_cash_limit'];
    }

    /**
     * Sets total_cash_limit
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $total_cash_limit total_cash_limit
     *
     * @return self
     */
    public function setTotalCashLimit($total_cash_limit)
    {
        if (is_null($total_cash_limit)) {
            throw new \InvalidArgumentException('non-nullable total_cash_limit cannot be null');
        }
        $this->container['total_cash_limit'] = $total_cash_limit;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return string|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param string|null $maturity_date The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setMaturityDate($maturity_date)
    {
        if (is_null($maturity_date)) {
            throw new \InvalidArgumentException('non-nullable maturity_date cannot be null');
        }
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets minimum_amount_due
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMinimumAmountDue()
    {
        return $this->container['minimum_amount_due'];
    }

    /**
     * Sets minimum_amount_due
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $minimum_amount_due minimum_amount_due
     *
     * @return self
     */
    public function setMinimumAmountDue($minimum_amount_due)
    {
        if (is_null($minimum_amount_due)) {
            throw new \InvalidArgumentException('non-nullable minimum_amount_due cannot be null');
        }
        $this->container['minimum_amount_due'] = $minimum_amount_due;

        return $this;
    }

    /**
     * Gets annual_percentage_yield
     *
     * @return float|null
     */
    public function getAnnualPercentageYield()
    {
        return $this->container['annual_percentage_yield'];
    }

    /**
     * Sets annual_percentage_yield
     *
     * @param float|null $annual_percentage_yield Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAnnualPercentageYield($annual_percentage_yield)
    {
        if (is_null($annual_percentage_yield)) {
            throw new \InvalidArgumentException('non-nullable annual_percentage_yield cannot be null');
        }
        $this->container['annual_percentage_yield'] = $annual_percentage_yield;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>investment (SN 3.0)</b><ul><li>ROTH_SIMPLE_IRA</li><li>ROTH_SEP_IRA</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets origination_date
     *
     * @return string|null
     */
    public function getOriginationDate()
    {
        return $this->container['origination_date'];
    }

    /**
     * Sets origination_date
     *
     * @param string|null $origination_date The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setOriginationDate($origination_date)
    {
        if (is_null($origination_date)) {
            throw new \InvalidArgumentException('non-nullable origination_date cannot be null');
        }
        $this->container['origination_date'] = $origination_date;

        return $this;
    }

    /**
     * Gets total_vested_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getTotalVestedBalance()
    {
        return $this->container['total_vested_balance'];
    }

    /**
     * Sets total_vested_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $total_vested_balance total_vested_balance
     *
     * @return self
     */
    public function setTotalVestedBalance($total_vested_balance)
    {
        if (is_null($total_vested_balance)) {
            throw new \InvalidArgumentException('non-nullable total_vested_balance cannot be null');
        }
        $this->container['total_vested_balance'] = $total_vested_balance;

        return $this;
    }

    /**
     * Gets reward_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\RewardBalance[]|null
     */
    public function getRewardBalance()
    {
        return $this->container['reward_balance'];
    }

    /**
     * Sets reward_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\RewardBalance[]|null $reward_balance Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setRewardBalance($reward_balance)
    {
        if (is_null($reward_balance)) {
            throw new \InvalidArgumentException('non-nullable reward_balance cannot be null');
        }
        $this->container['reward_balance'] = $reward_balance;

        return $this;
    }

    /**
     * Gets source_account_status
     *
     * @return string|null
     */
    public function getSourceAccountStatus()
    {
        return $this->container['source_account_status'];
    }

    /**
     * Sets source_account_status
     *
     * @param string|null $source_account_status Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
     *
     * @return self
     */
    public function setSourceAccountStatus($source_account_status)
    {
        if (is_null($source_account_status)) {
            throw new \InvalidArgumentException('non-nullable source_account_status cannot be null');
        }
        $allowedValues = $this->getSourceAccountStatusAllowableValues();
        if (!in_array($source_account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_account_status', must be one of '%s'",
                    $source_account_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_account_status'] = $source_account_status;

        return $this;
    }

    /**
     * Gets linked_account_ids
     *
     * @return int[]|null
     */
    public function getLinkedAccountIds()
    {
        return $this->container['linked_account_ids'];
    }

    /**
     * Sets linked_account_ids
     *
     * @param int[]|null $linked_account_ids List of Loan accountId(s) to which the real-estate account is linked<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLinkedAccountIds($linked_account_ids)
    {
        if (is_null($linked_account_ids)) {
            throw new \InvalidArgumentException('non-nullable linked_account_ids cannot be null');
        }
        $this->container['linked_account_ids'] = $linked_account_ids;

        return $this;
    }

    /**
     * Gets derived_apr
     *
     * @return float|null
     */
    public function getDerivedApr()
    {
        return $this->container['derived_apr'];
    }

    /**
     * Sets derived_apr
     *
     * @param float|null $derived_apr Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setDerivedApr($derived_apr)
    {
        if (is_null($derived_apr)) {
            throw new \InvalidArgumentException('non-nullable derived_apr cannot be null');
        }
        $this->container['derived_apr'] = $derived_apr;

        return $this;
    }

    /**
     * Gets policy_effective_date
     *
     * @return string|null
     */
    public function getPolicyEffectiveDate()
    {
        return $this->container['policy_effective_date'];
    }

    /**
     * Sets policy_effective_date
     *
     * @param string|null $policy_effective_date The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPolicyEffectiveDate($policy_effective_date)
    {
        if (is_null($policy_effective_date)) {
            throw new \InvalidArgumentException('non-nullable policy_effective_date cannot be null');
        }
        $this->container['policy_effective_date'] = $policy_effective_date;

        return $this;
    }

    /**
     * Gets total_unvested_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getTotalUnvestedBalance()
    {
        return $this->container['total_unvested_balance'];
    }

    /**
     * Sets total_unvested_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $total_unvested_balance total_unvested_balance
     *
     * @return self
     */
    public function setTotalUnvestedBalance($total_unvested_balance)
    {
        if (is_null($total_unvested_balance)) {
            throw new \InvalidArgumentException('non-nullable total_unvested_balance cannot be null');
        }
        $this->container['total_unvested_balance'] = $total_unvested_balance;

        return $this;
    }

    /**
     * Gets annuity_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAnnuityBalance()
    {
        return $this->container['annuity_balance'];
    }

    /**
     * Sets annuity_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $annuity_balance annuity_balance
     *
     * @return self
     */
    public function setAnnuityBalance($annuity_balance)
    {
        if (is_null($annuity_balance)) {
            throw new \InvalidArgumentException('non-nullable annuity_balance cannot be null');
        }
        $this->container['annuity_balance'] = $annuity_balance;

        return $this;
    }

    /**
     * Gets account_category
     *
     * @return string|null
     */
    public function getAccountCategory()
    {
        return $this->container['account_category'];
    }

    /**
     * Sets account_category
     *
     * @param string|null $account_category AccountCategory stores the derived account type category.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: Investment container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAccountCategory($account_category)
    {
        if (is_null($account_category)) {
            throw new \InvalidArgumentException('non-nullable account_category cannot be null');
        }
        $this->container['account_category'] = $account_category;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets total_credit_limit
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getTotalCreditLimit()
    {
        return $this->container['total_credit_limit'];
    }

    /**
     * Sets total_credit_limit
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $total_credit_limit total_credit_limit
     *
     * @return self
     */
    public function setTotalCreditLimit($total_credit_limit)
    {
        if (is_null($total_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable total_credit_limit cannot be null');
        }
        $this->container['total_credit_limit'] = $total_credit_limit;

        return $this;
    }

    /**
     * Gets policy_status
     *
     * @return string|null
     */
    public function getPolicyStatus()
    {
        return $this->container['policy_status'];
    }

    /**
     * Sets policy_status
     *
     * @param string|null $policy_status The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setPolicyStatus($policy_status)
    {
        if (is_null($policy_status)) {
            throw new \InvalidArgumentException('non-nullable policy_status cannot be null');
        }
        $allowedValues = $this->getPolicyStatusAllowableValues();
        if (!in_array($policy_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'policy_status', must be one of '%s'",
                    $policy_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy_status'] = $policy_status;

        return $this;
    }

    /**
     * Gets short_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getShortBalance()
    {
        return $this->container['short_balance'];
    }

    /**
     * Sets short_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $short_balance short_balance
     *
     * @return self
     */
    public function setShortBalance($short_balance)
    {
        if (is_null($short_balance)) {
            throw new \InvalidArgumentException('non-nullable short_balance cannot be null');
        }
        $this->container['short_balance'] = $short_balance;

        return $this;
    }

    /**
     * Gets lender
     *
     * @return string|null
     */
    public function getLender()
    {
        return $this->container['lender'];
    }

    /**
     * Sets lender
     *
     * @param string|null $lender The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLender($lender)
    {
        if (is_null($lender)) {
            throw new \InvalidArgumentException('non-nullable lender cannot be null');
        }
        $this->container['lender'] = $lender;

        return $this;
    }

    /**
     * Gets last_employee_contribution_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLastEmployeeContributionAmount()
    {
        return $this->container['last_employee_contribution_amount'];
    }

    /**
     * Sets last_employee_contribution_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $last_employee_contribution_amount last_employee_contribution_amount
     *
     * @return self
     */
    public function setLastEmployeeContributionAmount($last_employee_contribution_amount)
    {
        if (is_null($last_employee_contribution_amount)) {
            throw new \InvalidArgumentException('non-nullable last_employee_contribution_amount cannot be null');
        }
        $this->container['last_employee_contribution_amount'] = $last_employee_contribution_amount;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return string|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param string|null $last_payment_date The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        if (is_null($last_payment_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_date cannot be null');
        }
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets primary_reward_unit
     *
     * @return string|null
     */
    public function getPrimaryRewardUnit()
    {
        return $this->container['primary_reward_unit'];
    }

    /**
     * Sets primary_reward_unit
     *
     * @param string|null $primary_reward_unit Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPrimaryRewardUnit($primary_reward_unit)
    {
        if (is_null($primary_reward_unit)) {
            throw new \InvalidArgumentException('non-nullable primary_reward_unit cannot be null');
        }
        $this->container['primary_reward_unit'] = $primary_reward_unit;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $last_payment_amount last_payment_amount
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        if (is_null($last_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_amount cannot be null');
        }
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets remaining_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getRemainingBalance()
    {
        return $this->container['remaining_balance'];
    }

    /**
     * Sets remaining_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $remaining_balance remaining_balance
     *
     * @return self
     */
    public function setRemainingBalance($remaining_balance)
    {
        if (is_null($remaining_balance)) {
            throw new \InvalidArgumentException('non-nullable remaining_balance cannot be null');
        }
        $this->container['remaining_balance'] = $remaining_balance;

        return $this;
    }

    /**
     * Gets user_classification
     *
     * @return string|null
     */
    public function getUserClassification()
    {
        return $this->container['user_classification'];
    }

    /**
     * Sets user_classification
     *
     * @param string|null $user_classification <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate, otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setUserClassification($user_classification)
    {
        if (is_null($user_classification)) {
            throw new \InvalidArgumentException('non-nullable user_classification cannot be null');
        }
        $allowedValues = $this->getUserClassificationAllowableValues();
        if (!in_array($user_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_classification', must be one of '%s'",
                    $user_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_classification'] = $user_classification;

        return $this;
    }

    /**
     * Gets bank_transfer_code
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\BankTransferCode[]|null
     */
    public function getBankTransferCode()
    {
        return $this->container['bank_transfer_code'];
    }

    /**
     * Sets bank_transfer_code
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\BankTransferCode[]|null $bank_transfer_code Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setBankTransferCode($bank_transfer_code)
    {
        if (is_null($bank_transfer_code)) {
            throw new \InvalidArgumentException('non-nullable bank_transfer_code cannot be null');
        }
        $this->container['bank_transfer_code'] = $bank_transfer_code;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets coverage
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Coverage[]|null
     */
    public function getCoverage()
    {
        return $this->container['coverage'];
    }

    /**
     * Sets coverage
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Coverage[]|null $coverage The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setCoverage($coverage)
    {
        if (is_null($coverage)) {
            throw new \InvalidArgumentException('non-nullable coverage cannot be null');
        }
        $this->container['coverage'] = $coverage;

        return $this;
    }

    /**
     * Gets cash_apr
     *
     * @return float|null
     */
    public function getCashApr()
    {
        return $this->container['cash_apr'];
    }

    /**
     * Sets cash_apr
     *
     * @param float|null $cash_apr Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setCashApr($cash_apr)
    {
        if (is_null($cash_apr)) {
            throw new \InvalidArgumentException('non-nullable cash_apr cannot be null');
        }
        $this->container['cash_apr'] = $cash_apr;

        return $this;
    }

    /**
     * Gets auto_refresh
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AutoRefresh|null
     */
    public function getAutoRefresh()
    {
        return $this->container['auto_refresh'];
    }

    /**
     * Sets auto_refresh
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AutoRefresh|null $auto_refresh auto_refresh
     *
     * @return self
     */
    public function setAutoRefresh($auto_refresh)
    {
        if (is_null($auto_refresh)) {
            throw new \InvalidArgumentException('non-nullable auto_refresh cannot be null');
        }
        $this->container['auto_refresh'] = $auto_refresh;

        return $this;
    }

    /**
     * Gets oauth_migration_status
     *
     * @return string|null
     */
    public function getOauthMigrationStatus()
    {
        return $this->container['oauth_migration_status'];
    }

    /**
     * Sets oauth_migration_status
     *
     * @param string|null $oauth_migration_status Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setOauthMigrationStatus($oauth_migration_status)
    {
        if (is_null($oauth_migration_status)) {
            throw new \InvalidArgumentException('non-nullable oauth_migration_status cannot be null');
        }
        $allowedValues = $this->getOauthMigrationStatusAllowableValues();
        if (!in_array($oauth_migration_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'oauth_migration_status', must be one of '%s'",
                    $oauth_migration_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['oauth_migration_status'] = $oauth_migration_status;

        return $this;
    }

    /**
     * Gets displayed_name
     *
     * @return string|null
     */
    public function getDisplayedName()
    {
        return $this->container['displayed_name'];
    }

    /**
     * Sets displayed_name
     *
     * @param string|null $displayed_name The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setDisplayedName($displayed_name)
    {
        if (is_null($displayed_name)) {
            throw new \InvalidArgumentException('non-nullable displayed_name cannot be null');
        }
        $this->container['displayed_name'] = $displayed_name;

        return $this;
    }

    /**
     * Gets full_account_number_list
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\FullAccountNumberList|null
     */
    public function getFullAccountNumberList()
    {
        return $this->container['full_account_number_list'];
    }

    /**
     * Sets full_account_number_list
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\FullAccountNumberList|null $full_account_number_list full_account_number_list
     *
     * @return self
     */
    public function setFullAccountNumberList($full_account_number_list)
    {
        if (is_null($full_account_number_list)) {
            throw new \InvalidArgumentException('non-nullable full_account_number_list cannot be null');
        }
        $this->container['full_account_number_list'] = $full_account_number_list;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $amount_due amount_due
     *
     * @return self
     */
    public function setAmountDue($amount_due)
    {
        if (is_null($amount_due)) {
            throw new \InvalidArgumentException('non-nullable amount_due cannot be null');
        }
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets current_level
     *
     * @return string|null
     */
    public function getCurrentLevel()
    {
        return $this->container['current_level'];
    }

    /**
     * Sets current_level
     *
     * @param string|null $current_level Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setCurrentLevel($current_level)
    {
        if (is_null($current_level)) {
            throw new \InvalidArgumentException('non-nullable current_level cannot be null');
        }
        $this->container['current_level'] = $current_level;

        return $this;
    }

    /**
     * Gets original_loan_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getOriginalLoanAmount()
    {
        return $this->container['original_loan_amount'];
    }

    /**
     * Sets original_loan_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $original_loan_amount original_loan_amount
     *
     * @return self
     */
    public function setOriginalLoanAmount($original_loan_amount)
    {
        if (is_null($original_loan_amount)) {
            throw new \InvalidArgumentException('non-nullable original_loan_amount cannot be null');
        }
        $this->container['original_loan_amount'] = $original_loan_amount;

        return $this;
    }

    /**
     * Gets policy_to_date
     *
     * @return string|null
     */
    public function getPolicyToDate()
    {
        return $this->container['policy_to_date'];
    }

    /**
     * Sets policy_to_date
     *
     * @param string|null $policy_to_date The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setPolicyToDate($policy_to_date)
    {
        if (is_null($policy_to_date)) {
            throw new \InvalidArgumentException('non-nullable policy_to_date cannot be null');
        }
        $this->container['policy_to_date'] = $policy_to_date;

        return $this;
    }

    /**
     * Gets loan_payoff_details
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\LoanPayoffDetails|null
     */
    public function getLoanPayoffDetails()
    {
        return $this->container['loan_payoff_details'];
    }

    /**
     * Sets loan_payoff_details
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\LoanPayoffDetails|null $loan_payoff_details loan_payoff_details
     *
     * @return self
     */
    public function setLoanPayoffDetails($loan_payoff_details)
    {
        if (is_null($loan_payoff_details)) {
            throw new \InvalidArgumentException('non-nullable loan_payoff_details cannot be null');
        }
        $this->container['loan_payoff_details'] = $loan_payoff_details;

        return $this;
    }

    /**
     * Gets payment_profile
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\PaymentProfile|null
     */
    public function getPaymentProfile()
    {
        return $this->container['payment_profile'];
    }

    /**
     * Sets payment_profile
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\PaymentProfile|null $payment_profile payment_profile
     *
     * @return self
     */
    public function setPaymentProfile($payment_profile)
    {
        if (is_null($payment_profile)) {
            throw new \InvalidArgumentException('non-nullable payment_profile cannot be null');
        }
        $this->container['payment_profile'] = $payment_profile;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!in_array($container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container', must be one of '%s'",
                    $container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets is_owned_at_source
     *
     * @return bool|null
     */
    public function getIsOwnedAtSource()
    {
        return $this->container['is_owned_at_source'];
    }

    /**
     * Sets is_owned_at_source
     *
     * @param bool|null $is_owned_at_source Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: Bank,Card,Loan container<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setIsOwnedAtSource($is_owned_at_source)
    {
        if (is_null($is_owned_at_source)) {
            throw new \InvalidArgumentException('non-nullable is_owned_at_source cannot be null');
        }
        $this->container['is_owned_at_source'] = $is_owned_at_source;

        return $this;
    }

    /**
     * Gets last_employee_contribution_date
     *
     * @return string|null
     */
    public function getLastEmployeeContributionDate()
    {
        return $this->container['last_employee_contribution_date'];
    }

    /**
     * Sets last_employee_contribution_date
     *
     * @param string|null $last_employee_contribution_date The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
     *
     * @return self
     */
    public function setLastEmployeeContributionDate($last_employee_contribution_date)
    {
        if (is_null($last_employee_contribution_date)) {
            throw new \InvalidArgumentException('non-nullable last_employee_contribution_date cannot be null');
        }
        $this->container['last_employee_contribution_date'] = $last_employee_contribution_date;

        return $this;
    }

    /**
     * Gets last_payment
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLastPayment()
    {
        return $this->container['last_payment'];
    }

    /**
     * Sets last_payment
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $last_payment last_payment
     *
     * @return self
     */
    public function setLastPayment($last_payment)
    {
        if (is_null($last_payment)) {
            throw new \InvalidArgumentException('non-nullable last_payment cannot be null');
        }
        $this->container['last_payment'] = $last_payment;

        return $this;
    }

    /**
     * Gets recurring_payment
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getRecurringPayment()
    {
        return $this->container['recurring_payment'];
    }

    /**
     * Sets recurring_payment
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $recurring_payment recurring_payment
     *
     * @return self
     */
    public function setRecurringPayment($recurring_payment)
    {
        if (is_null($recurring_payment)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment cannot be null');
        }
        $this->container['recurring_payment'] = $recurring_payment;

        return $this;
    }

    /**
     * Gets min_redraw
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMinRedraw()
    {
        return $this->container['min_redraw'];
    }

    /**
     * Sets min_redraw
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $min_redraw min_redraw
     *
     * @return self
     */
    public function setMinRedraw($min_redraw)
    {
        if (is_null($min_redraw)) {
            throw new \InvalidArgumentException('non-nullable min_redraw cannot be null');
        }
        $this->container['min_redraw'] = $min_redraw;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


