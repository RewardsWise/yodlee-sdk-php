<?php
/**
 * DataExtractsHolding
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * DataExtractsHolding Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataExtractsHolding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataExtractsHolding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'exercised_quantity' => 'float',
        'cusip_number' => 'string',
        'vested_quantity' => 'float',
        'description' => 'string',
        'unvested_value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'security_style' => 'string',
        'vested_value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'option_type' => 'string',
        'last_updated' => 'string',
        'match_status' => 'string',
        'holding_type' => 'string',
        'maturity_date' => 'string',
        'price' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'term' => 'string',
        'contract_quantity' => 'float',
        'id' => 'int',
        'is_short' => 'bool',
        'value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'expiration_date' => 'string',
        'interest_rate' => 'float',
        'quantity' => 'float',
        'accrued_interest' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'grant_date' => 'string',
        'sedol' => 'string',
        'vested_shares_exercisable' => 'float',
        'spread' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_id' => 'int',
        'enriched_description' => 'string',
        'coupon_rate' => 'float',
        'created_date' => 'string',
        'accrued_income' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'security_type' => 'string',
        'provider_account_id' => 'int',
        'unvested_quantity' => 'float',
        'cost_basis' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'vesting_date' => 'string',
        'isin' => 'string',
        'strike_price' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'exercised_quantity' => 'double',
        'cusip_number' => null,
        'vested_quantity' => 'double',
        'description' => null,
        'unvested_value' => null,
        'security_style' => null,
        'vested_value' => null,
        'option_type' => null,
        'last_updated' => null,
        'match_status' => null,
        'holding_type' => null,
        'maturity_date' => null,
        'price' => null,
        'term' => null,
        'contract_quantity' => 'double',
        'id' => 'int64',
        'is_short' => null,
        'value' => null,
        'expiration_date' => null,
        'interest_rate' => 'double',
        'quantity' => 'double',
        'accrued_interest' => null,
        'grant_date' => null,
        'sedol' => null,
        'vested_shares_exercisable' => 'double',
        'spread' => null,
        'account_id' => 'int64',
        'enriched_description' => null,
        'coupon_rate' => 'double',
        'created_date' => null,
        'accrued_income' => null,
        'security_type' => null,
        'provider_account_id' => 'int64',
        'unvested_quantity' => 'double',
        'cost_basis' => null,
        'vesting_date' => null,
        'isin' => null,
        'strike_price' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol' => false,
        'exercised_quantity' => false,
        'cusip_number' => false,
        'vested_quantity' => false,
        'description' => false,
        'unvested_value' => false,
        'security_style' => false,
        'vested_value' => false,
        'option_type' => false,
        'last_updated' => false,
        'match_status' => false,
        'holding_type' => false,
        'maturity_date' => false,
        'price' => false,
        'term' => false,
        'contract_quantity' => false,
        'id' => false,
        'is_short' => false,
        'value' => false,
        'expiration_date' => false,
        'interest_rate' => false,
        'quantity' => false,
        'accrued_interest' => false,
        'grant_date' => false,
        'sedol' => false,
        'vested_shares_exercisable' => false,
        'spread' => false,
        'account_id' => false,
        'enriched_description' => false,
        'coupon_rate' => false,
        'created_date' => false,
        'accrued_income' => false,
        'security_type' => false,
        'provider_account_id' => false,
        'unvested_quantity' => false,
        'cost_basis' => false,
        'vesting_date' => false,
        'isin' => false,
        'strike_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'exercised_quantity' => 'exercisedQuantity',
        'cusip_number' => 'cusipNumber',
        'vested_quantity' => 'vestedQuantity',
        'description' => 'description',
        'unvested_value' => 'unvestedValue',
        'security_style' => 'securityStyle',
        'vested_value' => 'vestedValue',
        'option_type' => 'optionType',
        'last_updated' => 'lastUpdated',
        'match_status' => 'matchStatus',
        'holding_type' => 'holdingType',
        'maturity_date' => 'maturityDate',
        'price' => 'price',
        'term' => 'term',
        'contract_quantity' => 'contractQuantity',
        'id' => 'id',
        'is_short' => 'isShort',
        'value' => 'value',
        'expiration_date' => 'expirationDate',
        'interest_rate' => 'interestRate',
        'quantity' => 'quantity',
        'accrued_interest' => 'accruedInterest',
        'grant_date' => 'grantDate',
        'sedol' => 'sedol',
        'vested_shares_exercisable' => 'vestedSharesExercisable',
        'spread' => 'spread',
        'account_id' => 'accountId',
        'enriched_description' => 'enrichedDescription',
        'coupon_rate' => 'couponRate',
        'created_date' => 'createdDate',
        'accrued_income' => 'accruedIncome',
        'security_type' => 'securityType',
        'provider_account_id' => 'providerAccountId',
        'unvested_quantity' => 'unvestedQuantity',
        'cost_basis' => 'costBasis',
        'vesting_date' => 'vestingDate',
        'isin' => 'isin',
        'strike_price' => 'strikePrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'exercised_quantity' => 'setExercisedQuantity',
        'cusip_number' => 'setCusipNumber',
        'vested_quantity' => 'setVestedQuantity',
        'description' => 'setDescription',
        'unvested_value' => 'setUnvestedValue',
        'security_style' => 'setSecurityStyle',
        'vested_value' => 'setVestedValue',
        'option_type' => 'setOptionType',
        'last_updated' => 'setLastUpdated',
        'match_status' => 'setMatchStatus',
        'holding_type' => 'setHoldingType',
        'maturity_date' => 'setMaturityDate',
        'price' => 'setPrice',
        'term' => 'setTerm',
        'contract_quantity' => 'setContractQuantity',
        'id' => 'setId',
        'is_short' => 'setIsShort',
        'value' => 'setValue',
        'expiration_date' => 'setExpirationDate',
        'interest_rate' => 'setInterestRate',
        'quantity' => 'setQuantity',
        'accrued_interest' => 'setAccruedInterest',
        'grant_date' => 'setGrantDate',
        'sedol' => 'setSedol',
        'vested_shares_exercisable' => 'setVestedSharesExercisable',
        'spread' => 'setSpread',
        'account_id' => 'setAccountId',
        'enriched_description' => 'setEnrichedDescription',
        'coupon_rate' => 'setCouponRate',
        'created_date' => 'setCreatedDate',
        'accrued_income' => 'setAccruedIncome',
        'security_type' => 'setSecurityType',
        'provider_account_id' => 'setProviderAccountId',
        'unvested_quantity' => 'setUnvestedQuantity',
        'cost_basis' => 'setCostBasis',
        'vesting_date' => 'setVestingDate',
        'isin' => 'setIsin',
        'strike_price' => 'setStrikePrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'exercised_quantity' => 'getExercisedQuantity',
        'cusip_number' => 'getCusipNumber',
        'vested_quantity' => 'getVestedQuantity',
        'description' => 'getDescription',
        'unvested_value' => 'getUnvestedValue',
        'security_style' => 'getSecurityStyle',
        'vested_value' => 'getVestedValue',
        'option_type' => 'getOptionType',
        'last_updated' => 'getLastUpdated',
        'match_status' => 'getMatchStatus',
        'holding_type' => 'getHoldingType',
        'maturity_date' => 'getMaturityDate',
        'price' => 'getPrice',
        'term' => 'getTerm',
        'contract_quantity' => 'getContractQuantity',
        'id' => 'getId',
        'is_short' => 'getIsShort',
        'value' => 'getValue',
        'expiration_date' => 'getExpirationDate',
        'interest_rate' => 'getInterestRate',
        'quantity' => 'getQuantity',
        'accrued_interest' => 'getAccruedInterest',
        'grant_date' => 'getGrantDate',
        'sedol' => 'getSedol',
        'vested_shares_exercisable' => 'getVestedSharesExercisable',
        'spread' => 'getSpread',
        'account_id' => 'getAccountId',
        'enriched_description' => 'getEnrichedDescription',
        'coupon_rate' => 'getCouponRate',
        'created_date' => 'getCreatedDate',
        'accrued_income' => 'getAccruedIncome',
        'security_type' => 'getSecurityType',
        'provider_account_id' => 'getProviderAccountId',
        'unvested_quantity' => 'getUnvestedQuantity',
        'cost_basis' => 'getCostBasis',
        'vesting_date' => 'getVestingDate',
        'isin' => 'getIsin',
        'strike_price' => 'getStrikePrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OPTION_TYPE_PUT = 'put';
    public const OPTION_TYPE_CALL = 'call';
    public const OPTION_TYPE_UNKNOWN = 'unknown';
    public const OPTION_TYPE_OTHER = 'other';
    public const HOLDING_TYPE_STOCK = 'stock';
    public const HOLDING_TYPE_MUTUAL_FUND = 'mutualFund';
    public const HOLDING_TYPE_BOND = 'bond';
    public const HOLDING_TYPE_CD = 'CD';
    public const HOLDING_TYPE_OPTION = 'option';
    public const HOLDING_TYPE_MONEY_MARKET_FUND = 'moneyMarketFund';
    public const HOLDING_TYPE_OTHER = 'other';
    public const HOLDING_TYPE_REMIC = 'remic';
    public const HOLDING_TYPE_FUTURE = 'future';
    public const HOLDING_TYPE_COMMODITY = 'commodity';
    public const HOLDING_TYPE_CURRENCY = 'currency';
    public const HOLDING_TYPE_UNIT_INVESTMENT_TRUST = 'unitInvestmentTrust';
    public const HOLDING_TYPE_EMPLOYEE_STOCK_OPTION = 'employeeStockOption';
    public const HOLDING_TYPE_INSURANCE_ANNUITY = 'insuranceAnnuity';
    public const HOLDING_TYPE_UNKNOWN = 'unknown';
    public const HOLDING_TYPE_PREFERRED_STOCK = 'preferredStock';
    public const HOLDING_TYPE_ETF = 'ETF';
    public const HOLDING_TYPE_WARRANTS = 'warrants';
    public const HOLDING_TYPE_DIGITAL_ASSET = 'digitalAsset';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionTypeAllowableValues()
    {
        return [
            self::OPTION_TYPE_PUT,
            self::OPTION_TYPE_CALL,
            self::OPTION_TYPE_UNKNOWN,
            self::OPTION_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHoldingTypeAllowableValues()
    {
        return [
            self::HOLDING_TYPE_STOCK,
            self::HOLDING_TYPE_MUTUAL_FUND,
            self::HOLDING_TYPE_BOND,
            self::HOLDING_TYPE_CD,
            self::HOLDING_TYPE_OPTION,
            self::HOLDING_TYPE_MONEY_MARKET_FUND,
            self::HOLDING_TYPE_OTHER,
            self::HOLDING_TYPE_REMIC,
            self::HOLDING_TYPE_FUTURE,
            self::HOLDING_TYPE_COMMODITY,
            self::HOLDING_TYPE_CURRENCY,
            self::HOLDING_TYPE_UNIT_INVESTMENT_TRUST,
            self::HOLDING_TYPE_EMPLOYEE_STOCK_OPTION,
            self::HOLDING_TYPE_INSURANCE_ANNUITY,
            self::HOLDING_TYPE_UNKNOWN,
            self::HOLDING_TYPE_PREFERRED_STOCK,
            self::HOLDING_TYPE_ETF,
            self::HOLDING_TYPE_WARRANTS,
            self::HOLDING_TYPE_DIGITAL_ASSET,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('exercised_quantity', $data ?? [], null);
        $this->setIfExists('cusip_number', $data ?? [], null);
        $this->setIfExists('vested_quantity', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unvested_value', $data ?? [], null);
        $this->setIfExists('security_style', $data ?? [], null);
        $this->setIfExists('vested_value', $data ?? [], null);
        $this->setIfExists('option_type', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('match_status', $data ?? [], null);
        $this->setIfExists('holding_type', $data ?? [], null);
        $this->setIfExists('maturity_date', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('term', $data ?? [], null);
        $this->setIfExists('contract_quantity', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_short', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('accrued_interest', $data ?? [], null);
        $this->setIfExists('grant_date', $data ?? [], null);
        $this->setIfExists('sedol', $data ?? [], null);
        $this->setIfExists('vested_shares_exercisable', $data ?? [], null);
        $this->setIfExists('spread', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('enriched_description', $data ?? [], null);
        $this->setIfExists('coupon_rate', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('accrued_income', $data ?? [], null);
        $this->setIfExists('security_type', $data ?? [], null);
        $this->setIfExists('provider_account_id', $data ?? [], null);
        $this->setIfExists('unvested_quantity', $data ?? [], null);
        $this->setIfExists('cost_basis', $data ?? [], null);
        $this->setIfExists('vesting_date', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('strike_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOptionTypeAllowableValues();
        if (!is_null($this->container['option_type']) && !in_array($this->container['option_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'option_type', must be one of '%s'",
                $this->container['option_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHoldingTypeAllowableValues();
        if (!is_null($this->container['holding_type']) && !in_array($this->container['holding_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'holding_type', must be one of '%s'",
                $this->container['holding_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets exercised_quantity
     *
     * @return float|null
     */
    public function getExercisedQuantity()
    {
        return $this->container['exercised_quantity'];
    }

    /**
     * Sets exercised_quantity
     *
     * @param float|null $exercised_quantity The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setExercisedQuantity($exercised_quantity)
    {
        if (is_null($exercised_quantity)) {
            throw new \InvalidArgumentException('non-nullable exercised_quantity cannot be null');
        }
        $this->container['exercised_quantity'] = $exercised_quantity;

        return $this;
    }

    /**
     * Gets cusip_number
     *
     * @return string|null
     */
    public function getCusipNumber()
    {
        return $this->container['cusip_number'];
    }

    /**
     * Sets cusip_number
     *
     * @param string|null $cusip_number The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setCusipNumber($cusip_number)
    {
        if (is_null($cusip_number)) {
            throw new \InvalidArgumentException('non-nullable cusip_number cannot be null');
        }
        $this->container['cusip_number'] = $cusip_number;

        return $this;
    }

    /**
     * Gets vested_quantity
     *
     * @return float|null
     */
    public function getVestedQuantity()
    {
        return $this->container['vested_quantity'];
    }

    /**
     * Sets vested_quantity
     *
     * @param float|null $vested_quantity The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setVestedQuantity($vested_quantity)
    {
        if (is_null($vested_quantity)) {
            throw new \InvalidArgumentException('non-nullable vested_quantity cannot be null');
        }
        $this->container['vested_quantity'] = $vested_quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unvested_value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getUnvestedValue()
    {
        return $this->container['unvested_value'];
    }

    /**
     * Sets unvested_value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $unvested_value unvested_value
     *
     * @return self
     */
    public function setUnvestedValue($unvested_value)
    {
        if (is_null($unvested_value)) {
            throw new \InvalidArgumentException('non-nullable unvested_value cannot be null');
        }
        $this->container['unvested_value'] = $unvested_value;

        return $this;
    }

    /**
     * Gets security_style
     *
     * @return string|null
     */
    public function getSecurityStyle()
    {
        return $this->container['security_style'];
    }

    /**
     * Sets security_style
     *
     * @param string|null $security_style Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSecurityStyle($security_style)
    {
        if (is_null($security_style)) {
            throw new \InvalidArgumentException('non-nullable security_style cannot be null');
        }
        $this->container['security_style'] = $security_style;

        return $this;
    }

    /**
     * Gets vested_value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getVestedValue()
    {
        return $this->container['vested_value'];
    }

    /**
     * Sets vested_value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $vested_value vested_value
     *
     * @return self
     */
    public function setVestedValue($vested_value)
    {
        if (is_null($vested_value)) {
            throw new \InvalidArgumentException('non-nullable vested_value cannot be null');
        }
        $this->container['vested_value'] = $vested_value;

        return $this;
    }

    /**
     * Gets option_type
     *
     * @return string|null
     */
    public function getOptionType()
    {
        return $this->container['option_type'];
    }

    /**
     * Sets option_type
     *
     * @param string|null $option_type The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setOptionType($option_type)
    {
        if (is_null($option_type)) {
            throw new \InvalidArgumentException('non-nullable option_type cannot be null');
        }
        $allowedValues = $this->getOptionTypeAllowableValues();
        if (!in_array($option_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'option_type', must be one of '%s'",
                    $option_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['option_type'] = $option_type;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets match_status
     *
     * @return string|null
     */
    public function getMatchStatus()
    {
        return $this->container['match_status'];
    }

    /**
     * Sets match_status
     *
     * @param string|null $match_status Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setMatchStatus($match_status)
    {
        if (is_null($match_status)) {
            throw new \InvalidArgumentException('non-nullable match_status cannot be null');
        }
        $this->container['match_status'] = $match_status;

        return $this;
    }

    /**
     * Gets holding_type
     *
     * @return string|null
     */
    public function getHoldingType()
    {
        return $this->container['holding_type'];
    }

    /**
     * Sets holding_type
     *
     * @param string|null $holding_type Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setHoldingType($holding_type)
    {
        if (is_null($holding_type)) {
            throw new \InvalidArgumentException('non-nullable holding_type cannot be null');
        }
        $allowedValues = $this->getHoldingTypeAllowableValues();
        if (!in_array($holding_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'holding_type', must be one of '%s'",
                    $holding_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['holding_type'] = $holding_type;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return string|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param string|null $maturity_date The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setMaturityDate($maturity_date)
    {
        if (is_null($maturity_date)) {
            throw new \InvalidArgumentException('non-nullable maturity_date cannot be null');
        }
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string|null
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string|null $term The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setTerm($term)
    {
        if (is_null($term)) {
            throw new \InvalidArgumentException('non-nullable term cannot be null');
        }
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets contract_quantity
     *
     * @return float|null
     */
    public function getContractQuantity()
    {
        return $this->container['contract_quantity'];
    }

    /**
     * Sets contract_quantity
     *
     * @param float|null $contract_quantity The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setContractQuantity($contract_quantity)
    {
        if (is_null($contract_quantity)) {
            throw new \InvalidArgumentException('non-nullable contract_quantity cannot be null');
        }
        $this->container['contract_quantity'] = $contract_quantity;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_short
     *
     * @return bool|null
     */
    public function getIsShort()
    {
        return $this->container['is_short'];
    }

    /**
     * Sets is_short
     *
     * @param bool|null $is_short Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setIsShort($is_short)
    {
        if (is_null($is_short)) {
            throw new \InvalidArgumentException('non-nullable is_short cannot be null');
        }
        $this->container['is_short'] = $is_short;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets accrued_interest
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAccruedInterest()
    {
        return $this->container['accrued_interest'];
    }

    /**
     * Sets accrued_interest
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $accrued_interest accrued_interest
     *
     * @return self
     */
    public function setAccruedInterest($accrued_interest)
    {
        if (is_null($accrued_interest)) {
            throw new \InvalidArgumentException('non-nullable accrued_interest cannot be null');
        }
        $this->container['accrued_interest'] = $accrued_interest;

        return $this;
    }

    /**
     * Gets grant_date
     *
     * @return string|null
     */
    public function getGrantDate()
    {
        return $this->container['grant_date'];
    }

    /**
     * Sets grant_date
     *
     * @param string|null $grant_date The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setGrantDate($grant_date)
    {
        if (is_null($grant_date)) {
            throw new \InvalidArgumentException('non-nullable grant_date cannot be null');
        }
        $this->container['grant_date'] = $grant_date;

        return $this;
    }

    /**
     * Gets sedol
     *
     * @return string|null
     */
    public function getSedol()
    {
        return $this->container['sedol'];
    }

    /**
     * Sets sedol
     *
     * @param string|null $sedol The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setSedol($sedol)
    {
        if (is_null($sedol)) {
            throw new \InvalidArgumentException('non-nullable sedol cannot be null');
        }
        $this->container['sedol'] = $sedol;

        return $this;
    }

    /**
     * Gets vested_shares_exercisable
     *
     * @return float|null
     */
    public function getVestedSharesExercisable()
    {
        return $this->container['vested_shares_exercisable'];
    }

    /**
     * Sets vested_shares_exercisable
     *
     * @param float|null $vested_shares_exercisable The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setVestedSharesExercisable($vested_shares_exercisable)
    {
        if (is_null($vested_shares_exercisable)) {
            throw new \InvalidArgumentException('non-nullable vested_shares_exercisable cannot be null');
        }
        $this->container['vested_shares_exercisable'] = $vested_shares_exercisable;

        return $this;
    }

    /**
     * Gets spread
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getSpread()
    {
        return $this->container['spread'];
    }

    /**
     * Sets spread
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $spread spread
     *
     * @return self
     */
    public function setSpread($spread)
    {
        if (is_null($spread)) {
            throw new \InvalidArgumentException('non-nullable spread cannot be null');
        }
        $this->container['spread'] = $spread;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enriched_description
     *
     * @return string|null
     */
    public function getEnrichedDescription()
    {
        return $this->container['enriched_description'];
    }

    /**
     * Sets enriched_description
     *
     * @param string|null $enriched_description The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setEnrichedDescription($enriched_description)
    {
        if (is_null($enriched_description)) {
            throw new \InvalidArgumentException('non-nullable enriched_description cannot be null');
        }
        $this->container['enriched_description'] = $enriched_description;

        return $this;
    }

    /**
     * Gets coupon_rate
     *
     * @return float|null
     */
    public function getCouponRate()
    {
        return $this->container['coupon_rate'];
    }

    /**
     * Sets coupon_rate
     *
     * @param float|null $coupon_rate The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setCouponRate($coupon_rate)
    {
        if (is_null($coupon_rate)) {
            throw new \InvalidArgumentException('non-nullable coupon_rate cannot be null');
        }
        $this->container['coupon_rate'] = $coupon_rate;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string|null $created_date The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets accrued_income
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAccruedIncome()
    {
        return $this->container['accrued_income'];
    }

    /**
     * Sets accrued_income
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $accrued_income accrued_income
     *
     * @return self
     */
    public function setAccruedIncome($accrued_income)
    {
        if (is_null($accrued_income)) {
            throw new \InvalidArgumentException('non-nullable accrued_income cannot be null');
        }
        $this->container['accrued_income'] = $accrued_income;

        return $this;
    }

    /**
     * Gets security_type
     *
     * @return string|null
     */
    public function getSecurityType()
    {
        return $this->container['security_type'];
    }

    /**
     * Sets security_type
     *
     * @param string|null $security_type Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSecurityType($security_type)
    {
        if (is_null($security_type)) {
            throw new \InvalidArgumentException('non-nullable security_type cannot be null');
        }
        $this->container['security_type'] = $security_type;

        return $this;
    }

    /**
     * Gets provider_account_id
     *
     * @return int|null
     */
    public function getProviderAccountId()
    {
        return $this->container['provider_account_id'];
    }

    /**
     * Sets provider_account_id
     *
     * @param int|null $provider_account_id Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setProviderAccountId($provider_account_id)
    {
        if (is_null($provider_account_id)) {
            throw new \InvalidArgumentException('non-nullable provider_account_id cannot be null');
        }
        $this->container['provider_account_id'] = $provider_account_id;

        return $this;
    }

    /**
     * Gets unvested_quantity
     *
     * @return float|null
     */
    public function getUnvestedQuantity()
    {
        return $this->container['unvested_quantity'];
    }

    /**
     * Sets unvested_quantity
     *
     * @param float|null $unvested_quantity Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setUnvestedQuantity($unvested_quantity)
    {
        if (is_null($unvested_quantity)) {
            throw new \InvalidArgumentException('non-nullable unvested_quantity cannot be null');
        }
        $this->container['unvested_quantity'] = $unvested_quantity;

        return $this;
    }

    /**
     * Gets cost_basis
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getCostBasis()
    {
        return $this->container['cost_basis'];
    }

    /**
     * Sets cost_basis
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $cost_basis cost_basis
     *
     * @return self
     */
    public function setCostBasis($cost_basis)
    {
        if (is_null($cost_basis)) {
            throw new \InvalidArgumentException('non-nullable cost_basis cannot be null');
        }
        $this->container['cost_basis'] = $cost_basis;

        return $this;
    }

    /**
     * Gets vesting_date
     *
     * @return string|null
     */
    public function getVestingDate()
    {
        return $this->container['vesting_date'];
    }

    /**
     * Sets vesting_date
     *
     * @param string|null $vesting_date The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setVestingDate($vesting_date)
    {
        if (is_null($vesting_date)) {
            throw new \InvalidArgumentException('non-nullable vesting_date cannot be null');
        }
        $this->container['vesting_date'] = $vesting_date;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string|null
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string|null $isin The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $strike_price strike_price
     *
     * @return self
     */
    public function setStrikePrice($strike_price)
    {
        if (is_null($strike_price)) {
            throw new \InvalidArgumentException('non-nullable strike_price cannot be null');
        }
        $this->container['strike_price'] = $strike_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


