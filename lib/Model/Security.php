<?php
/**
 * Security
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Security Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Security implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Security';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stock_exchange_details' => '\OpenAPI\Client\Model\StockExchangeDetail[]',
        'issue_type_multiplier' => 'float',
        'state_taxable' => 'bool',
        'call_date' => 'string',
        'cdsc_fund_flag' => 'bool',
        'cusip' => 'string',
        'federal_taxable' => 'bool',
        's_and_p_rating' => 'string',
        'share_class' => 'string',
        'is_envestnet_dummy_security' => 'bool',
        'description' => 'string',
        'minimum_purchase' => 'int',
        'type' => 'string',
        'first_coupon_date' => 'string',
        'frequency' => 'int',
        'accrual_method' => 'string',
        'income_currency' => 'string',
        'maturity_date' => 'string',
        'call_price' => 'float',
        'id' => 'int',
        'issue_date' => 'string',
        'sector' => 'string',
        'agency_factor' => 'float',
        'interest_rate' => 'float',
        'last_modified_date' => 'string',
        'gics_sector' => 'string',
        'closed_flag' => 'bool',
        'sedol' => 'string',
        'sub_sector' => 'string',
        'last_coupon_date' => 'string',
        'is_synthetic_security' => 'bool',
        'trade_currency_code' => 'string',
        'is_dummy_security' => 'bool',
        'moody_rating' => 'string',
        'style' => 'string',
        'firm_eligible' => 'string',
        'fund_family' => 'string',
        'isin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stock_exchange_details' => null,
        'issue_type_multiplier' => 'double',
        'state_taxable' => null,
        'call_date' => null,
        'cdsc_fund_flag' => null,
        'cusip' => null,
        'federal_taxable' => null,
        's_and_p_rating' => null,
        'share_class' => null,
        'is_envestnet_dummy_security' => null,
        'description' => null,
        'minimum_purchase' => 'int32',
        'type' => null,
        'first_coupon_date' => null,
        'frequency' => 'int32',
        'accrual_method' => null,
        'income_currency' => null,
        'maturity_date' => null,
        'call_price' => 'double',
        'id' => 'int64',
        'issue_date' => null,
        'sector' => null,
        'agency_factor' => 'double',
        'interest_rate' => 'double',
        'last_modified_date' => null,
        'gics_sector' => null,
        'closed_flag' => null,
        'sedol' => null,
        'sub_sector' => null,
        'last_coupon_date' => null,
        'is_synthetic_security' => null,
        'trade_currency_code' => null,
        'is_dummy_security' => null,
        'moody_rating' => null,
        'style' => null,
        'firm_eligible' => null,
        'fund_family' => null,
        'isin' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'stock_exchange_details' => false,
        'issue_type_multiplier' => false,
        'state_taxable' => false,
        'call_date' => false,
        'cdsc_fund_flag' => false,
        'cusip' => false,
        'federal_taxable' => false,
        's_and_p_rating' => false,
        'share_class' => false,
        'is_envestnet_dummy_security' => false,
        'description' => false,
        'minimum_purchase' => false,
        'type' => false,
        'first_coupon_date' => false,
        'frequency' => false,
        'accrual_method' => false,
        'income_currency' => false,
        'maturity_date' => false,
        'call_price' => false,
        'id' => false,
        'issue_date' => false,
        'sector' => false,
        'agency_factor' => false,
        'interest_rate' => false,
        'last_modified_date' => false,
        'gics_sector' => false,
        'closed_flag' => false,
        'sedol' => false,
        'sub_sector' => false,
        'last_coupon_date' => false,
        'is_synthetic_security' => false,
        'trade_currency_code' => false,
        'is_dummy_security' => false,
        'moody_rating' => false,
        'style' => false,
        'firm_eligible' => false,
        'fund_family' => false,
        'isin' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_exchange_details' => 'stockExchangeDetails',
        'issue_type_multiplier' => 'issueTypeMultiplier',
        'state_taxable' => 'stateTaxable',
        'call_date' => 'callDate',
        'cdsc_fund_flag' => 'cdscFundFlag',
        'cusip' => 'cusip',
        'federal_taxable' => 'federalTaxable',
        's_and_p_rating' => 'sAndPRating',
        'share_class' => 'shareClass',
        'is_envestnet_dummy_security' => 'isEnvestnetDummySecurity',
        'description' => 'description',
        'minimum_purchase' => 'minimumPurchase',
        'type' => 'type',
        'first_coupon_date' => 'firstCouponDate',
        'frequency' => 'frequency',
        'accrual_method' => 'accrualMethod',
        'income_currency' => 'incomeCurrency',
        'maturity_date' => 'maturityDate',
        'call_price' => 'callPrice',
        'id' => 'id',
        'issue_date' => 'issueDate',
        'sector' => 'sector',
        'agency_factor' => 'agencyFactor',
        'interest_rate' => 'interestRate',
        'last_modified_date' => 'lastModifiedDate',
        'gics_sector' => 'gicsSector',
        'closed_flag' => 'closedFlag',
        'sedol' => 'sedol',
        'sub_sector' => 'subSector',
        'last_coupon_date' => 'lastCouponDate',
        'is_synthetic_security' => 'isSyntheticSecurity',
        'trade_currency_code' => 'tradeCurrencyCode',
        'is_dummy_security' => 'isDummySecurity',
        'moody_rating' => 'moodyRating',
        'style' => 'style',
        'firm_eligible' => 'firmEligible',
        'fund_family' => 'fundFamily',
        'isin' => 'isin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock_exchange_details' => 'setStockExchangeDetails',
        'issue_type_multiplier' => 'setIssueTypeMultiplier',
        'state_taxable' => 'setStateTaxable',
        'call_date' => 'setCallDate',
        'cdsc_fund_flag' => 'setCdscFundFlag',
        'cusip' => 'setCusip',
        'federal_taxable' => 'setFederalTaxable',
        's_and_p_rating' => 'setSAndPRating',
        'share_class' => 'setShareClass',
        'is_envestnet_dummy_security' => 'setIsEnvestnetDummySecurity',
        'description' => 'setDescription',
        'minimum_purchase' => 'setMinimumPurchase',
        'type' => 'setType',
        'first_coupon_date' => 'setFirstCouponDate',
        'frequency' => 'setFrequency',
        'accrual_method' => 'setAccrualMethod',
        'income_currency' => 'setIncomeCurrency',
        'maturity_date' => 'setMaturityDate',
        'call_price' => 'setCallPrice',
        'id' => 'setId',
        'issue_date' => 'setIssueDate',
        'sector' => 'setSector',
        'agency_factor' => 'setAgencyFactor',
        'interest_rate' => 'setInterestRate',
        'last_modified_date' => 'setLastModifiedDate',
        'gics_sector' => 'setGicsSector',
        'closed_flag' => 'setClosedFlag',
        'sedol' => 'setSedol',
        'sub_sector' => 'setSubSector',
        'last_coupon_date' => 'setLastCouponDate',
        'is_synthetic_security' => 'setIsSyntheticSecurity',
        'trade_currency_code' => 'setTradeCurrencyCode',
        'is_dummy_security' => 'setIsDummySecurity',
        'moody_rating' => 'setMoodyRating',
        'style' => 'setStyle',
        'firm_eligible' => 'setFirmEligible',
        'fund_family' => 'setFundFamily',
        'isin' => 'setIsin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock_exchange_details' => 'getStockExchangeDetails',
        'issue_type_multiplier' => 'getIssueTypeMultiplier',
        'state_taxable' => 'getStateTaxable',
        'call_date' => 'getCallDate',
        'cdsc_fund_flag' => 'getCdscFundFlag',
        'cusip' => 'getCusip',
        'federal_taxable' => 'getFederalTaxable',
        's_and_p_rating' => 'getSAndPRating',
        'share_class' => 'getShareClass',
        'is_envestnet_dummy_security' => 'getIsEnvestnetDummySecurity',
        'description' => 'getDescription',
        'minimum_purchase' => 'getMinimumPurchase',
        'type' => 'getType',
        'first_coupon_date' => 'getFirstCouponDate',
        'frequency' => 'getFrequency',
        'accrual_method' => 'getAccrualMethod',
        'income_currency' => 'getIncomeCurrency',
        'maturity_date' => 'getMaturityDate',
        'call_price' => 'getCallPrice',
        'id' => 'getId',
        'issue_date' => 'getIssueDate',
        'sector' => 'getSector',
        'agency_factor' => 'getAgencyFactor',
        'interest_rate' => 'getInterestRate',
        'last_modified_date' => 'getLastModifiedDate',
        'gics_sector' => 'getGicsSector',
        'closed_flag' => 'getClosedFlag',
        'sedol' => 'getSedol',
        'sub_sector' => 'getSubSector',
        'last_coupon_date' => 'getLastCouponDate',
        'is_synthetic_security' => 'getIsSyntheticSecurity',
        'trade_currency_code' => 'getTradeCurrencyCode',
        'is_dummy_security' => 'getIsDummySecurity',
        'moody_rating' => 'getMoodyRating',
        'style' => 'getStyle',
        'firm_eligible' => 'getFirmEligible',
        'fund_family' => 'getFundFamily',
        'isin' => 'getIsin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('stock_exchange_details', $data ?? [], null);
        $this->setIfExists('issue_type_multiplier', $data ?? [], null);
        $this->setIfExists('state_taxable', $data ?? [], null);
        $this->setIfExists('call_date', $data ?? [], null);
        $this->setIfExists('cdsc_fund_flag', $data ?? [], null);
        $this->setIfExists('cusip', $data ?? [], null);
        $this->setIfExists('federal_taxable', $data ?? [], null);
        $this->setIfExists('s_and_p_rating', $data ?? [], null);
        $this->setIfExists('share_class', $data ?? [], null);
        $this->setIfExists('is_envestnet_dummy_security', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('minimum_purchase', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('first_coupon_date', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('accrual_method', $data ?? [], null);
        $this->setIfExists('income_currency', $data ?? [], null);
        $this->setIfExists('maturity_date', $data ?? [], null);
        $this->setIfExists('call_price', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('issue_date', $data ?? [], null);
        $this->setIfExists('sector', $data ?? [], null);
        $this->setIfExists('agency_factor', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('gics_sector', $data ?? [], null);
        $this->setIfExists('closed_flag', $data ?? [], null);
        $this->setIfExists('sedol', $data ?? [], null);
        $this->setIfExists('sub_sector', $data ?? [], null);
        $this->setIfExists('last_coupon_date', $data ?? [], null);
        $this->setIfExists('is_synthetic_security', $data ?? [], null);
        $this->setIfExists('trade_currency_code', $data ?? [], null);
        $this->setIfExists('is_dummy_security', $data ?? [], null);
        $this->setIfExists('moody_rating', $data ?? [], null);
        $this->setIfExists('style', $data ?? [], null);
        $this->setIfExists('firm_eligible', $data ?? [], null);
        $this->setIfExists('fund_family', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stock_exchange_details
     *
     * @return \OpenAPI\Client\Model\StockExchangeDetail[]|null
     */
    public function getStockExchangeDetails()
    {
        return $this->container['stock_exchange_details'];
    }

    /**
     * Sets stock_exchange_details
     *
     * @param \OpenAPI\Client\Model\StockExchangeDetail[]|null $stock_exchange_details Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setStockExchangeDetails($stock_exchange_details)
    {
        if (is_null($stock_exchange_details)) {
            throw new \InvalidArgumentException('non-nullable stock_exchange_details cannot be null');
        }
        $this->container['stock_exchange_details'] = $stock_exchange_details;

        return $this;
    }

    /**
     * Gets issue_type_multiplier
     *
     * @return float|null
     */
    public function getIssueTypeMultiplier()
    {
        return $this->container['issue_type_multiplier'];
    }

    /**
     * Sets issue_type_multiplier
     *
     * @param float|null $issue_type_multiplier Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIssueTypeMultiplier($issue_type_multiplier)
    {
        if (is_null($issue_type_multiplier)) {
            throw new \InvalidArgumentException('non-nullable issue_type_multiplier cannot be null');
        }
        $this->container['issue_type_multiplier'] = $issue_type_multiplier;

        return $this;
    }

    /**
     * Gets state_taxable
     *
     * @return bool|null
     */
    public function getStateTaxable()
    {
        return $this->container['state_taxable'];
    }

    /**
     * Sets state_taxable
     *
     * @param bool|null $state_taxable Flag indicating state taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setStateTaxable($state_taxable)
    {
        if (is_null($state_taxable)) {
            throw new \InvalidArgumentException('non-nullable state_taxable cannot be null');
        }
        $this->container['state_taxable'] = $state_taxable;

        return $this;
    }

    /**
     * Gets call_date
     *
     * @return string|null
     */
    public function getCallDate()
    {
        return $this->container['call_date'];
    }

    /**
     * Sets call_date
     *
     * @param string|null $call_date Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setCallDate($call_date)
    {
        if (is_null($call_date)) {
            throw new \InvalidArgumentException('non-nullable call_date cannot be null');
        }
        $this->container['call_date'] = $call_date;

        return $this;
    }

    /**
     * Gets cdsc_fund_flag
     *
     * @return bool|null
     */
    public function getCdscFundFlag()
    {
        return $this->container['cdsc_fund_flag'];
    }

    /**
     * Sets cdsc_fund_flag
     *
     * @param bool|null $cdsc_fund_flag cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setCdscFundFlag($cdsc_fund_flag)
    {
        if (is_null($cdsc_fund_flag)) {
            throw new \InvalidArgumentException('non-nullable cdsc_fund_flag cannot be null');
        }
        $this->container['cdsc_fund_flag'] = $cdsc_fund_flag;

        return $this;
    }

    /**
     * Gets cusip
     *
     * @return string|null
     */
    public function getCusip()
    {
        return $this->container['cusip'];
    }

    /**
     * Sets cusip
     *
     * @param string|null $cusip A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setCusip($cusip)
    {
        if (is_null($cusip)) {
            throw new \InvalidArgumentException('non-nullable cusip cannot be null');
        }
        $this->container['cusip'] = $cusip;

        return $this;
    }

    /**
     * Gets federal_taxable
     *
     * @return bool|null
     */
    public function getFederalTaxable()
    {
        return $this->container['federal_taxable'];
    }

    /**
     * Sets federal_taxable
     *
     * @param bool|null $federal_taxable Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setFederalTaxable($federal_taxable)
    {
        if (is_null($federal_taxable)) {
            throw new \InvalidArgumentException('non-nullable federal_taxable cannot be null');
        }
        $this->container['federal_taxable'] = $federal_taxable;

        return $this;
    }

    /**
     * Gets s_and_p_rating
     *
     * @return string|null
     */
    public function getSAndPRating()
    {
        return $this->container['s_and_p_rating'];
    }

    /**
     * Sets s_and_p_rating
     *
     * @param string|null $s_and_p_rating Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSAndPRating($s_and_p_rating)
    {
        if (is_null($s_and_p_rating)) {
            throw new \InvalidArgumentException('non-nullable s_and_p_rating cannot be null');
        }
        $this->container['s_and_p_rating'] = $s_and_p_rating;

        return $this;
    }

    /**
     * Gets share_class
     *
     * @return string|null
     */
    public function getShareClass()
    {
        return $this->container['share_class'];
    }

    /**
     * Sets share_class
     *
     * @param string|null $share_class Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setShareClass($share_class)
    {
        if (is_null($share_class)) {
            throw new \InvalidArgumentException('non-nullable share_class cannot be null');
        }
        $this->container['share_class'] = $share_class;

        return $this;
    }

    /**
     * Gets is_envestnet_dummy_security
     *
     * @return bool|null
     */
    public function getIsEnvestnetDummySecurity()
    {
        return $this->container['is_envestnet_dummy_security'];
    }

    /**
     * Sets is_envestnet_dummy_security
     *
     * @param bool|null $is_envestnet_dummy_security Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIsEnvestnetDummySecurity($is_envestnet_dummy_security)
    {
        if (is_null($is_envestnet_dummy_security)) {
            throw new \InvalidArgumentException('non-nullable is_envestnet_dummy_security cannot be null');
        }
        $this->container['is_envestnet_dummy_security'] = $is_envestnet_dummy_security;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets minimum_purchase
     *
     * @return int|null
     */
    public function getMinimumPurchase()
    {
        return $this->container['minimum_purchase'];
    }

    /**
     * Sets minimum_purchase
     *
     * @param int|null $minimum_purchase Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setMinimumPurchase($minimum_purchase)
    {
        if (is_null($minimum_purchase)) {
            throw new \InvalidArgumentException('non-nullable minimum_purchase cannot be null');
        }
        $this->container['minimum_purchase'] = $minimum_purchase;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets first_coupon_date
     *
     * @return string|null
     */
    public function getFirstCouponDate()
    {
        return $this->container['first_coupon_date'];
    }

    /**
     * Sets first_coupon_date
     *
     * @param string|null $first_coupon_date First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setFirstCouponDate($first_coupon_date)
    {
        if (is_null($first_coupon_date)) {
            throw new \InvalidArgumentException('non-nullable first_coupon_date cannot be null');
        }
        $this->container['first_coupon_date'] = $first_coupon_date;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int|null $frequency Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets accrual_method
     *
     * @return string|null
     */
    public function getAccrualMethod()
    {
        return $this->container['accrual_method'];
    }

    /**
     * Sets accrual_method
     *
     * @param string|null $accrual_method The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setAccrualMethod($accrual_method)
    {
        if (is_null($accrual_method)) {
            throw new \InvalidArgumentException('non-nullable accrual_method cannot be null');
        }
        $this->container['accrual_method'] = $accrual_method;

        return $this;
    }

    /**
     * Gets income_currency
     *
     * @return string|null
     */
    public function getIncomeCurrency()
    {
        return $this->container['income_currency'];
    }

    /**
     * Sets income_currency
     *
     * @param string|null $income_currency ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIncomeCurrency($income_currency)
    {
        if (is_null($income_currency)) {
            throw new \InvalidArgumentException('non-nullable income_currency cannot be null');
        }
        $this->container['income_currency'] = $income_currency;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return string|null
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param string|null $maturity_date Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setMaturityDate($maturity_date)
    {
        if (is_null($maturity_date)) {
            throw new \InvalidArgumentException('non-nullable maturity_date cannot be null');
        }
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets call_price
     *
     * @return float|null
     */
    public function getCallPrice()
    {
        return $this->container['call_price'];
    }

    /**
     * Sets call_price
     *
     * @param float|null $call_price Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setCallPrice($call_price)
    {
        if (is_null($call_price)) {
            throw new \InvalidArgumentException('non-nullable call_price cannot be null');
        }
        $this->container['call_price'] = $call_price;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param string|null $issue_date Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {
        if (is_null($issue_date)) {
            throw new \InvalidArgumentException('non-nullable issue_date cannot be null');
        }
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets sector
     *
     * @return string|null
     */
    public function getSector()
    {
        return $this->container['sector'];
    }

    /**
     * Sets sector
     *
     * @param string|null $sector Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSector($sector)
    {
        if (is_null($sector)) {
            throw new \InvalidArgumentException('non-nullable sector cannot be null');
        }
        $this->container['sector'] = $sector;

        return $this;
    }

    /**
     * Gets agency_factor
     *
     * @return float|null
     */
    public function getAgencyFactor()
    {
        return $this->container['agency_factor'];
    }

    /**
     * Sets agency_factor
     *
     * @param float|null $agency_factor Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setAgencyFactor($agency_factor)
    {
        if (is_null($agency_factor)) {
            throw new \InvalidArgumentException('non-nullable agency_factor cannot be null');
        }
        $this->container['agency_factor'] = $agency_factor;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return string|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param string|null $last_modified_date The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets gics_sector
     *
     * @return string|null
     */
    public function getGicsSector()
    {
        return $this->container['gics_sector'];
    }

    /**
     * Sets gics_sector
     *
     * @param string|null $gics_sector GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setGicsSector($gics_sector)
    {
        if (is_null($gics_sector)) {
            throw new \InvalidArgumentException('non-nullable gics_sector cannot be null');
        }
        $this->container['gics_sector'] = $gics_sector;

        return $this;
    }

    /**
     * Gets closed_flag
     *
     * @return bool|null
     */
    public function getClosedFlag()
    {
        return $this->container['closed_flag'];
    }

    /**
     * Sets closed_flag
     *
     * @param bool|null $closed_flag <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setClosedFlag($closed_flag)
    {
        if (is_null($closed_flag)) {
            throw new \InvalidArgumentException('non-nullable closed_flag cannot be null');
        }
        $this->container['closed_flag'] = $closed_flag;

        return $this;
    }

    /**
     * Gets sedol
     *
     * @return string|null
     */
    public function getSedol()
    {
        return $this->container['sedol'];
    }

    /**
     * Sets sedol
     *
     * @param string|null $sedol The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSedol($sedol)
    {
        if (is_null($sedol)) {
            throw new \InvalidArgumentException('non-nullable sedol cannot be null');
        }
        $this->container['sedol'] = $sedol;

        return $this;
    }

    /**
     * Gets sub_sector
     *
     * @return string|null
     */
    public function getSubSector()
    {
        return $this->container['sub_sector'];
    }

    /**
     * Sets sub_sector
     *
     * @param string|null $sub_sector GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setSubSector($sub_sector)
    {
        if (is_null($sub_sector)) {
            throw new \InvalidArgumentException('non-nullable sub_sector cannot be null');
        }
        $this->container['sub_sector'] = $sub_sector;

        return $this;
    }

    /**
     * Gets last_coupon_date
     *
     * @return string|null
     */
    public function getLastCouponDate()
    {
        return $this->container['last_coupon_date'];
    }

    /**
     * Sets last_coupon_date
     *
     * @param string|null $last_coupon_date Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setLastCouponDate($last_coupon_date)
    {
        if (is_null($last_coupon_date)) {
            throw new \InvalidArgumentException('non-nullable last_coupon_date cannot be null');
        }
        $this->container['last_coupon_date'] = $last_coupon_date;

        return $this;
    }

    /**
     * Gets is_synthetic_security
     *
     * @return bool|null
     */
    public function getIsSyntheticSecurity()
    {
        return $this->container['is_synthetic_security'];
    }

    /**
     * Sets is_synthetic_security
     *
     * @param bool|null $is_synthetic_security Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIsSyntheticSecurity($is_synthetic_security)
    {
        if (is_null($is_synthetic_security)) {
            throw new \InvalidArgumentException('non-nullable is_synthetic_security cannot be null');
        }
        $this->container['is_synthetic_security'] = $is_synthetic_security;

        return $this;
    }

    /**
     * Gets trade_currency_code
     *
     * @return string|null
     */
    public function getTradeCurrencyCode()
    {
        return $this->container['trade_currency_code'];
    }

    /**
     * Sets trade_currency_code
     *
     * @param string|null $trade_currency_code ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setTradeCurrencyCode($trade_currency_code)
    {
        if (is_null($trade_currency_code)) {
            throw new \InvalidArgumentException('non-nullable trade_currency_code cannot be null');
        }
        $this->container['trade_currency_code'] = $trade_currency_code;

        return $this;
    }

    /**
     * Gets is_dummy_security
     *
     * @return bool|null
     */
    public function getIsDummySecurity()
    {
        return $this->container['is_dummy_security'];
    }

    /**
     * Sets is_dummy_security
     *
     * @param bool|null $is_dummy_security Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIsDummySecurity($is_dummy_security)
    {
        if (is_null($is_dummy_security)) {
            throw new \InvalidArgumentException('non-nullable is_dummy_security cannot be null');
        }
        $this->container['is_dummy_security'] = $is_dummy_security;

        return $this;
    }

    /**
     * Gets moody_rating
     *
     * @return string|null
     */
    public function getMoodyRating()
    {
        return $this->container['moody_rating'];
    }

    /**
     * Sets moody_rating
     *
     * @param string|null $moody_rating Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setMoodyRating($moody_rating)
    {
        if (is_null($moody_rating)) {
            throw new \InvalidArgumentException('non-nullable moody_rating cannot be null');
        }
        $this->container['moody_rating'] = $moody_rating;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setStyle($style)
    {
        if (is_null($style)) {
            throw new \InvalidArgumentException('non-nullable style cannot be null');
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets firm_eligible
     *
     * @return string|null
     */
    public function getFirmEligible()
    {
        return $this->container['firm_eligible'];
    }

    /**
     * Sets firm_eligible
     *
     * @param string|null $firm_eligible <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setFirmEligible($firm_eligible)
    {
        if (is_null($firm_eligible)) {
            throw new \InvalidArgumentException('non-nullable firm_eligible cannot be null');
        }
        $this->container['firm_eligible'] = $firm_eligible;

        return $this;
    }

    /**
     * Gets fund_family
     *
     * @return string|null
     */
    public function getFundFamily()
    {
        return $this->container['fund_family'];
    }

    /**
     * Sets fund_family
     *
     * @param string|null $fund_family Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setFundFamily($fund_family)
    {
        if (is_null($fund_family)) {
            throw new \InvalidArgumentException('non-nullable fund_family cannot be null');
        }
        $this->container['fund_family'] = $fund_family;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string|null
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string|null $isin The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }
        $this->container['isin'] = $isin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


