<?php
/**
 * TransactionWithDateTime
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionWithDateTime Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionWithDateTime implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionWithDateTime';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => 'string',
        'source_id' => 'string',
        'symbol' => 'string',
        'cusip_number' => 'string',
        'source_apca_number' => 'string',
        'high_level_category_id' => 'int',
        'memo' => 'string',
        'type' => 'string',
        'intermediary' => 'string[]',
        'frequency' => 'string',
        'last_updated' => 'string',
        'price' => '\OpenAPI\Client\Model\Money',
        'source_merchant_category_code' => 'string',
        'id' => 'int',
        'check_number' => 'string',
        'transaction_date_time' => 'string',
        'type_at_source' => 'string',
        'valoren' => 'string',
        'is_manual' => 'bool',
        'source_biller_name' => 'string',
        'merchant' => '\OpenAPI\Client\Model\Merchant',
        'sedol' => 'string',
        'category_type' => 'string',
        'account_id' => 'int',
        'source_type' => 'string',
        'sub_type' => 'string',
        'holding_description' => 'string',
        'status' => 'string',
        'detail_category_id' => 'int',
        'description' => '\OpenAPI\Client\Model\Description',
        'settle_date' => 'string',
        'post_date_time' => 'string',
        'base_type' => 'string',
        'category_source' => 'string',
        'principal' => '\OpenAPI\Client\Model\Money',
        'source_biller_code' => 'string',
        'interest' => '\OpenAPI\Client\Model\Money',
        'commission' => '\OpenAPI\Client\Model\Money',
        'merchant_type' => 'string',
        'amount' => '\OpenAPI\Client\Model\Money',
        'is_physical' => 'bool',
        'quantity' => 'float',
        'is_recurring' => 'string',
        'transaction_date' => 'string',
        'created_date' => 'string',
        'container' => 'string',
        'business_category' => '\OpenAPI\Client\Model\BusinessCategory',
        'post_date' => 'string',
        'parent_category_id' => 'int',
        'category' => 'string',
        'running_balance' => '\OpenAPI\Client\Model\Money',
        'category_id' => 'int',
        'isin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => null,
        'source_id' => null,
        'symbol' => null,
        'cusip_number' => null,
        'source_apca_number' => null,
        'high_level_category_id' => 'int64',
        'memo' => null,
        'type' => null,
        'intermediary' => null,
        'frequency' => null,
        'last_updated' => null,
        'price' => null,
        'source_merchant_category_code' => null,
        'id' => 'int64',
        'check_number' => null,
        'transaction_date_time' => null,
        'type_at_source' => null,
        'valoren' => null,
        'is_manual' => null,
        'source_biller_name' => null,
        'merchant' => null,
        'sedol' => null,
        'category_type' => null,
        'account_id' => 'int64',
        'source_type' => null,
        'sub_type' => null,
        'holding_description' => null,
        'status' => null,
        'detail_category_id' => 'int64',
        'description' => null,
        'settle_date' => null,
        'post_date_time' => null,
        'base_type' => null,
        'category_source' => null,
        'principal' => null,
        'source_biller_code' => null,
        'interest' => null,
        'commission' => null,
        'merchant_type' => null,
        'amount' => null,
        'is_physical' => null,
        'quantity' => 'double',
        'is_recurring' => null,
        'transaction_date' => null,
        'created_date' => null,
        'container' => null,
        'business_category' => null,
        'post_date' => null,
        'parent_category_id' => 'int64',
        'category' => null,
        'running_balance' => null,
        'category_id' => 'int64',
        'isin' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date' => false,
        'source_id' => false,
        'symbol' => false,
        'cusip_number' => false,
        'source_apca_number' => false,
        'high_level_category_id' => false,
        'memo' => false,
        'type' => false,
        'intermediary' => false,
        'frequency' => false,
        'last_updated' => false,
        'price' => false,
        'source_merchant_category_code' => false,
        'id' => false,
        'check_number' => false,
        'transaction_date_time' => false,
        'type_at_source' => false,
        'valoren' => false,
        'is_manual' => false,
        'source_biller_name' => false,
        'merchant' => false,
        'sedol' => false,
        'category_type' => false,
        'account_id' => false,
        'source_type' => false,
        'sub_type' => false,
        'holding_description' => false,
        'status' => false,
        'detail_category_id' => false,
        'description' => false,
        'settle_date' => false,
        'post_date_time' => false,
        'base_type' => false,
        'category_source' => false,
        'principal' => false,
        'source_biller_code' => false,
        'interest' => false,
        'commission' => false,
        'merchant_type' => false,
        'amount' => false,
        'is_physical' => false,
        'quantity' => false,
        'is_recurring' => false,
        'transaction_date' => false,
        'created_date' => false,
        'container' => false,
        'business_category' => false,
        'post_date' => false,
        'parent_category_id' => false,
        'category' => false,
        'running_balance' => false,
        'category_id' => false,
        'isin' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'source_id' => 'sourceId',
        'symbol' => 'symbol',
        'cusip_number' => 'cusipNumber',
        'source_apca_number' => 'sourceApcaNumber',
        'high_level_category_id' => 'highLevelCategoryId',
        'memo' => 'memo',
        'type' => 'type',
        'intermediary' => 'intermediary',
        'frequency' => 'frequency',
        'last_updated' => 'lastUpdated',
        'price' => 'price',
        'source_merchant_category_code' => 'sourceMerchantCategoryCode',
        'id' => 'id',
        'check_number' => 'checkNumber',
        'transaction_date_time' => 'transactionDateTime',
        'type_at_source' => 'typeAtSource',
        'valoren' => 'valoren',
        'is_manual' => 'isManual',
        'source_biller_name' => 'sourceBillerName',
        'merchant' => 'merchant',
        'sedol' => 'sedol',
        'category_type' => 'categoryType',
        'account_id' => 'accountId',
        'source_type' => 'sourceType',
        'sub_type' => 'subType',
        'holding_description' => 'holdingDescription',
        'status' => 'status',
        'detail_category_id' => 'detailCategoryId',
        'description' => 'description',
        'settle_date' => 'settleDate',
        'post_date_time' => 'postDateTime',
        'base_type' => 'baseType',
        'category_source' => 'categorySource',
        'principal' => 'principal',
        'source_biller_code' => 'sourceBillerCode',
        'interest' => 'interest',
        'commission' => 'commission',
        'merchant_type' => 'merchantType',
        'amount' => 'amount',
        'is_physical' => 'isPhysical',
        'quantity' => 'quantity',
        'is_recurring' => 'isRecurring',
        'transaction_date' => 'transactionDate',
        'created_date' => 'createdDate',
        'container' => 'CONTAINER',
        'business_category' => 'businessCategory',
        'post_date' => 'postDate',
        'parent_category_id' => 'parentCategoryId',
        'category' => 'category',
        'running_balance' => 'runningBalance',
        'category_id' => 'categoryId',
        'isin' => 'isin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'source_id' => 'setSourceId',
        'symbol' => 'setSymbol',
        'cusip_number' => 'setCusipNumber',
        'source_apca_number' => 'setSourceApcaNumber',
        'high_level_category_id' => 'setHighLevelCategoryId',
        'memo' => 'setMemo',
        'type' => 'setType',
        'intermediary' => 'setIntermediary',
        'frequency' => 'setFrequency',
        'last_updated' => 'setLastUpdated',
        'price' => 'setPrice',
        'source_merchant_category_code' => 'setSourceMerchantCategoryCode',
        'id' => 'setId',
        'check_number' => 'setCheckNumber',
        'transaction_date_time' => 'setTransactionDateTime',
        'type_at_source' => 'setTypeAtSource',
        'valoren' => 'setValoren',
        'is_manual' => 'setIsManual',
        'source_biller_name' => 'setSourceBillerName',
        'merchant' => 'setMerchant',
        'sedol' => 'setSedol',
        'category_type' => 'setCategoryType',
        'account_id' => 'setAccountId',
        'source_type' => 'setSourceType',
        'sub_type' => 'setSubType',
        'holding_description' => 'setHoldingDescription',
        'status' => 'setStatus',
        'detail_category_id' => 'setDetailCategoryId',
        'description' => 'setDescription',
        'settle_date' => 'setSettleDate',
        'post_date_time' => 'setPostDateTime',
        'base_type' => 'setBaseType',
        'category_source' => 'setCategorySource',
        'principal' => 'setPrincipal',
        'source_biller_code' => 'setSourceBillerCode',
        'interest' => 'setInterest',
        'commission' => 'setCommission',
        'merchant_type' => 'setMerchantType',
        'amount' => 'setAmount',
        'is_physical' => 'setIsPhysical',
        'quantity' => 'setQuantity',
        'is_recurring' => 'setIsRecurring',
        'transaction_date' => 'setTransactionDate',
        'created_date' => 'setCreatedDate',
        'container' => 'setContainer',
        'business_category' => 'setBusinessCategory',
        'post_date' => 'setPostDate',
        'parent_category_id' => 'setParentCategoryId',
        'category' => 'setCategory',
        'running_balance' => 'setRunningBalance',
        'category_id' => 'setCategoryId',
        'isin' => 'setIsin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'source_id' => 'getSourceId',
        'symbol' => 'getSymbol',
        'cusip_number' => 'getCusipNumber',
        'source_apca_number' => 'getSourceApcaNumber',
        'high_level_category_id' => 'getHighLevelCategoryId',
        'memo' => 'getMemo',
        'type' => 'getType',
        'intermediary' => 'getIntermediary',
        'frequency' => 'getFrequency',
        'last_updated' => 'getLastUpdated',
        'price' => 'getPrice',
        'source_merchant_category_code' => 'getSourceMerchantCategoryCode',
        'id' => 'getId',
        'check_number' => 'getCheckNumber',
        'transaction_date_time' => 'getTransactionDateTime',
        'type_at_source' => 'getTypeAtSource',
        'valoren' => 'getValoren',
        'is_manual' => 'getIsManual',
        'source_biller_name' => 'getSourceBillerName',
        'merchant' => 'getMerchant',
        'sedol' => 'getSedol',
        'category_type' => 'getCategoryType',
        'account_id' => 'getAccountId',
        'source_type' => 'getSourceType',
        'sub_type' => 'getSubType',
        'holding_description' => 'getHoldingDescription',
        'status' => 'getStatus',
        'detail_category_id' => 'getDetailCategoryId',
        'description' => 'getDescription',
        'settle_date' => 'getSettleDate',
        'post_date_time' => 'getPostDateTime',
        'base_type' => 'getBaseType',
        'category_source' => 'getCategorySource',
        'principal' => 'getPrincipal',
        'source_biller_code' => 'getSourceBillerCode',
        'interest' => 'getInterest',
        'commission' => 'getCommission',
        'merchant_type' => 'getMerchantType',
        'amount' => 'getAmount',
        'is_physical' => 'getIsPhysical',
        'quantity' => 'getQuantity',
        'is_recurring' => 'getIsRecurring',
        'transaction_date' => 'getTransactionDate',
        'created_date' => 'getCreatedDate',
        'container' => 'getContainer',
        'business_category' => 'getBusinessCategory',
        'post_date' => 'getPostDate',
        'parent_category_id' => 'getParentCategoryId',
        'category' => 'getCategory',
        'running_balance' => 'getRunningBalance',
        'category_id' => 'getCategoryId',
        'isin' => 'getIsin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORY_TYPE_TRANSFER = 'TRANSFER';
    public const CATEGORY_TYPE_DEFERRED_COMPENSATION = 'DEFERRED_COMPENSATION';
    public const CATEGORY_TYPE_UNCATEGORIZE = 'UNCATEGORIZE';
    public const CATEGORY_TYPE_INCOME = 'INCOME';
    public const CATEGORY_TYPE_EXPENSE = 'EXPENSE';
    public const CATEGORY_TYPE_LOAN = 'LOAN';
    public const SOURCE_TYPE_AGGREGATED = 'AGGREGATED';
    public const SOURCE_TYPE_MANUAL = 'MANUAL';
    public const SUB_TYPE_OVERDRAFT_CHARGE = 'OVERDRAFT_CHARGE';
    public const SUB_TYPE_ONLINE_PURCHASE = 'ONLINE_PURCHASE';
    public const SUB_TYPE_TAX_PAYMENT = 'TAX_PAYMENT';
    public const SUB_TYPE_PAYMENT_BY_CHECK = 'PAYMENT_BY_CHECK';
    public const SUB_TYPE_ATM_CASH_WITHDRAWAL = 'ATM_CASH_WITHDRAWAL';
    public const SUB_TYPE_SERVICE_CHARGE = 'SERVICE_CHARGE';
    public const SUB_TYPE_RETURNED_CHECK_CHARGE = 'RETURNED_CHECK_CHARGE';
    public const SUB_TYPE_STOP_PAYMENT_CHARGE = 'STOP_PAYMENT_CHARGE';
    public const SUB_TYPE_CONVENIENCE_FEE = 'CONVENIENCE_FEE';
    public const SUB_TYPE_AUTO_LOAN = 'AUTO_LOAN';
    public const SUB_TYPE_HOME_LOAN_MORTGAGE = 'HOME_LOAN_MORTGAGE';
    public const SUB_TYPE_RECURRING_SUBSCRIPTION_PAYMENT = 'RECURRING_SUBSCRIPTION_PAYMENT';
    public const SUB_TYPE_INTEREST = 'INTEREST';
    public const SUB_TYPE_PAYMENT = 'PAYMENT';
    public const SUB_TYPE_PURCHASE = 'PURCHASE';
    public const SUB_TYPE_REFUND = 'REFUND';
    public const SUB_TYPE_TRANSFER = 'TRANSFER';
    public const SUB_TYPE_FINANCE_CHARGE = 'FINANCE_CHARGE';
    public const SUB_TYPE_OTHER_CHARGES_FEES = 'OTHER_CHARGES_FEES';
    public const SUB_TYPE_ANNUAL_FEE = 'ANNUAL_FEE';
    public const SUB_TYPE_DEPOSIT = 'DEPOSIT';
    public const SUB_TYPE_DIRECT_DEPOSIT_SALARY = 'DIRECT_DEPOSIT_SALARY';
    public const SUB_TYPE_INVESTMENT_INCOME_CASH = 'INVESTMENT_INCOME_CASH';
    public const SUB_TYPE_SSA = 'SSA';
    public const SUB_TYPE_REWARDS = 'REWARDS';
    public const SUB_TYPE_TAX_REFUND = 'TAX_REFUND';
    public const SUB_TYPE_CREDIT_CARD_PAYMENT = 'CREDIT_CARD_PAYMENT';
    public const SUB_TYPE_INSURANCE_PAYMENT = 'INSURANCE_PAYMENT';
    public const SUB_TYPE_UTILITIES_PAYMENT = 'UTILITIES_PAYMENT';
    public const SUB_TYPE_CHILD_SUPPORT = 'CHILD_SUPPORT';
    public const SUB_TYPE_LOAN = 'LOAN';
    public const SUB_TYPE_PERSONAL_LOAN = 'PERSONAL_LOAN';
    public const SUB_TYPE_STUDENT_LOAN = 'STUDENT_LOAN';
    public const SUB_TYPE_REIMBURSEMENT = 'REIMBURSEMENT';
    public const SUB_TYPE_BALANCE_TRANSFER = 'BALANCE_TRANSFER';
    public const SUB_TYPE_OVERDRAFT_PROTECTION = 'OVERDRAFT_PROTECTION';
    public const SUB_TYPE_CREDIT = 'CREDIT';
    public const SUB_TYPE_NSF_FEES = 'NSF_FEES';
    public const STATUS_POSTED = 'POSTED';
    public const STATUS_PENDING = 'PENDING';
    public const STATUS_SCHEDULED = 'SCHEDULED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_CLEARED = 'CLEARED';
    public const BASE_TYPE_CREDIT = 'CREDIT';
    public const BASE_TYPE_DEBIT = 'DEBIT';
    public const CATEGORY_SOURCE_SYSTEM = 'SYSTEM';
    public const CATEGORY_SOURCE_USER = 'USER';
    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_CREDIT_CARD = 'creditCard';
    public const CONTAINER_INVESTMENT = 'investment';
    public const CONTAINER_INSURANCE = 'insurance';
    public const CONTAINER_LOAN = 'loan';
    public const CONTAINER_REWARD = 'reward';
    public const CONTAINER_BILL = 'bill';
    public const CONTAINER_REAL_ESTATE = 'realEstate';
    public const CONTAINER_OTHER_ASSETS = 'otherAssets';
    public const CONTAINER_OTHER_LIABILITIES = 'otherLiabilities';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryTypeAllowableValues()
    {
        return [
            self::CATEGORY_TYPE_TRANSFER,
            self::CATEGORY_TYPE_DEFERRED_COMPENSATION,
            self::CATEGORY_TYPE_UNCATEGORIZE,
            self::CATEGORY_TYPE_INCOME,
            self::CATEGORY_TYPE_EXPENSE,
            self::CATEGORY_TYPE_LOAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceTypeAllowableValues()
    {
        return [
            self::SOURCE_TYPE_AGGREGATED,
            self::SOURCE_TYPE_MANUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubTypeAllowableValues()
    {
        return [
            self::SUB_TYPE_OVERDRAFT_CHARGE,
            self::SUB_TYPE_ONLINE_PURCHASE,
            self::SUB_TYPE_TAX_PAYMENT,
            self::SUB_TYPE_PAYMENT_BY_CHECK,
            self::SUB_TYPE_ATM_CASH_WITHDRAWAL,
            self::SUB_TYPE_SERVICE_CHARGE,
            self::SUB_TYPE_RETURNED_CHECK_CHARGE,
            self::SUB_TYPE_STOP_PAYMENT_CHARGE,
            self::SUB_TYPE_CONVENIENCE_FEE,
            self::SUB_TYPE_AUTO_LOAN,
            self::SUB_TYPE_HOME_LOAN_MORTGAGE,
            self::SUB_TYPE_RECURRING_SUBSCRIPTION_PAYMENT,
            self::SUB_TYPE_INTEREST,
            self::SUB_TYPE_PAYMENT,
            self::SUB_TYPE_PURCHASE,
            self::SUB_TYPE_REFUND,
            self::SUB_TYPE_TRANSFER,
            self::SUB_TYPE_FINANCE_CHARGE,
            self::SUB_TYPE_OTHER_CHARGES_FEES,
            self::SUB_TYPE_ANNUAL_FEE,
            self::SUB_TYPE_DEPOSIT,
            self::SUB_TYPE_DIRECT_DEPOSIT_SALARY,
            self::SUB_TYPE_INVESTMENT_INCOME_CASH,
            self::SUB_TYPE_SSA,
            self::SUB_TYPE_REWARDS,
            self::SUB_TYPE_TAX_REFUND,
            self::SUB_TYPE_CREDIT_CARD_PAYMENT,
            self::SUB_TYPE_INSURANCE_PAYMENT,
            self::SUB_TYPE_UTILITIES_PAYMENT,
            self::SUB_TYPE_CHILD_SUPPORT,
            self::SUB_TYPE_LOAN,
            self::SUB_TYPE_PERSONAL_LOAN,
            self::SUB_TYPE_STUDENT_LOAN,
            self::SUB_TYPE_REIMBURSEMENT,
            self::SUB_TYPE_BALANCE_TRANSFER,
            self::SUB_TYPE_OVERDRAFT_PROTECTION,
            self::SUB_TYPE_CREDIT,
            self::SUB_TYPE_NSF_FEES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_POSTED,
            self::STATUS_PENDING,
            self::STATUS_SCHEDULED,
            self::STATUS_FAILED,
            self::STATUS_CLEARED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBaseTypeAllowableValues()
    {
        return [
            self::BASE_TYPE_CREDIT,
            self::BASE_TYPE_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategorySourceAllowableValues()
    {
        return [
            self::CATEGORY_SOURCE_SYSTEM,
            self::CATEGORY_SOURCE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_CREDIT_CARD,
            self::CONTAINER_INVESTMENT,
            self::CONTAINER_INSURANCE,
            self::CONTAINER_LOAN,
            self::CONTAINER_REWARD,
            self::CONTAINER_BILL,
            self::CONTAINER_REAL_ESTATE,
            self::CONTAINER_OTHER_ASSETS,
            self::CONTAINER_OTHER_LIABILITIES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('cusip_number', $data ?? [], null);
        $this->setIfExists('source_apca_number', $data ?? [], null);
        $this->setIfExists('high_level_category_id', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('intermediary', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('source_merchant_category_code', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('check_number', $data ?? [], null);
        $this->setIfExists('transaction_date_time', $data ?? [], null);
        $this->setIfExists('type_at_source', $data ?? [], null);
        $this->setIfExists('valoren', $data ?? [], null);
        $this->setIfExists('is_manual', $data ?? [], null);
        $this->setIfExists('source_biller_name', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('sedol', $data ?? [], null);
        $this->setIfExists('category_type', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('source_type', $data ?? [], null);
        $this->setIfExists('sub_type', $data ?? [], null);
        $this->setIfExists('holding_description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('detail_category_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('settle_date', $data ?? [], null);
        $this->setIfExists('post_date_time', $data ?? [], null);
        $this->setIfExists('base_type', $data ?? [], null);
        $this->setIfExists('category_source', $data ?? [], null);
        $this->setIfExists('principal', $data ?? [], null);
        $this->setIfExists('source_biller_code', $data ?? [], null);
        $this->setIfExists('interest', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('merchant_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('is_physical', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('is_recurring', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('business_category', $data ?? [], null);
        $this->setIfExists('post_date', $data ?? [], null);
        $this->setIfExists('parent_category_id', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('running_balance', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!is_null($this->container['category_type']) && !in_array($this->container['category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category_type', must be one of '%s'",
                $this->container['category_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!is_null($this->container['source_type']) && !in_array($this->container['source_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_type', must be one of '%s'",
                $this->container['source_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubTypeAllowableValues();
        if (!is_null($this->container['sub_type']) && !in_array($this->container['sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sub_type', must be one of '%s'",
                $this->container['sub_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBaseTypeAllowableValues();
        if (!is_null($this->container['base_type']) && !in_array($this->container['base_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'base_type', must be one of '%s'",
                $this->container['base_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategorySourceAllowableValues();
        if (!is_null($this->container['category_source']) && !in_array($this->container['category_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category_source', must be one of '%s'",
                $this->container['category_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContainerAllowableValues();
        if (!is_null($this->container['container']) && !in_array($this->container['container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container', must be one of '%s'",
                $this->container['container'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string|null $source_id A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets cusip_number
     *
     * @return string|null
     */
    public function getCusipNumber()
    {
        return $this->container['cusip_number'];
    }

    /**
     * Sets cusip_number
     *
     * @param string|null $cusip_number The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setCusipNumber($cusip_number)
    {
        if (is_null($cusip_number)) {
            throw new \InvalidArgumentException('non-nullable cusip_number cannot be null');
        }
        $this->container['cusip_number'] = $cusip_number;

        return $this;
    }

    /**
     * Gets source_apca_number
     *
     * @return string|null
     */
    public function getSourceApcaNumber()
    {
        return $this->container['source_apca_number'];
    }

    /**
     * Sets source_apca_number
     *
     * @param string|null $source_apca_number 6 Digit APCA number for the initiating institution. The field is fixed-width and padded with leading zeros if applicable. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Applicable containers</b>: Bank,Card container<br>
     *
     * @return self
     */
    public function setSourceApcaNumber($source_apca_number)
    {
        if (is_null($source_apca_number)) {
            throw new \InvalidArgumentException('non-nullable source_apca_number cannot be null');
        }
        $this->container['source_apca_number'] = $source_apca_number;

        return $this;
    }

    /**
     * Gets high_level_category_id
     *
     * @return int|null
     */
    public function getHighLevelCategoryId()
    {
        return $this->container['high_level_category_id'];
    }

    /**
     * Sets high_level_category_id
     *
     * @param int|null $high_level_category_id The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setHighLevelCategoryId($high_level_category_id)
    {
        if (is_null($high_level_category_id)) {
            throw new \InvalidArgumentException('non-nullable high_level_category_id cannot be null');
        }
        $this->container['high_level_category_id'] = $high_level_category_id;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, New Zealand and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets intermediary
     *
     * @return string[]|null
     */
    public function getIntermediary()
    {
        return $this->container['intermediary'];
    }

    /**
     * Sets intermediary
     *
     * @param string[]|null $intermediary The intermediary of the transaction.<br><br><b>Applicable containers</b>:  bank,creditCard,investment,loan<br>
     *
     * @return self
     */
    public function setIntermediary($intermediary)
    {
        if (is_null($intermediary)) {
            throw new \InvalidArgumentException('non-nullable intermediary cannot be null');
        }
        $this->container['intermediary'] = $intermediary;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string|null $frequency Frequency is set to MONTHLY if the Merchant type is BILLERS or SUBSCRIPTION.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\Money|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets source_merchant_category_code
     *
     * @return string|null
     */
    public function getSourceMerchantCategoryCode()
    {
        return $this->container['source_merchant_category_code'];
    }

    /**
     * Sets source_merchant_category_code
     *
     * @param string|null $source_merchant_category_code The merchant category code for an outgoing payment to a merchant. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Applicable containers</b>: Bank,Card,Loan container<br>
     *
     * @return self
     */
    public function setSourceMerchantCategoryCode($source_merchant_category_code)
    {
        if (is_null($source_merchant_category_code)) {
            throw new \InvalidArgumentException('non-nullable source_merchant_category_code cannot be null');
        }
        $this->container['source_merchant_category_code'] = $source_merchant_category_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        if (is_null($check_number)) {
            throw new \InvalidArgumentException('non-nullable check_number cannot be null');
        }
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets transaction_date_time
     *
     * @return string|null
     */
    public function getTransactionDateTime()
    {
        return $this->container['transaction_date_time'];
    }

    /**
     * Sets transaction_date_time
     *
     * @param string|null $transaction_date_time The timestamp the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setTransactionDateTime($transaction_date_time)
    {
        if (is_null($transaction_date_time)) {
            throw new \InvalidArgumentException('non-nullable transaction_date_time cannot be null');
        }
        $this->container['transaction_date_time'] = $transaction_date_time;

        return $this;
    }

    /**
     * Gets type_at_source
     *
     * @return string|null
     */
    public function getTypeAtSource()
    {
        return $this->container['type_at_source'];
    }

    /**
     * Sets type_at_source
     *
     * @param string|null $type_at_source The type of transaction. This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Applicable containers</b>: Bank,Card,Loan container<br>
     *
     * @return self
     */
    public function setTypeAtSource($type_at_source)
    {
        if (is_null($type_at_source)) {
            throw new \InvalidArgumentException('non-nullable type_at_source cannot be null');
        }
        $this->container['type_at_source'] = $type_at_source;

        return $this;
    }

    /**
     * Gets valoren
     *
     * @return string|null
     */
    public function getValoren()
    {
        return $this->container['valoren'];
    }

    /**
     * Sets valoren
     *
     * @param string|null $valoren It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setValoren($valoren)
    {
        if (is_null($valoren)) {
            throw new \InvalidArgumentException('non-nullable valoren cannot be null');
        }
        $this->container['valoren'] = $valoren;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        if (is_null($is_manual)) {
            throw new \InvalidArgumentException('non-nullable is_manual cannot be null');
        }
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets source_biller_name
     *
     * @return string|null
     */
    public function getSourceBillerName()
    {
        return $this->container['source_biller_name'];
    }

    /**
     * Sets source_biller_name
     *
     * @param string|null $source_biller_name Name of the BPAY biller for the transaction (if available). This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Applicable containers</b>: Bank,Card container<br>
     *
     * @return self
     */
    public function setSourceBillerName($source_biller_name)
    {
        if (is_null($source_biller_name)) {
            throw new \InvalidArgumentException('non-nullable source_biller_name cannot be null');
        }
        $this->container['source_biller_name'] = $source_biller_name;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \OpenAPI\Client\Model\Merchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \OpenAPI\Client\Model\Merchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets sedol
     *
     * @return string|null
     */
    public function getSedol()
    {
        return $this->container['sedol'];
    }

    /**
     * Sets sedol
     *
     * @param string|null $sedol SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setSedol($sedol)
    {
        if (is_null($sedol)) {
            throw new \InvalidArgumentException('non-nullable sedol cannot be null');
        }
        $this->container['sedol'] = $sedol;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return string|null
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param string|null $category_type The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        if (is_null($category_type)) {
            throw new \InvalidArgumentException('non-nullable category_type cannot be null');
        }
        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!in_array($category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category_type', must be one of '%s'",
                    $category_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string|null
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string|null $source_type The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        if (is_null($source_type)) {
            throw new \InvalidArgumentException('non-nullable source_type cannot be null');
        }
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!in_array($source_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_type', must be one of '%s'",
                    $source_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string|null $sub_type The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, New Zealand and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        if (is_null($sub_type)) {
            throw new \InvalidArgumentException('non-nullable sub_type cannot be null');
        }
        $allowedValues = $this->getSubTypeAllowableValues();
        if (!in_array($sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sub_type', must be one of '%s'",
                    $sub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets holding_description
     *
     * @return string|null
     */
    public function getHoldingDescription()
    {
        return $this->container['holding_description'];
    }

    /**
     * Sets holding_description
     *
     * @param string|null $holding_description For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setHoldingDescription($holding_description)
    {
        if (is_null($holding_description)) {
            throw new \InvalidArgumentException('non-nullable holding_description cannot be null');
        }
        $this->container['holding_description'] = $holding_description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets detail_category_id
     *
     * @return int|null
     */
    public function getDetailCategoryId()
    {
        return $this->container['detail_category_id'];
    }

    /**
     * Sets detail_category_id
     *
     * @param int|null $detail_category_id The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>
     *
     * @return self
     */
    public function setDetailCategoryId($detail_category_id)
    {
        if (is_null($detail_category_id)) {
            throw new \InvalidArgumentException('non-nullable detail_category_id cannot be null');
        }
        $this->container['detail_category_id'] = $detail_category_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\Description|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\Description|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets settle_date
     *
     * @return string|null
     */
    public function getSettleDate()
    {
        return $this->container['settle_date'];
    }

    /**
     * Sets settle_date
     *
     * @param string|null $settle_date It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setSettleDate($settle_date)
    {
        if (is_null($settle_date)) {
            throw new \InvalidArgumentException('non-nullable settle_date cannot be null');
        }
        $this->container['settle_date'] = $settle_date;

        return $this;
    }

    /**
     * Gets post_date_time
     *
     * @return string|null
     */
    public function getPostDateTime()
    {
        return $this->container['post_date_time'];
    }

    /**
     * Sets post_date_time
     *
     * @param string|null $post_date_time The timestamp on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
     *
     * @return self
     */
    public function setPostDateTime($post_date_time)
    {
        if (is_null($post_date_time)) {
            throw new \InvalidArgumentException('non-nullable post_date_time cannot be null');
        }
        $this->container['post_date_time'] = $post_date_time;

        return $this;
    }

    /**
     * Gets base_type
     *
     * @return string|null
     */
    public function getBaseType()
    {
        return $this->container['base_type'];
    }

    /**
     * Sets base_type
     *
     * @param string|null $base_type Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setBaseType($base_type)
    {
        if (is_null($base_type)) {
            throw new \InvalidArgumentException('non-nullable base_type cannot be null');
        }
        $allowedValues = $this->getBaseTypeAllowableValues();
        if (!in_array($base_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'base_type', must be one of '%s'",
                    $base_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['base_type'] = $base_type;

        return $this;
    }

    /**
     * Gets category_source
     *
     * @return string|null
     */
    public function getCategorySource()
    {
        return $this->container['category_source'];
    }

    /**
     * Sets category_source
     *
     * @param string|null $category_source Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setCategorySource($category_source)
    {
        if (is_null($category_source)) {
            throw new \InvalidArgumentException('non-nullable category_source cannot be null');
        }
        $allowedValues = $this->getCategorySourceAllowableValues();
        if (!in_array($category_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category_source', must be one of '%s'",
                    $category_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_source'] = $category_source;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param \OpenAPI\Client\Model\Money|null $principal principal
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (is_null($principal)) {
            throw new \InvalidArgumentException('non-nullable principal cannot be null');
        }
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets source_biller_code
     *
     * @return string|null
     */
    public function getSourceBillerCode()
    {
        return $this->container['source_biller_code'];
    }

    /**
     * Sets source_biller_code
     *
     * @param string|null $source_biller_code BPAY Biller Code for the transaction (if available). This field will be primarily be available for AU Open Banking sites, and for other regions/providers, the population will depend on the availability of data.<br><br><b>Applicable containers</b>: Bank,Card container<br>
     *
     * @return self
     */
    public function setSourceBillerCode($source_biller_code)
    {
        if (is_null($source_biller_code)) {
            throw new \InvalidArgumentException('non-nullable source_biller_code cannot be null');
        }
        $this->container['source_biller_code'] = $source_biller_code;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param \OpenAPI\Client\Model\Money|null $interest interest
     *
     * @return self
     */
    public function setInterest($interest)
    {
        if (is_null($interest)) {
            throw new \InvalidArgumentException('non-nullable interest cannot be null');
        }
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param \OpenAPI\Client\Model\Money|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets merchant_type
     *
     * @return string|null
     */
    public function getMerchantType()
    {
        return $this->container['merchant_type'];
    }

    /**
     * Sets merchant_type
     *
     * @param string|null $merchant_type Indicates the merchantType of the transaction.e.g:-BILLERS,SUBSCRIPTION,BNPL,OTHERS <br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>
     *
     * @return self
     */
    public function setMerchantType($merchant_type)
    {
        if (is_null($merchant_type)) {
            throw new \InvalidArgumentException('non-nullable merchant_type cannot be null');
        }
        $this->container['merchant_type'] = $merchant_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \OpenAPI\Client\Model\Money|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets is_physical
     *
     * @return bool|null
     */
    public function getIsPhysical()
    {
        return $this->container['is_physical'];
    }

    /**
     * Sets is_physical
     *
     * @param bool|null $is_physical Indicates if the transaction is happened online or in-store. <br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>
     *
     * @return self
     */
    public function setIsPhysical($is_physical)
    {
        if (is_null($is_physical)) {
            throw new \InvalidArgumentException('non-nullable is_physical cannot be null');
        }
        $this->container['is_physical'] = $is_physical;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return string|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param string|null $is_recurring If the transaction is done on a merchant with merchant type as BILLERS/SUBSCRIPTION, then such transactions are marked isRecurring to True or else it is marked as False.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setIsRecurring($is_recurring)
    {
        if (is_null($is_recurring)) {
            throw new \InvalidArgumentException('non-nullable is_recurring cannot be null');
        }
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string|null $transaction_date The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!in_array($container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container', must be one of '%s'",
                    $container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets business_category
     *
     * @return \OpenAPI\Client\Model\BusinessCategory|null
     */
    public function getBusinessCategory()
    {
        return $this->container['business_category'];
    }

    /**
     * Sets business_category
     *
     * @param \OpenAPI\Client\Model\BusinessCategory|null $business_category business_category
     *
     * @return self
     */
    public function setBusinessCategory($business_category)
    {
        if (is_null($business_category)) {
            throw new \InvalidArgumentException('non-nullable business_category cannot be null');
        }
        $this->container['business_category'] = $business_category;

        return $this;
    }

    /**
     * Gets post_date
     *
     * @return string|null
     */
    public function getPostDate()
    {
        return $this->container['post_date'];
    }

    /**
     * Sets post_date
     *
     * @param string|null $post_date The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
     *
     * @return self
     */
    public function setPostDate($post_date)
    {
        if (is_null($post_date)) {
            throw new \InvalidArgumentException('non-nullable post_date cannot be null');
        }
        $this->container['post_date'] = $post_date;

        return $this;
    }

    /**
     * Gets parent_category_id
     *
     * @return int|null
     */
    public function getParentCategoryId()
    {
        return $this->container['parent_category_id'];
    }

    /**
     * Sets parent_category_id
     *
     * @param int|null $parent_category_id The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setParentCategoryId($parent_category_id)
    {
        if (is_null($parent_category_id)) {
            throw new \InvalidArgumentException('non-nullable parent_category_id cannot be null');
        }
        $this->container['parent_category_id'] = $parent_category_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets running_balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getRunningBalance()
    {
        return $this->container['running_balance'];
    }

    /**
     * Sets running_balance
     *
     * @param \OpenAPI\Client\Model\Money|null $running_balance running_balance
     *
     * @return self
     */
    public function setRunningBalance($running_balance)
    {
        if (is_null($running_balance)) {
            throw new \InvalidArgumentException('non-nullable running_balance cannot be null');
        }
        $this->container['running_balance'] = $running_balance;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string|null
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string|null $isin International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }
        $this->container['isin'] = $isin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


