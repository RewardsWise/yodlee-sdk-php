<?php
/**
 * VerifiedAccounts
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VerifiedAccounts Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VerifiedAccounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerifiedAccounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_name' => 'string',
        'verification_status' => 'string',
        'account_type' => 'string',
        'current_balance' => '\OpenAPI\Client\Model\Money',
        'displayed_name' => 'string',
        'holder' => '\OpenAPI\Client\Model\AccountHolder[]',
        'account_number' => 'string',
        'classification' => 'string',
        'available_balance' => '\OpenAPI\Client\Model\Money',
        'full_account_number_list' => '\OpenAPI\Client\Model\FullAccountNumberList',
        'account_id' => 'int',
        'account_age_classification' => 'string',
        'balance' => '\OpenAPI\Client\Model\Money',
        'provider_id' => 'string',
        'provider_account_id' => 'int',
        'container' => 'string',
        'is_selected' => 'bool',
        'cash' => '\OpenAPI\Client\Model\Money',
        'bank_transfer_code' => '\OpenAPI\Client\Model\BankTransferCode[]',
        'provider_name' => 'string',
        'failed_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_name' => null,
        'verification_status' => null,
        'account_type' => null,
        'current_balance' => null,
        'displayed_name' => null,
        'holder' => null,
        'account_number' => null,
        'classification' => null,
        'available_balance' => null,
        'full_account_number_list' => null,
        'account_id' => 'int64',
        'account_age_classification' => null,
        'balance' => null,
        'provider_id' => null,
        'provider_account_id' => 'int64',
        'container' => null,
        'is_selected' => null,
        'cash' => null,
        'bank_transfer_code' => null,
        'provider_name' => null,
        'failed_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_name' => false,
        'verification_status' => false,
        'account_type' => false,
        'current_balance' => false,
        'displayed_name' => false,
        'holder' => false,
        'account_number' => false,
        'classification' => false,
        'available_balance' => false,
        'full_account_number_list' => false,
        'account_id' => false,
        'account_age_classification' => false,
        'balance' => false,
        'provider_id' => false,
        'provider_account_id' => false,
        'container' => false,
        'is_selected' => false,
        'cash' => false,
        'bank_transfer_code' => false,
        'provider_name' => false,
        'failed_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'accountName',
        'verification_status' => 'verificationStatus',
        'account_type' => 'accountType',
        'current_balance' => 'currentBalance',
        'displayed_name' => 'displayedName',
        'holder' => 'holder',
        'account_number' => 'accountNumber',
        'classification' => 'classification',
        'available_balance' => 'availableBalance',
        'full_account_number_list' => 'fullAccountNumberList',
        'account_id' => 'accountId',
        'account_age_classification' => 'accountAgeClassification',
        'balance' => 'balance',
        'provider_id' => 'providerId',
        'provider_account_id' => 'providerAccountId',
        'container' => 'CONTAINER',
        'is_selected' => 'isSelected',
        'cash' => 'cash',
        'bank_transfer_code' => 'bankTransferCode',
        'provider_name' => 'providerName',
        'failed_reason' => 'failedReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'verification_status' => 'setVerificationStatus',
        'account_type' => 'setAccountType',
        'current_balance' => 'setCurrentBalance',
        'displayed_name' => 'setDisplayedName',
        'holder' => 'setHolder',
        'account_number' => 'setAccountNumber',
        'classification' => 'setClassification',
        'available_balance' => 'setAvailableBalance',
        'full_account_number_list' => 'setFullAccountNumberList',
        'account_id' => 'setAccountId',
        'account_age_classification' => 'setAccountAgeClassification',
        'balance' => 'setBalance',
        'provider_id' => 'setProviderId',
        'provider_account_id' => 'setProviderAccountId',
        'container' => 'setContainer',
        'is_selected' => 'setIsSelected',
        'cash' => 'setCash',
        'bank_transfer_code' => 'setBankTransferCode',
        'provider_name' => 'setProviderName',
        'failed_reason' => 'setFailedReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'verification_status' => 'getVerificationStatus',
        'account_type' => 'getAccountType',
        'current_balance' => 'getCurrentBalance',
        'displayed_name' => 'getDisplayedName',
        'holder' => 'getHolder',
        'account_number' => 'getAccountNumber',
        'classification' => 'getClassification',
        'available_balance' => 'getAvailableBalance',
        'full_account_number_list' => 'getFullAccountNumberList',
        'account_id' => 'getAccountId',
        'account_age_classification' => 'getAccountAgeClassification',
        'balance' => 'getBalance',
        'provider_id' => 'getProviderId',
        'provider_account_id' => 'getProviderAccountId',
        'container' => 'getContainer',
        'is_selected' => 'getIsSelected',
        'cash' => 'getCash',
        'bank_transfer_code' => 'getBankTransferCode',
        'provider_name' => 'getProviderName',
        'failed_reason' => 'getFailedReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VERIFICATION_STATUS_SUCCESS = 'SUCCESS';
    public const VERIFICATION_STATUS_FAILED = 'FAILED';
    public const CLASSIFICATION_OTHER = 'OTHER';
    public const CLASSIFICATION_PERSONAL = 'PERSONAL';
    public const CLASSIFICATION_CORPORATE = 'CORPORATE';
    public const CLASSIFICATION_SMALL_BUSINESS = 'SMALL_BUSINESS';
    public const CLASSIFICATION_TRUST = 'TRUST';
    public const CLASSIFICATION_ADD_ON_CARD = 'ADD_ON_CARD';
    public const CLASSIFICATION_VIRTUAL_CARD = 'VIRTUAL_CARD';
    public const ACCOUNT_AGE_CLASSIFICATION_UNCLASSIFIED = 'UNCLASSIFIED';
    public const ACCOUNT_AGE_CLASSIFICATION_OLD = 'OLD';
    public const ACCOUNT_AGE_CLASSIFICATION__NEW = 'NEW';
    public const ACCOUNT_AGE_CLASSIFICATION_RECENT = 'RECENT';
    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_INVESTMENT = 'investment';
    public const FAILED_REASON_REQUIRED_DATA_NOT_AVAILABLE = 'REQUIRED_DATA_NOT_AVAILABLE';
    public const FAILED_REASON_MATCHING_FAILED = 'MATCHING_FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationStatusAllowableValues()
    {
        return [
            self::VERIFICATION_STATUS_SUCCESS,
            self::VERIFICATION_STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_OTHER,
            self::CLASSIFICATION_PERSONAL,
            self::CLASSIFICATION_CORPORATE,
            self::CLASSIFICATION_SMALL_BUSINESS,
            self::CLASSIFICATION_TRUST,
            self::CLASSIFICATION_ADD_ON_CARD,
            self::CLASSIFICATION_VIRTUAL_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountAgeClassificationAllowableValues()
    {
        return [
            self::ACCOUNT_AGE_CLASSIFICATION_UNCLASSIFIED,
            self::ACCOUNT_AGE_CLASSIFICATION_OLD,
            self::ACCOUNT_AGE_CLASSIFICATION__NEW,
            self::ACCOUNT_AGE_CLASSIFICATION_RECENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_INVESTMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailedReasonAllowableValues()
    {
        return [
            self::FAILED_REASON_REQUIRED_DATA_NOT_AVAILABLE,
            self::FAILED_REASON_MATCHING_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('verification_status', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('displayed_name', $data ?? [], null);
        $this->setIfExists('holder', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('full_account_number_list', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_age_classification', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('provider_account_id', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('is_selected', $data ?? [], null);
        $this->setIfExists('cash', $data ?? [], null);
        $this->setIfExists('bank_transfer_code', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('failed_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerificationStatusAllowableValues();
        if (!is_null($this->container['verification_status']) && !in_array($this->container['verification_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'verification_status', must be one of '%s'",
                $this->container['verification_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($this->container['classification']) && !in_array($this->container['classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'classification', must be one of '%s'",
                $this->container['classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountAgeClassificationAllowableValues();
        if (!is_null($this->container['account_age_classification']) && !in_array($this->container['account_age_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_age_classification', must be one of '%s'",
                $this->container['account_age_classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContainerAllowableValues();
        if (!is_null($this->container['container']) && !in_array($this->container['container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container', must be one of '%s'",
                $this->container['container'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailedReasonAllowableValues();
        if (!is_null($this->container['failed_reason']) && !in_array($this->container['failed_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'failed_reason', must be one of '%s'",
                $this->container['failed_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return string|null
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param string|null $verification_status The status of the account verification.
     *
     * @return self
     */
    public function setVerificationStatus($verification_status)
    {
        if (is_null($verification_status)) {
            throw new \InvalidArgumentException('non-nullable verification_status cannot be null');
        }
        $allowedValues = $this->getVerificationStatusAllowableValues();
        if (!in_array($verification_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'verification_status', must be one of '%s'",
                    $verification_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of account that is aggregated, i.e., savings, checking, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>MONEY_MARKET</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param \OpenAPI\Client\Model\Money|null $current_balance current_balance
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets displayed_name
     *
     * @return string|null
     */
    public function getDisplayedName()
    {
        return $this->container['displayed_name'];
    }

    /**
     * Sets displayed_name
     *
     * @param string|null $displayed_name The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setDisplayedName($displayed_name)
    {
        if (is_null($displayed_name)) {
            throw new \InvalidArgumentException('non-nullable displayed_name cannot be null');
        }
        $this->container['displayed_name'] = $displayed_name;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return \OpenAPI\Client\Model\AccountHolder[]|null
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param \OpenAPI\Client\Model\AccountHolder[]|null $holder Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setHolder($holder)
    {
        if (is_null($holder)) {
            throw new \InvalidArgumentException('non-nullable holder cannot be null');
        }
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank / Investment</b>:<br> The account number for the bank account as it appears at the site.<br>In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<li>GET /verification/verifiedAccounts</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $allowedValues = $this->getClassificationAllowableValues();
        if (!in_array($classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'classification', must be one of '%s'",
                    $classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param \OpenAPI\Client\Model\Money|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets full_account_number_list
     *
     * @return \OpenAPI\Client\Model\FullAccountNumberList|null
     */
    public function getFullAccountNumberList()
    {
        return $this->container['full_account_number_list'];
    }

    /**
     * Sets full_account_number_list
     *
     * @param \OpenAPI\Client\Model\FullAccountNumberList|null $full_account_number_list full_account_number_list
     *
     * @return self
     */
    public function setFullAccountNumberList($full_account_number_list)
    {
        if (is_null($full_account_number_list)) {
            throw new \InvalidArgumentException('non-nullable full_account_number_list cannot be null');
        }
        $this->container['full_account_number_list'] = $full_account_number_list;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_age_classification
     *
     * @return string|null
     */
    public function getAccountAgeClassification()
    {
        return $this->container['account_age_classification'];
    }

    /**
     * Sets account_age_classification
     *
     * @param string|null $account_age_classification Attribute to return the classification of the account age by specifying whether the account is old/new/recent as relevant for a verification use case. If it could not be classified into any one of these values, the attribute would return the value as 'unclassified'
     *
     * @return self
     */
    public function setAccountAgeClassification($account_age_classification)
    {
        if (is_null($account_age_classification)) {
            throw new \InvalidArgumentException('non-nullable account_age_classification cannot be null');
        }
        $allowedValues = $this->getAccountAgeClassificationAllowableValues();
        if (!in_array($account_age_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_age_classification', must be one of '%s'",
                    $account_age_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_age_classification'] = $account_age_classification;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \OpenAPI\Client\Model\Money|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider_account_id
     *
     * @return int|null
     */
    public function getProviderAccountId()
    {
        return $this->container['provider_account_id'];
    }

    /**
     * Sets provider_account_id
     *
     * @param int|null $provider_account_id The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setProviderAccountId($provider_account_id)
    {
        if (is_null($provider_account_id)) {
            throw new \InvalidArgumentException('non-nullable provider_account_id cannot be null');
        }
        $this->container['provider_account_id'] = $provider_account_id;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container The type of service. E.g., Bank, Investment <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!in_array($container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container', must be one of '%s'",
                    $container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets is_selected
     *
     * @return bool|null
     */
    public function getIsSelected()
    {
        return $this->container['is_selected'];
    }

    /**
     * Sets is_selected
     *
     * @param bool|null $is_selected Indicates if an account is selected by the user in the FastLink 4 application
     *
     * @return self
     */
    public function setIsSelected($is_selected)
    {
        if (is_null($is_selected)) {
            throw new \InvalidArgumentException('non-nullable is_selected cannot be null');
        }
        $this->container['is_selected'] = $is_selected;

        return $this;
    }

    /**
     * Gets cash
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getCash()
    {
        return $this->container['cash'];
    }

    /**
     * Sets cash
     *
     * @param \OpenAPI\Client\Model\Money|null $cash cash
     *
     * @return self
     */
    public function setCash($cash)
    {
        if (is_null($cash)) {
            throw new \InvalidArgumentException('non-nullable cash cannot be null');
        }
        $this->container['cash'] = $cash;

        return $this;
    }

    /**
     * Gets bank_transfer_code
     *
     * @return \OpenAPI\Client\Model\BankTransferCode[]|null
     */
    public function getBankTransferCode()
    {
        return $this->container['bank_transfer_code'];
    }

    /**
     * Sets bank_transfer_code
     *
     * @param \OpenAPI\Client\Model\BankTransferCode[]|null $bank_transfer_code Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setBankTransferCode($bank_transfer_code)
    {
        if (is_null($bank_transfer_code)) {
            throw new \InvalidArgumentException('non-nullable bank_transfer_code cannot be null');
        }
        $this->container['bank_transfer_code'] = $bank_transfer_code;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets failed_reason
     *
     * @return string|null
     */
    public function getFailedReason()
    {
        return $this->container['failed_reason'];
    }

    /**
     * Sets failed_reason
     *
     * @param string|null $failed_reason The reason for the verification failure of the account.
     *
     * @return self
     */
    public function setFailedReason($failed_reason)
    {
        if (is_null($failed_reason)) {
            throw new \InvalidArgumentException('non-nullable failed_reason cannot be null');
        }
        $allowedValues = $this->getFailedReasonAllowableValues();
        if (!in_array($failed_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'failed_reason', must be one of '%s'",
                    $failed_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failed_reason'] = $failed_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


