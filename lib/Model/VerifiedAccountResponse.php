<?php
/**
 * VerifiedAccountResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * VerifiedAccountResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VerifiedAccountResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerifiedAccountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_id' => 'string',
        'request_date' => 'string',
        'state' => 'string',
        'verified_account' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\VerifiedAccounts[]',
        'failed_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_id' => null,
        'request_date' => null,
        'state' => null,
        'verified_account' => null,
        'failed_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_id' => false,
        'request_date' => false,
        'state' => false,
        'verified_account' => false,
        'failed_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'request_date' => 'requestDate',
        'state' => 'state',
        'verified_account' => 'verifiedAccount',
        'failed_reason' => 'failedReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'request_date' => 'setRequestDate',
        'state' => 'setState',
        'verified_account' => 'setVerifiedAccount',
        'failed_reason' => 'setFailedReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'request_date' => 'getRequestDate',
        'state' => 'getState',
        'verified_account' => 'getVerifiedAccount',
        'failed_reason' => 'getFailedReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_COMPLETED = 'COMPLETED';
    public const STATE_FAILED = 'FAILED';
    public const FAILED_REASON_ACCOUNT_LOCKED = 'ACCOUNT_LOCKED';
    public const FAILED_REASON_ADDL_AUTHENTICATION_REQUIRED = 'ADDL_AUTHENTICATION_REQUIRED';
    public const FAILED_REASON_CREDENTIALS_UPDATE_NEEDED = 'CREDENTIALS_UPDATE_NEEDED';
    public const FAILED_REASON_INCORRECT_CREDENTIALS = 'INCORRECT_CREDENTIALS';
    public const FAILED_REASON_INVALID_ADDL_INFO_PROVIDED = 'INVALID_ADDL_INFO_PROVIDED';
    public const FAILED_REASON_REQUEST_TIME_OUT = 'REQUEST_TIME_OUT';
    public const FAILED_REASON_SITE_BLOCKING_ERROR = 'SITE_BLOCKING_ERROR';
    public const FAILED_REASON_UNEXPECTED_SITE_ERROR = 'UNEXPECTED_SITE_ERROR';
    public const FAILED_REASON_SITE_NOT_SUPPORTED = 'SITE_NOT_SUPPORTED';
    public const FAILED_REASON_SITE_UNAVAILABLE = 'SITE_UNAVAILABLE';
    public const FAILED_REASON_TECH_ERROR = 'TECH_ERROR';
    public const FAILED_REASON_USER_ACTION_NEEDED_AT_SITE = 'USER_ACTION_NEEDED_AT_SITE';
    public const FAILED_REASON_SITE_SESSION_INVALIDATED = 'SITE_SESSION_INVALIDATED';
    public const FAILED_REASON_NEW_AUTHENTICATION_REQUIRED = 'NEW_AUTHENTICATION_REQUIRED';
    public const FAILED_REASON_CONSENT_REQUIRED = 'CONSENT_REQUIRED';
    public const FAILED_REASON_CONSENT_EXPIRED = 'CONSENT_EXPIRED';
    public const FAILED_REASON_CONSENT_REVOKED = 'CONSENT_REVOKED';
    public const FAILED_REASON_INCORRECT_OAUTH_TOKEN = 'INCORRECT_OAUTH_TOKEN';
    public const FAILED_REASON_REQUIRED_DATA_NOT_AVAILABLE = 'REQUIRED_DATA_NOT_AVAILABLE';
    public const FAILED_REASON_MATCHING_FAILED = 'MATCHING_FAILED';
    public const FAILED_REASON_NO_ELIGIBLE_ACCOUNTS = 'NO_ELIGIBLE_ACCOUNTS';
    public const FAILED_REASON_USER_INPUT_REQUIRED = 'USER_INPUT_REQUIRED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_COMPLETED,
            self::STATE_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailedReasonAllowableValues()
    {
        return [
            self::FAILED_REASON_ACCOUNT_LOCKED,
            self::FAILED_REASON_ADDL_AUTHENTICATION_REQUIRED,
            self::FAILED_REASON_CREDENTIALS_UPDATE_NEEDED,
            self::FAILED_REASON_INCORRECT_CREDENTIALS,
            self::FAILED_REASON_INVALID_ADDL_INFO_PROVIDED,
            self::FAILED_REASON_REQUEST_TIME_OUT,
            self::FAILED_REASON_SITE_BLOCKING_ERROR,
            self::FAILED_REASON_UNEXPECTED_SITE_ERROR,
            self::FAILED_REASON_SITE_NOT_SUPPORTED,
            self::FAILED_REASON_SITE_UNAVAILABLE,
            self::FAILED_REASON_TECH_ERROR,
            self::FAILED_REASON_USER_ACTION_NEEDED_AT_SITE,
            self::FAILED_REASON_SITE_SESSION_INVALIDATED,
            self::FAILED_REASON_NEW_AUTHENTICATION_REQUIRED,
            self::FAILED_REASON_CONSENT_REQUIRED,
            self::FAILED_REASON_CONSENT_EXPIRED,
            self::FAILED_REASON_CONSENT_REVOKED,
            self::FAILED_REASON_INCORRECT_OAUTH_TOKEN,
            self::FAILED_REASON_REQUIRED_DATA_NOT_AVAILABLE,
            self::FAILED_REASON_MATCHING_FAILED,
            self::FAILED_REASON_NO_ELIGIBLE_ACCOUNTS,
            self::FAILED_REASON_USER_INPUT_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('request_date', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('verified_account', $data ?? [], null);
        $this->setIfExists('failed_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailedReasonAllowableValues();
        if (!is_null($this->container['failed_reason']) && !in_array($this->container['failed_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'failed_reason', must be one of '%s'",
                $this->container['failed_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id The unique identifier for the verification request that returns contextual data
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return string|null
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param string|null $request_date The date of the verification request
     *
     * @return self
     */
    public function setRequestDate($request_date)
    {
        if (is_null($request_date)) {
            throw new \InvalidArgumentException('non-nullable request_date cannot be null');
        }
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The overall status of the verification request
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets verified_account
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\VerifiedAccounts[]|null
     */
    public function getVerifiedAccount()
    {
        return $this->container['verified_account'];
    }

    /**
     * Sets verified_account
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\VerifiedAccounts[]|null $verified_account verified_account
     *
     * @return self
     */
    public function setVerifiedAccount($verified_account)
    {
        if (is_null($verified_account)) {
            throw new \InvalidArgumentException('non-nullable verified_account cannot be null');
        }
        $this->container['verified_account'] = $verified_account;

        return $this;
    }

    /**
     * Gets failed_reason
     *
     * @return string|null
     */
    public function getFailedReason()
    {
        return $this->container['failed_reason'];
    }

    /**
     * Sets failed_reason
     *
     * @param string|null $failed_reason The reason for the failure of the verification request
     *
     * @return self
     */
    public function setFailedReason($failed_reason)
    {
        if (is_null($failed_reason)) {
            throw new \InvalidArgumentException('non-nullable failed_reason cannot be null');
        }
        $allowedValues = $this->getFailedReasonAllowableValues();
        if (!in_array($failed_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'failed_reason', must be one of '%s'",
                    $failed_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failed_reason'] = $failed_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


