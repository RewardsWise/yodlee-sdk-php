<?php
/**
 * LoginForm
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoginForm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LoginForm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoginForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mfa_info_title' => 'string',
        'help' => 'string',
        'forget_password_url' => 'string',
        'form_type' => 'string',
        'mfa_info_text' => 'string',
        'login_help' => 'string',
        'mfa_timeout' => 'int',
        'id' => 'int',
        'row' => '\OpenAPI\Client\Model\Row[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mfa_info_title' => null,
        'help' => null,
        'forget_password_url' => null,
        'form_type' => null,
        'mfa_info_text' => null,
        'login_help' => null,
        'mfa_timeout' => 'int64',
        'id' => 'int64',
        'row' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mfa_info_title' => false,
        'help' => false,
        'forget_password_url' => false,
        'form_type' => false,
        'mfa_info_text' => false,
        'login_help' => false,
        'mfa_timeout' => false,
        'id' => false,
        'row' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mfa_info_title' => 'mfaInfoTitle',
        'help' => 'help',
        'forget_password_url' => 'forgetPasswordURL',
        'form_type' => 'formType',
        'mfa_info_text' => 'mfaInfoText',
        'login_help' => 'loginHelp',
        'mfa_timeout' => 'mfaTimeout',
        'id' => 'id',
        'row' => 'row'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mfa_info_title' => 'setMfaInfoTitle',
        'help' => 'setHelp',
        'forget_password_url' => 'setForgetPasswordUrl',
        'form_type' => 'setFormType',
        'mfa_info_text' => 'setMfaInfoText',
        'login_help' => 'setLoginHelp',
        'mfa_timeout' => 'setMfaTimeout',
        'id' => 'setId',
        'row' => 'setRow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mfa_info_title' => 'getMfaInfoTitle',
        'help' => 'getHelp',
        'forget_password_url' => 'getForgetPasswordUrl',
        'form_type' => 'getFormType',
        'mfa_info_text' => 'getMfaInfoText',
        'login_help' => 'getLoginHelp',
        'mfa_timeout' => 'getMfaTimeout',
        'id' => 'getId',
        'row' => 'getRow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORM_TYPE_LOGIN = 'login';
    public const FORM_TYPE_QUESTION_AND_ANSWER = 'questionAndAnswer';
    public const FORM_TYPE_TOKEN = 'token';
    public const FORM_TYPE_IMAGE = 'image';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormTypeAllowableValues()
    {
        return [
            self::FORM_TYPE_LOGIN,
            self::FORM_TYPE_QUESTION_AND_ANSWER,
            self::FORM_TYPE_TOKEN,
            self::FORM_TYPE_IMAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('mfa_info_title', $data ?? [], null);
        $this->setIfExists('help', $data ?? [], null);
        $this->setIfExists('forget_password_url', $data ?? [], null);
        $this->setIfExists('form_type', $data ?? [], null);
        $this->setIfExists('mfa_info_text', $data ?? [], null);
        $this->setIfExists('login_help', $data ?? [], null);
        $this->setIfExists('mfa_timeout', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('row', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormTypeAllowableValues();
        if (!is_null($this->container['form_type']) && !in_array($this->container['form_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'form_type', must be one of '%s'",
                $this->container['form_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mfa_info_title
     *
     * @return string|null
     */
    public function getMfaInfoTitle()
    {
        return $this->container['mfa_info_title'];
    }

    /**
     * Sets mfa_info_title
     *
     * @param string|null $mfa_info_title The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setMfaInfoTitle($mfa_info_title)
    {
        if (is_null($mfa_info_title)) {
            throw new \InvalidArgumentException('non-nullable mfa_info_title cannot be null');
        }
        $this->container['mfa_info_title'] = $mfa_info_title;

        return $this;
    }

    /**
     * Gets help
     *
     * @return string|null
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param string|null $help The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setHelp($help)
    {
        if (is_null($help)) {
            throw new \InvalidArgumentException('non-nullable help cannot be null');
        }
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets forget_password_url
     *
     * @return string|null
     */
    public function getForgetPasswordUrl()
    {
        return $this->container['forget_password_url'];
    }

    /**
     * Sets forget_password_url
     *
     * @param string|null $forget_password_url The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setForgetPasswordUrl($forget_password_url)
    {
        if (is_null($forget_password_url)) {
            throw new \InvalidArgumentException('non-nullable forget_password_url cannot be null');
        }
        $this->container['forget_password_url'] = $forget_password_url;

        return $this;
    }

    /**
     * Gets form_type
     *
     * @return string|null
     */
    public function getFormType()
    {
        return $this->container['form_type'];
    }

    /**
     * Sets form_type
     *
     * @param string|null $form_type The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setFormType($form_type)
    {
        if (is_null($form_type)) {
            throw new \InvalidArgumentException('non-nullable form_type cannot be null');
        }
        $allowedValues = $this->getFormTypeAllowableValues();
        if (!in_array($form_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'form_type', must be one of '%s'",
                    $form_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_type'] = $form_type;

        return $this;
    }

    /**
     * Gets mfa_info_text
     *
     * @return string|null
     */
    public function getMfaInfoText()
    {
        return $this->container['mfa_info_text'];
    }

    /**
     * Sets mfa_info_text
     *
     * @param string|null $mfa_info_text The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
     *
     * @return self
     */
    public function setMfaInfoText($mfa_info_text)
    {
        if (is_null($mfa_info_text)) {
            throw new \InvalidArgumentException('non-nullable mfa_info_text cannot be null');
        }
        $this->container['mfa_info_text'] = $mfa_info_text;

        return $this;
    }

    /**
     * Gets login_help
     *
     * @return string|null
     */
    public function getLoginHelp()
    {
        return $this->container['login_help'];
    }

    /**
     * Sets login_help
     *
     * @param string|null $login_help The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setLoginHelp($login_help)
    {
        if (is_null($login_help)) {
            throw new \InvalidArgumentException('non-nullable login_help cannot be null');
        }
        $this->container['login_help'] = $login_help;

        return $this;
    }

    /**
     * Gets mfa_timeout
     *
     * @return int|null
     */
    public function getMfaTimeout()
    {
        return $this->container['mfa_timeout'];
    }

    /**
     * Sets mfa_timeout
     *
     * @param int|null $mfa_timeout The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setMfaTimeout($mfa_timeout)
    {
        if (is_null($mfa_timeout)) {
            throw new \InvalidArgumentException('non-nullable mfa_timeout cannot be null');
        }
        $this->container['mfa_timeout'] = $mfa_timeout;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets row
     *
     * @return \OpenAPI\Client\Model\Row[]|null
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     *
     * @param \OpenAPI\Client\Model\Row[]|null $row This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setRow($row)
    {
        if (is_null($row)) {
            throw new \InvalidArgumentException('non-nullable row cannot be null');
        }
        $this->container['row'] = $row;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


