<?php
/**
 * UpdateTransaction
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * UpdateTransaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category_source' => 'string',
        'container' => 'string',
        'is_physical' => 'bool',
        'detail_category_id' => 'int',
        'description' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Description',
        'memo' => 'string',
        'transaction_source_id' => 'string',
        'merchant_type' => 'string',
        'category_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category_source' => null,
        'container' => null,
        'is_physical' => null,
        'detail_category_id' => 'int64',
        'description' => null,
        'memo' => null,
        'transaction_source_id' => null,
        'merchant_type' => null,
        'category_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category_source' => false,
        'container' => false,
        'is_physical' => false,
        'detail_category_id' => false,
        'description' => false,
        'memo' => false,
        'transaction_source_id' => false,
        'merchant_type' => false,
        'category_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_source' => 'categorySource',
        'container' => 'container',
        'is_physical' => 'isPhysical',
        'detail_category_id' => 'detailCategoryId',
        'description' => 'description',
        'memo' => 'memo',
        'transaction_source_id' => 'transactionSourceId',
        'merchant_type' => 'merchantType',
        'category_id' => 'categoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_source' => 'setCategorySource',
        'container' => 'setContainer',
        'is_physical' => 'setIsPhysical',
        'detail_category_id' => 'setDetailCategoryId',
        'description' => 'setDescription',
        'memo' => 'setMemo',
        'transaction_source_id' => 'setTransactionSourceId',
        'merchant_type' => 'setMerchantType',
        'category_id' => 'setCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_source' => 'getCategorySource',
        'container' => 'getContainer',
        'is_physical' => 'getIsPhysical',
        'detail_category_id' => 'getDetailCategoryId',
        'description' => 'getDescription',
        'memo' => 'getMemo',
        'transaction_source_id' => 'getTransactionSourceId',
        'merchant_type' => 'getMerchantType',
        'category_id' => 'getCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORY_SOURCE_SYSTEM = 'SYSTEM';
    public const CATEGORY_SOURCE_USER = 'USER';
    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_CREDIT_CARD = 'creditCard';
    public const CONTAINER_INVESTMENT = 'investment';
    public const CONTAINER_INSURANCE = 'insurance';
    public const CONTAINER_LOAN = 'loan';
    public const CONTAINER_REWARD = 'reward';
    public const CONTAINER_BILL = 'bill';
    public const CONTAINER_REAL_ESTATE = 'realEstate';
    public const CONTAINER_OTHER_ASSETS = 'otherAssets';
    public const CONTAINER_OTHER_LIABILITIES = 'otherLiabilities';
    public const MERCHANT_TYPE_BILLERS = 'BILLERS';
    public const MERCHANT_TYPE_SUBSCRIPTION = 'SUBSCRIPTION';
    public const MERCHANT_TYPE_BNPL = 'BNPL';
    public const MERCHANT_TYPE_OTHERS = 'OTHERS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategorySourceAllowableValues()
    {
        return [
            self::CATEGORY_SOURCE_SYSTEM,
            self::CATEGORY_SOURCE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_CREDIT_CARD,
            self::CONTAINER_INVESTMENT,
            self::CONTAINER_INSURANCE,
            self::CONTAINER_LOAN,
            self::CONTAINER_REWARD,
            self::CONTAINER_BILL,
            self::CONTAINER_REAL_ESTATE,
            self::CONTAINER_OTHER_ASSETS,
            self::CONTAINER_OTHER_LIABILITIES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMerchantTypeAllowableValues()
    {
        return [
            self::MERCHANT_TYPE_BILLERS,
            self::MERCHANT_TYPE_SUBSCRIPTION,
            self::MERCHANT_TYPE_BNPL,
            self::MERCHANT_TYPE_OTHERS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category_source', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('is_physical', $data ?? [], null);
        $this->setIfExists('detail_category_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('transaction_source_id', $data ?? [], null);
        $this->setIfExists('merchant_type', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category_source'] === null) {
            $invalidProperties[] = "'category_source' can't be null";
        }
        $allowedValues = $this->getCategorySourceAllowableValues();
        if (!is_null($this->container['category_source']) && !in_array($this->container['category_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category_source', must be one of '%s'",
                $this->container['category_source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['container'] === null) {
            $invalidProperties[] = "'container' can't be null";
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!is_null($this->container['container']) && !in_array($this->container['container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container', must be one of '%s'",
                $this->container['container'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_source_id'] === null) {
            $invalidProperties[] = "'transaction_source_id' can't be null";
        }
        $allowedValues = $this->getMerchantTypeAllowableValues();
        if (!is_null($this->container['merchant_type']) && !in_array($this->container['merchant_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merchant_type', must be one of '%s'",
                $this->container['merchant_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['category_id'] === null) {
            $invalidProperties[] = "'category_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_source
     *
     * @return string
     */
    public function getCategorySource()
    {
        return $this->container['category_source'];
    }

    /**
     * Sets category_source
     *
     * @param string $category_source category_source
     *
     * @return self
     */
    public function setCategorySource($category_source)
    {
        if (is_null($category_source)) {
            throw new \InvalidArgumentException('non-nullable category_source cannot be null');
        }
        $allowedValues = $this->getCategorySourceAllowableValues();
        if (!in_array($category_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category_source', must be one of '%s'",
                    $category_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_source'] = $category_source;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!in_array($container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container', must be one of '%s'",
                    $container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets is_physical
     *
     * @return bool|null
     */
    public function getIsPhysical()
    {
        return $this->container['is_physical'];
    }

    /**
     * Sets is_physical
     *
     * @param bool|null $is_physical is_physical
     *
     * @return self
     */
    public function setIsPhysical($is_physical)
    {
        if (is_null($is_physical)) {
            throw new \InvalidArgumentException('non-nullable is_physical cannot be null');
        }
        $this->container['is_physical'] = $is_physical;

        return $this;
    }

    /**
     * Gets detail_category_id
     *
     * @return int|null
     */
    public function getDetailCategoryId()
    {
        return $this->container['detail_category_id'];
    }

    /**
     * Sets detail_category_id
     *
     * @param int|null $detail_category_id detail_category_id
     *
     * @return self
     */
    public function setDetailCategoryId($detail_category_id)
    {
        if (is_null($detail_category_id)) {
            throw new \InvalidArgumentException('non-nullable detail_category_id cannot be null');
        }
        $this->container['detail_category_id'] = $detail_category_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Description|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Description|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets transaction_source_id
     *
     * @return string
     */
    public function getTransactionSourceId()
    {
        return $this->container['transaction_source_id'];
    }

    /**
     * Sets transaction_source_id
     *
     * @param string $transaction_source_id transaction_source_id
     *
     * @return self
     */
    public function setTransactionSourceId($transaction_source_id)
    {
        if (is_null($transaction_source_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_source_id cannot be null');
        }
        $this->container['transaction_source_id'] = $transaction_source_id;

        return $this;
    }

    /**
     * Gets merchant_type
     *
     * @return string|null
     */
    public function getMerchantType()
    {
        return $this->container['merchant_type'];
    }

    /**
     * Sets merchant_type
     *
     * @param string|null $merchant_type merchant_type
     *
     * @return self
     */
    public function setMerchantType($merchant_type)
    {
        if (is_null($merchant_type)) {
            throw new \InvalidArgumentException('non-nullable merchant_type cannot be null');
        }
        $allowedValues = $this->getMerchantTypeAllowableValues();
        if (!in_array($merchant_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merchant_type', must be one of '%s'",
                    $merchant_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merchant_type'] = $merchant_type;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


