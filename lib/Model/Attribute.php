<?php
/**
 * Attribute
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Attribute Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Attribute implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Attribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'container' => 'string[]',
        'from_date' => 'string',
        'to_fin_year' => 'string',
        'from_fin_year' => 'string',
        'container_attributes' => '\OpenAPI\Client\Model\ContainerAttributes',
        'to_date' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'container' => null,
        'from_date' => null,
        'to_fin_year' => null,
        'from_fin_year' => null,
        'container_attributes' => null,
        'to_date' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'container' => false,
        'from_date' => false,
        'to_fin_year' => false,
        'from_fin_year' => false,
        'container_attributes' => false,
        'to_date' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container' => 'container',
        'from_date' => 'fromDate',
        'to_fin_year' => 'toFinYear',
        'from_fin_year' => 'fromFinYear',
        'container_attributes' => 'containerAttributes',
        'to_date' => 'toDate',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container' => 'setContainer',
        'from_date' => 'setFromDate',
        'to_fin_year' => 'setToFinYear',
        'from_fin_year' => 'setFromFinYear',
        'container_attributes' => 'setContainerAttributes',
        'to_date' => 'setToDate',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container' => 'getContainer',
        'from_date' => 'getFromDate',
        'to_fin_year' => 'getToFinYear',
        'from_fin_year' => 'getFromFinYear',
        'container_attributes' => 'getContainerAttributes',
        'to_date' => 'getToDate',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_CREDIT_CARD = 'creditCard';
    public const CONTAINER_INVESTMENT = 'investment';
    public const CONTAINER_INSURANCE = 'insurance';
    public const CONTAINER_LOAN = 'loan';
    public const CONTAINER_REWARD = 'reward';
    public const CONTAINER_BILL = 'bill';
    public const CONTAINER_REAL_ESTATE = 'realEstate';
    public const CONTAINER_OTHER_ASSETS = 'otherAssets';
    public const CONTAINER_OTHER_LIABILITIES = 'otherLiabilities';
    public const NAME_BASIC_ACCOUNT_INFO = 'BASIC_ACCOUNT_INFO';
    public const NAME_TRANSACTIONS = 'TRANSACTIONS';
    public const NAME_STATEMENTS = 'STATEMENTS';
    public const NAME_HOLDINGS = 'HOLDINGS';
    public const NAME_ACCOUNT_DETAILS = 'ACCOUNT_DETAILS';
    public const NAME_TAX = 'TAX';
    public const NAME_EBILLS = 'EBILLS';
    public const NAME_FULL_ACCT_NUMBER = 'FULL_ACCT_NUMBER';
    public const NAME_BANK_TRANSFER_CODE = 'BANK_TRANSFER_CODE';
    public const NAME_HOLDER_NAME = 'HOLDER_NAME';
    public const NAME_HOLDER_DETAILS = 'HOLDER_DETAILS';
    public const NAME_PAYMENT_PROFILE = 'PAYMENT_PROFILE';
    public const NAME_PAYMENT_DETAILS = 'PAYMENT_DETAILS';
    public const NAME_INTEREST_DETAILS = 'INTEREST_DETAILS';
    public const NAME_COVERAGE = 'COVERAGE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_CREDIT_CARD,
            self::CONTAINER_INVESTMENT,
            self::CONTAINER_INSURANCE,
            self::CONTAINER_LOAN,
            self::CONTAINER_REWARD,
            self::CONTAINER_BILL,
            self::CONTAINER_REAL_ESTATE,
            self::CONTAINER_OTHER_ASSETS,
            self::CONTAINER_OTHER_LIABILITIES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_BASIC_ACCOUNT_INFO,
            self::NAME_TRANSACTIONS,
            self::NAME_STATEMENTS,
            self::NAME_HOLDINGS,
            self::NAME_ACCOUNT_DETAILS,
            self::NAME_TAX,
            self::NAME_EBILLS,
            self::NAME_FULL_ACCT_NUMBER,
            self::NAME_BANK_TRANSFER_CODE,
            self::NAME_HOLDER_NAME,
            self::NAME_HOLDER_DETAILS,
            self::NAME_PAYMENT_PROFILE,
            self::NAME_PAYMENT_DETAILS,
            self::NAME_INTEREST_DETAILS,
            self::NAME_COVERAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_fin_year', $data ?? [], null);
        $this->setIfExists('from_fin_year', $data ?? [], null);
        $this->setIfExists('container_attributes', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'name', must be one of '%s'",
                $this->container['name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container
     *
     * @return string[]|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string[]|null $container Containers for which the attributes are supported.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (array_diff($container, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'container', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return string|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param string|null $from_date Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_fin_year
     *
     * @return string|null
     */
    public function getToFinYear()
    {
        return $this->container['to_fin_year'];
    }

    /**
     * Sets to_fin_year
     *
     * @param string|null $to_fin_year Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
     *
     * @return self
     */
    public function setToFinYear($to_fin_year)
    {
        if (is_null($to_fin_year)) {
            throw new \InvalidArgumentException('non-nullable to_fin_year cannot be null');
        }
        $this->container['to_fin_year'] = $to_fin_year;

        return $this;
    }

    /**
     * Gets from_fin_year
     *
     * @return string|null
     */
    public function getFromFinYear()
    {
        return $this->container['from_fin_year'];
    }

    /**
     * Sets from_fin_year
     *
     * @param string|null $from_fin_year Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
     *
     * @return self
     */
    public function setFromFinYear($from_fin_year)
    {
        if (is_null($from_fin_year)) {
            throw new \InvalidArgumentException('non-nullable from_fin_year cannot be null');
        }
        $this->container['from_fin_year'] = $from_fin_year;

        return $this;
    }

    /**
     * Gets container_attributes
     *
     * @return \OpenAPI\Client\Model\ContainerAttributes|null
     */
    public function getContainerAttributes()
    {
        return $this->container['container_attributes'];
    }

    /**
     * Sets container_attributes
     *
     * @param \OpenAPI\Client\Model\ContainerAttributes|null $container_attributes container_attributes
     *
     * @return self
     */
    public function setContainerAttributes($container_attributes)
    {
        if (is_null($container_attributes)) {
            throw new \InvalidArgumentException('non-nullable container_attributes cannot be null');
        }
        $this->container['container_attributes'] = $container_attributes;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return string|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param string|null $to_date Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Attributes that are supported for a dataset.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $allowedValues = $this->getNameAllowableValues();
        if (!in_array($name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'name', must be one of '%s'",
                    $name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


