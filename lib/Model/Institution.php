<?php
/**
 * Institution
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Institution Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Institution implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Institution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language_iso_code' => 'string',
        'favicon' => 'string',
        'country_iso_code' => 'string',
        'is_added_by_user' => 'string',
        'priority' => 'string',
        'primary_language_iso_code' => 'string',
        'base_url' => 'string',
        'login_url' => 'string',
        'provider_id' => 'int[]',
        'name' => 'string',
        'logo' => 'string',
        'id' => 'int',
        'last_modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language_iso_code' => null,
        'favicon' => null,
        'country_iso_code' => null,
        'is_added_by_user' => null,
        'priority' => null,
        'primary_language_iso_code' => null,
        'base_url' => null,
        'login_url' => null,
        'provider_id' => 'int64',
        'name' => null,
        'logo' => null,
        'id' => 'int64',
        'last_modified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'language_iso_code' => false,
        'favicon' => false,
        'country_iso_code' => false,
        'is_added_by_user' => false,
        'priority' => false,
        'primary_language_iso_code' => false,
        'base_url' => false,
        'login_url' => false,
        'provider_id' => false,
        'name' => false,
        'logo' => false,
        'id' => false,
        'last_modified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language_iso_code' => 'languageISOCode',
        'favicon' => 'favicon',
        'country_iso_code' => 'countryISOCode',
        'is_added_by_user' => 'isAddedByUser',
        'priority' => 'PRIORITY',
        'primary_language_iso_code' => 'primaryLanguageISOCode',
        'base_url' => 'baseUrl',
        'login_url' => 'loginUrl',
        'provider_id' => 'providerId',
        'name' => 'name',
        'logo' => 'logo',
        'id' => 'id',
        'last_modified' => 'lastModified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language_iso_code' => 'setLanguageIsoCode',
        'favicon' => 'setFavicon',
        'country_iso_code' => 'setCountryIsoCode',
        'is_added_by_user' => 'setIsAddedByUser',
        'priority' => 'setPriority',
        'primary_language_iso_code' => 'setPrimaryLanguageIsoCode',
        'base_url' => 'setBaseUrl',
        'login_url' => 'setLoginUrl',
        'provider_id' => 'setProviderId',
        'name' => 'setName',
        'logo' => 'setLogo',
        'id' => 'setId',
        'last_modified' => 'setLastModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language_iso_code' => 'getLanguageIsoCode',
        'favicon' => 'getFavicon',
        'country_iso_code' => 'getCountryIsoCode',
        'is_added_by_user' => 'getIsAddedByUser',
        'priority' => 'getPriority',
        'primary_language_iso_code' => 'getPrimaryLanguageIsoCode',
        'base_url' => 'getBaseUrl',
        'login_url' => 'getLoginUrl',
        'provider_id' => 'getProviderId',
        'name' => 'getName',
        'logo' => 'getLogo',
        'id' => 'getId',
        'last_modified' => 'getLastModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRIORITY_POPULAR = 'POPULAR';
    public const PRIORITY_SUGGESTED = 'SUGGESTED';
    public const PRIORITY_COBRAND = 'COBRAND';
    public const PRIORITY_SEARCH = 'SEARCH';
    public const PRIORITY_ALL = 'ALL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_POPULAR,
            self::PRIORITY_SUGGESTED,
            self::PRIORITY_COBRAND,
            self::PRIORITY_SEARCH,
            self::PRIORITY_ALL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('language_iso_code', $data ?? [], null);
        $this->setIfExists('favicon', $data ?? [], null);
        $this->setIfExists('country_iso_code', $data ?? [], null);
        $this->setIfExists('is_added_by_user', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('primary_language_iso_code', $data ?? [], null);
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('login_url', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language_iso_code
     *
     * @return string|null
     */
    public function getLanguageIsoCode()
    {
        return $this->container['language_iso_code'];
    }

    /**
     * Sets language_iso_code
     *
     * @param string|null $language_iso_code The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setLanguageIsoCode($language_iso_code)
    {
        if (is_null($language_iso_code)) {
            throw new \InvalidArgumentException('non-nullable language_iso_code cannot be null');
        }
        $this->container['language_iso_code'] = $language_iso_code;

        return $this;
    }

    /**
     * Gets favicon
     *
     * @return string|null
     */
    public function getFavicon()
    {
        return $this->container['favicon'];
    }

    /**
     * Sets favicon
     *
     * @param string|null $favicon Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setFavicon($favicon)
    {
        if (is_null($favicon)) {
            throw new \InvalidArgumentException('non-nullable favicon cannot be null');
        }
        $this->container['favicon'] = $favicon;

        return $this;
    }

    /**
     * Gets country_iso_code
     *
     * @return string|null
     */
    public function getCountryIsoCode()
    {
        return $this->container['country_iso_code'];
    }

    /**
     * Sets country_iso_code
     *
     * @param string|null $country_iso_code Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setCountryIsoCode($country_iso_code)
    {
        if (is_null($country_iso_code)) {
            throw new \InvalidArgumentException('non-nullable country_iso_code cannot be null');
        }
        $this->container['country_iso_code'] = $country_iso_code;

        return $this;
    }

    /**
     * Gets is_added_by_user
     *
     * @return string|null
     */
    public function getIsAddedByUser()
    {
        return $this->container['is_added_by_user'];
    }

    /**
     * Sets is_added_by_user
     *
     * @param string|null $is_added_by_user Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setIsAddedByUser($is_added_by_user)
    {
        if (is_null($is_added_by_user)) {
            throw new \InvalidArgumentException('non-nullable is_added_by_user cannot be null');
        }
        $this->container['is_added_by_user'] = $is_added_by_user;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets primary_language_iso_code
     *
     * @return string|null
     */
    public function getPrimaryLanguageIsoCode()
    {
        return $this->container['primary_language_iso_code'];
    }

    /**
     * Sets primary_language_iso_code
     *
     * @param string|null $primary_language_iso_code The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setPrimaryLanguageIsoCode($primary_language_iso_code)
    {
        if (is_null($primary_language_iso_code)) {
            throw new \InvalidArgumentException('non-nullable primary_language_iso_code cannot be null');
        }
        $this->container['primary_language_iso_code'] = $primary_language_iso_code;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string|null
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string|null $login_url The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setLoginUrl($login_url)
    {
        if (is_null($login_url)) {
            throw new \InvalidArgumentException('non-nullable login_url cannot be null');
        }
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return int[]|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param int[]|null $provider_id providerId<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier for the provider site.(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string|null $last_modified Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


