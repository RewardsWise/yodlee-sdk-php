<?php
/**
 * ClassificationSummaryTransactionSummary
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * ClassificationSummaryTransactionSummary Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClassificationSummaryTransactionSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClassificationSummaryTransactionSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from_date' => 'string',
        'card_payments' => 'bool',
        'is_primary_account' => 'bool',
        'loan_payments' => 'bool',
        'to_date' => 'string',
        'bill_payments' => 'bool',
        'mortgage_payments' => 'bool',
        'salary_credits' => 'bool',
        'is_active_account' => 'bool',
        'latest_transactions' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\ClassificationSummaryTransaction[]',
        'income_credits' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from_date' => null,
        'card_payments' => null,
        'is_primary_account' => null,
        'loan_payments' => null,
        'to_date' => null,
        'bill_payments' => null,
        'mortgage_payments' => null,
        'salary_credits' => null,
        'is_active_account' => null,
        'latest_transactions' => null,
        'income_credits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from_date' => false,
        'card_payments' => false,
        'is_primary_account' => false,
        'loan_payments' => false,
        'to_date' => false,
        'bill_payments' => false,
        'mortgage_payments' => false,
        'salary_credits' => false,
        'is_active_account' => false,
        'latest_transactions' => false,
        'income_credits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_date' => 'fromDate',
        'card_payments' => 'cardPayments',
        'is_primary_account' => 'isPrimaryAccount',
        'loan_payments' => 'loanPayments',
        'to_date' => 'toDate',
        'bill_payments' => 'billPayments',
        'mortgage_payments' => 'mortgagePayments',
        'salary_credits' => 'salaryCredits',
        'is_active_account' => 'isActiveAccount',
        'latest_transactions' => 'latestTransactions',
        'income_credits' => 'incomeCredits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_date' => 'setFromDate',
        'card_payments' => 'setCardPayments',
        'is_primary_account' => 'setIsPrimaryAccount',
        'loan_payments' => 'setLoanPayments',
        'to_date' => 'setToDate',
        'bill_payments' => 'setBillPayments',
        'mortgage_payments' => 'setMortgagePayments',
        'salary_credits' => 'setSalaryCredits',
        'is_active_account' => 'setIsActiveAccount',
        'latest_transactions' => 'setLatestTransactions',
        'income_credits' => 'setIncomeCredits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_date' => 'getFromDate',
        'card_payments' => 'getCardPayments',
        'is_primary_account' => 'getIsPrimaryAccount',
        'loan_payments' => 'getLoanPayments',
        'to_date' => 'getToDate',
        'bill_payments' => 'getBillPayments',
        'mortgage_payments' => 'getMortgagePayments',
        'salary_credits' => 'getSalaryCredits',
        'is_active_account' => 'getIsActiveAccount',
        'latest_transactions' => 'getLatestTransactions',
        'income_credits' => 'getIncomeCredits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('card_payments', $data ?? [], null);
        $this->setIfExists('is_primary_account', $data ?? [], null);
        $this->setIfExists('loan_payments', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('bill_payments', $data ?? [], null);
        $this->setIfExists('mortgage_payments', $data ?? [], null);
        $this->setIfExists('salary_credits', $data ?? [], null);
        $this->setIfExists('is_active_account', $data ?? [], null);
        $this->setIfExists('latest_transactions', $data ?? [], null);
        $this->setIfExists('income_credits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_date
     *
     * @return string|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param string|null $from_date The date from which the transactions are considered for evaluating the attributes (Date of the oldest transaction for the accountId)
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets card_payments
     *
     * @return bool|null
     */
    public function getCardPayments()
    {
        return $this->container['card_payments'];
    }

    /**
     * Sets card_payments
     *
     * @param bool|null $card_payments Indicates whether the account has any card-related payments based on an implicit logic
     *
     * @return self
     */
    public function setCardPayments($card_payments)
    {
        if (is_null($card_payments)) {
            throw new \InvalidArgumentException('non-nullable card_payments cannot be null');
        }
        $this->container['card_payments'] = $card_payments;

        return $this;
    }

    /**
     * Gets is_primary_account
     *
     * @return bool|null
     */
    public function getIsPrimaryAccount()
    {
        return $this->container['is_primary_account'];
    }

    /**
     * Sets is_primary_account
     *
     * @param bool|null $is_primary_account Indicates whether the account is a primary account based on an implicit logic
     *
     * @return self
     */
    public function setIsPrimaryAccount($is_primary_account)
    {
        if (is_null($is_primary_account)) {
            throw new \InvalidArgumentException('non-nullable is_primary_account cannot be null');
        }
        $this->container['is_primary_account'] = $is_primary_account;

        return $this;
    }

    /**
     * Gets loan_payments
     *
     * @return bool|null
     */
    public function getLoanPayments()
    {
        return $this->container['loan_payments'];
    }

    /**
     * Sets loan_payments
     *
     * @param bool|null $loan_payments Indicates whether the account has any loan payments based on an implicit logic
     *
     * @return self
     */
    public function setLoanPayments($loan_payments)
    {
        if (is_null($loan_payments)) {
            throw new \InvalidArgumentException('non-nullable loan_payments cannot be null');
        }
        $this->container['loan_payments'] = $loan_payments;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return string|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param string|null $to_date The date until which the transactions are considered for evaluating the attributes (Date of the latest transaction for the accountId)
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets bill_payments
     *
     * @return bool|null
     */
    public function getBillPayments()
    {
        return $this->container['bill_payments'];
    }

    /**
     * Sets bill_payments
     *
     * @param bool|null $bill_payments Indicates whether the account has any bill payments based on an implicit logic
     *
     * @return self
     */
    public function setBillPayments($bill_payments)
    {
        if (is_null($bill_payments)) {
            throw new \InvalidArgumentException('non-nullable bill_payments cannot be null');
        }
        $this->container['bill_payments'] = $bill_payments;

        return $this;
    }

    /**
     * Gets mortgage_payments
     *
     * @return bool|null
     */
    public function getMortgagePayments()
    {
        return $this->container['mortgage_payments'];
    }

    /**
     * Sets mortgage_payments
     *
     * @param bool|null $mortgage_payments Indicates whether the account has any mortgage payments based on an implicit logic
     *
     * @return self
     */
    public function setMortgagePayments($mortgage_payments)
    {
        if (is_null($mortgage_payments)) {
            throw new \InvalidArgumentException('non-nullable mortgage_payments cannot be null');
        }
        $this->container['mortgage_payments'] = $mortgage_payments;

        return $this;
    }

    /**
     * Gets salary_credits
     *
     * @return bool|null
     */
    public function getSalaryCredits()
    {
        return $this->container['salary_credits'];
    }

    /**
     * Sets salary_credits
     *
     * @param bool|null $salary_credits Indicates whether the account has salary credits based on an implicit logic
     *
     * @return self
     */
    public function setSalaryCredits($salary_credits)
    {
        if (is_null($salary_credits)) {
            throw new \InvalidArgumentException('non-nullable salary_credits cannot be null');
        }
        $this->container['salary_credits'] = $salary_credits;

        return $this;
    }

    /**
     * Gets is_active_account
     *
     * @return bool|null
     */
    public function getIsActiveAccount()
    {
        return $this->container['is_active_account'];
    }

    /**
     * Sets is_active_account
     *
     * @param bool|null $is_active_account Indicates whether the account is an active account based on an implicit logic
     *
     * @return self
     */
    public function setIsActiveAccount($is_active_account)
    {
        if (is_null($is_active_account)) {
            throw new \InvalidArgumentException('non-nullable is_active_account cannot be null');
        }
        $this->container['is_active_account'] = $is_active_account;

        return $this;
    }

    /**
     * Gets latest_transactions
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\ClassificationSummaryTransaction[]|null
     */
    public function getLatestTransactions()
    {
        return $this->container['latest_transactions'];
    }

    /**
     * Sets latest_transactions
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\ClassificationSummaryTransaction[]|null $latest_transactions An array that lists the details about the latest 3 transactions that occurred in the user's account
     *
     * @return self
     */
    public function setLatestTransactions($latest_transactions)
    {
        if (is_null($latest_transactions)) {
            throw new \InvalidArgumentException('non-nullable latest_transactions cannot be null');
        }
        $this->container['latest_transactions'] = $latest_transactions;

        return $this;
    }

    /**
     * Gets income_credits
     *
     * @return bool|null
     */
    public function getIncomeCredits()
    {
        return $this->container['income_credits'];
    }

    /**
     * Sets income_credits
     *
     * @param bool|null $income_credits Indicates whether the account has any income credits based on an implicit logic
     *
     * @return self
     */
    public function setIncomeCredits($income_credits)
    {
        if (is_null($income_credits)) {
            throw new \InvalidArgumentException('non-nullable income_credits cannot be null');
        }
        $this->container['income_credits'] = $income_credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


