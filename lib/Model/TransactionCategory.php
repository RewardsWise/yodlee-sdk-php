<?php
/**
 * TransactionCategory
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * TransactionCategory Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionCategory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'high_level_category_name' => 'string',
        'default_high_level_category_name' => 'string',
        'high_level_category_id' => 'int',
        'business_category' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessCategory',
        'detail_category' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\DetailCategory[]',
        'id' => 'int',
        'source' => 'string',
        'category' => 'string',
        'classification' => 'string',
        'type' => 'string',
        'default_category_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'high_level_category_name' => null,
        'default_high_level_category_name' => null,
        'high_level_category_id' => 'int64',
        'business_category' => null,
        'detail_category' => null,
        'id' => 'int64',
        'source' => null,
        'category' => null,
        'classification' => null,
        'type' => null,
        'default_category_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'high_level_category_name' => false,
        'default_high_level_category_name' => false,
        'high_level_category_id' => false,
        'business_category' => false,
        'detail_category' => false,
        'id' => false,
        'source' => false,
        'category' => false,
        'classification' => false,
        'type' => false,
        'default_category_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'high_level_category_name' => 'highLevelCategoryName',
        'default_high_level_category_name' => 'defaultHighLevelCategoryName',
        'high_level_category_id' => 'highLevelCategoryId',
        'business_category' => 'businessCategory',
        'detail_category' => 'detailCategory',
        'id' => 'id',
        'source' => 'source',
        'category' => 'category',
        'classification' => 'classification',
        'type' => 'type',
        'default_category_name' => 'defaultCategoryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'high_level_category_name' => 'setHighLevelCategoryName',
        'default_high_level_category_name' => 'setDefaultHighLevelCategoryName',
        'high_level_category_id' => 'setHighLevelCategoryId',
        'business_category' => 'setBusinessCategory',
        'detail_category' => 'setDetailCategory',
        'id' => 'setId',
        'source' => 'setSource',
        'category' => 'setCategory',
        'classification' => 'setClassification',
        'type' => 'setType',
        'default_category_name' => 'setDefaultCategoryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'high_level_category_name' => 'getHighLevelCategoryName',
        'default_high_level_category_name' => 'getDefaultHighLevelCategoryName',
        'high_level_category_id' => 'getHighLevelCategoryId',
        'business_category' => 'getBusinessCategory',
        'detail_category' => 'getDetailCategory',
        'id' => 'getId',
        'source' => 'getSource',
        'category' => 'getCategory',
        'classification' => 'getClassification',
        'type' => 'getType',
        'default_category_name' => 'getDefaultCategoryName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SOURCE_SYSTEM = 'SYSTEM';
    public const SOURCE_USER = 'USER';
    public const CLASSIFICATION_PERSONAL = 'PERSONAL';
    public const CLASSIFICATION_BUSINESS = 'BUSINESS';
    public const TYPE_TRANSFER = 'TRANSFER';
    public const TYPE_DEFERRED_COMPENSATION = 'DEFERRED_COMPENSATION';
    public const TYPE_UNCATEGORIZE = 'UNCATEGORIZE';
    public const TYPE_INCOME = 'INCOME';
    public const TYPE_EXPENSE = 'EXPENSE';
    public const TYPE_LOAN = 'LOAN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_SYSTEM,
            self::SOURCE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_PERSONAL,
            self::CLASSIFICATION_BUSINESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRANSFER,
            self::TYPE_DEFERRED_COMPENSATION,
            self::TYPE_UNCATEGORIZE,
            self::TYPE_INCOME,
            self::TYPE_EXPENSE,
            self::TYPE_LOAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('high_level_category_name', $data ?? [], null);
        $this->setIfExists('default_high_level_category_name', $data ?? [], null);
        $this->setIfExists('high_level_category_id', $data ?? [], null);
        $this->setIfExists('business_category', $data ?? [], null);
        $this->setIfExists('detail_category', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('default_category_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($this->container['classification']) && !in_array($this->container['classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'classification', must be one of '%s'",
                $this->container['classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets high_level_category_name
     *
     * @return string|null
     */
    public function getHighLevelCategoryName()
    {
        return $this->container['high_level_category_name'];
    }

    /**
     * Sets high_level_category_name
     *
     * @param string|null $high_level_category_name The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setHighLevelCategoryName($high_level_category_name)
    {
        if (is_null($high_level_category_name)) {
            throw new \InvalidArgumentException('non-nullable high_level_category_name cannot be null');
        }
        $this->container['high_level_category_name'] = $high_level_category_name;

        return $this;
    }

    /**
     * Gets default_high_level_category_name
     *
     * @return string|null
     */
    public function getDefaultHighLevelCategoryName()
    {
        return $this->container['default_high_level_category_name'];
    }

    /**
     * Sets default_high_level_category_name
     *
     * @param string|null $default_high_level_category_name A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setDefaultHighLevelCategoryName($default_high_level_category_name)
    {
        if (is_null($default_high_level_category_name)) {
            throw new \InvalidArgumentException('non-nullable default_high_level_category_name cannot be null');
        }
        $this->container['default_high_level_category_name'] = $default_high_level_category_name;

        return $this;
    }

    /**
     * Gets high_level_category_id
     *
     * @return int|null
     */
    public function getHighLevelCategoryId()
    {
        return $this->container['high_level_category_id'];
    }

    /**
     * Sets high_level_category_id
     *
     * @param int|null $high_level_category_id The unique identifier of the high level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setHighLevelCategoryId($high_level_category_id)
    {
        if (is_null($high_level_category_id)) {
            throw new \InvalidArgumentException('non-nullable high_level_category_id cannot be null');
        }
        $this->container['high_level_category_id'] = $high_level_category_id;

        return $this;
    }

    /**
     * Gets business_category
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessCategory|null
     */
    public function getBusinessCategory()
    {
        return $this->container['business_category'];
    }

    /**
     * Sets business_category
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\BusinessCategory|null $business_category business_category
     *
     * @return self
     */
    public function setBusinessCategory($business_category)
    {
        if (is_null($business_category)) {
            throw new \InvalidArgumentException('non-nullable business_category cannot be null');
        }
        $this->container['business_category'] = $business_category;

        return $this;
    }

    /**
     * Gets detail_category
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\DetailCategory[]|null
     */
    public function getDetailCategory()
    {
        return $this->container['detail_category'];
    }

    /**
     * Sets detail_category
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\DetailCategory[]|null $detail_category Entity that provides detail category attributes<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setDetailCategory($detail_category)
    {
        if (is_null($detail_category)) {
            throw new \InvalidArgumentException('non-nullable detail_category cannot be null');
        }
        $this->container['detail_category'] = $detail_category;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier of the category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification Category Classification.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $allowedValues = $this->getClassificationAllowableValues();
        if (!in_array($classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'classification', must be one of '%s'",
                    $classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets default_category_name
     *
     * @return string|null
     */
    public function getDefaultCategoryName()
    {
        return $this->container['default_category_name'];
    }

    /**
     * Sets default_category_name
     *
     * @param string|null $default_category_name A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
     *
     * @return self
     */
    public function setDefaultCategoryName($default_category_name)
    {
        if (is_null($default_category_name)) {
            throw new \InvalidArgumentException('non-nullable default_category_name cannot be null');
        }
        $this->container['default_category_name'] = $default_category_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


