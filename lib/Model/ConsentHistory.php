<?php
/**
 * ConsentHistory
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConsentHistory Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsentHistory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsentHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_date_time' => 'string',
        'expiration_date_time' => 'string',
        'user_data_purge' => 'int',
        'deidentification_preference' => 'bool',
        'start_date_time' => 'string',
        'renewed_date_time' => 'string',
        'consent_status' => 'string',
        'revoked_date_time' => 'string',
        'consent_collection_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event_date_time' => null,
        'expiration_date_time' => null,
        'user_data_purge' => 'int64',
        'deidentification_preference' => null,
        'start_date_time' => null,
        'renewed_date_time' => null,
        'consent_status' => null,
        'revoked_date_time' => null,
        'consent_collection_period' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event_date_time' => false,
        'expiration_date_time' => false,
        'user_data_purge' => false,
        'deidentification_preference' => false,
        'start_date_time' => false,
        'renewed_date_time' => false,
        'consent_status' => false,
        'revoked_date_time' => false,
        'consent_collection_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_date_time' => 'eventDateTime',
        'expiration_date_time' => 'expirationDateTime',
        'user_data_purge' => 'userDataPurge',
        'deidentification_preference' => 'deidentificationPreference',
        'start_date_time' => 'startDateTime',
        'renewed_date_time' => 'renewedDateTime',
        'consent_status' => 'consentStatus',
        'revoked_date_time' => 'revokedDateTime',
        'consent_collection_period' => 'consentCollectionPeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_date_time' => 'setEventDateTime',
        'expiration_date_time' => 'setExpirationDateTime',
        'user_data_purge' => 'setUserDataPurge',
        'deidentification_preference' => 'setDeidentificationPreference',
        'start_date_time' => 'setStartDateTime',
        'renewed_date_time' => 'setRenewedDateTime',
        'consent_status' => 'setConsentStatus',
        'revoked_date_time' => 'setRevokedDateTime',
        'consent_collection_period' => 'setConsentCollectionPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_date_time' => 'getEventDateTime',
        'expiration_date_time' => 'getExpirationDateTime',
        'user_data_purge' => 'getUserDataPurge',
        'deidentification_preference' => 'getDeidentificationPreference',
        'start_date_time' => 'getStartDateTime',
        'renewed_date_time' => 'getRenewedDateTime',
        'consent_status' => 'getConsentStatus',
        'revoked_date_time' => 'getRevokedDateTime',
        'consent_collection_period' => 'getConsentCollectionPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONSENT_STATUS_ACTIVE = 'ACTIVE';
    public const CONSENT_STATUS_EXPIRED = 'EXPIRED';
    public const CONSENT_STATUS_REVOKED = 'REVOKED';
    public const CONSENT_STATUS_CONSENT_REPEALED = 'CONSENT_REPEALED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsentStatusAllowableValues()
    {
        return [
            self::CONSENT_STATUS_ACTIVE,
            self::CONSENT_STATUS_EXPIRED,
            self::CONSENT_STATUS_REVOKED,
            self::CONSENT_STATUS_CONSENT_REPEALED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('event_date_time', $data ?? [], null);
        $this->setIfExists('expiration_date_time', $data ?? [], null);
        $this->setIfExists('user_data_purge', $data ?? [], null);
        $this->setIfExists('deidentification_preference', $data ?? [], null);
        $this->setIfExists('start_date_time', $data ?? [], null);
        $this->setIfExists('renewed_date_time', $data ?? [], null);
        $this->setIfExists('consent_status', $data ?? [], null);
        $this->setIfExists('revoked_date_time', $data ?? [], null);
        $this->setIfExists('consent_collection_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_date_time'] === null) {
            $invalidProperties[] = "'event_date_time' can't be null";
        }
        if ($this->container['start_date_time'] === null) {
            $invalidProperties[] = "'start_date_time' can't be null";
        }
        if ($this->container['consent_status'] === null) {
            $invalidProperties[] = "'consent_status' can't be null";
        }
        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!is_null($this->container['consent_status']) && !in_array($this->container['consent_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'consent_status', must be one of '%s'",
                $this->container['consent_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_date_time
     *
     * @return string
     */
    public function getEventDateTime()
    {
        return $this->container['event_date_time'];
    }

    /**
     * Sets event_date_time
     *
     * @param string $event_date_time History logged datetime.
     *
     * @return self
     */
    public function setEventDateTime($event_date_time)
    {
        if (is_null($event_date_time)) {
            throw new \InvalidArgumentException('non-nullable event_date_time cannot be null');
        }
        $this->container['event_date_time'] = $event_date_time;

        return $this;
    }

    /**
     * Gets expiration_date_time
     *
     * @return string|null
     */
    public function getExpirationDateTime()
    {
        return $this->container['expiration_date_time'];
    }

    /**
     * Sets expiration_date_time
     *
     * @param string|null $expiration_date_time Consent expiry datetime where supported by the provider.
     *
     * @return self
     */
    public function setExpirationDateTime($expiration_date_time)
    {
        if (is_null($expiration_date_time)) {
            throw new \InvalidArgumentException('non-nullable expiration_date_time cannot be null');
        }
        $this->container['expiration_date_time'] = $expiration_date_time;

        return $this;
    }

    /**
     * Gets user_data_purge
     *
     * @return int|null
     */
    public function getUserDataPurge()
    {
        return $this->container['user_data_purge'];
    }

    /**
     * Sets user_data_purge
     *
     * @param int|null $user_data_purge Applicable data deletion preference for consent as per AU OB onboarding model and user's &quot;delete my data instead&quot; option. This data point is applicable for AU Open Banking region only.
     *
     * @return self
     */
    public function setUserDataPurge($user_data_purge)
    {
        if (is_null($user_data_purge)) {
            throw new \InvalidArgumentException('non-nullable user_data_purge cannot be null');
        }
        $this->container['user_data_purge'] = $user_data_purge;

        return $this;
    }

    /**
     * Gets deidentification_preference
     *
     * @return bool|null
     */
    public function getDeidentificationPreference()
    {
        return $this->container['deidentification_preference'];
    }

    /**
     * Sets deidentification_preference
     *
     * @param bool|null $deidentification_preference whether user has given consent to use deidentified data or not. This data point is applicable for AU Open Banking region only. Oauthpref id = 4
     *
     * @return self
     */
    public function setDeidentificationPreference($deidentification_preference)
    {
        if (is_null($deidentification_preference)) {
            throw new \InvalidArgumentException('non-nullable deidentification_preference cannot be null');
        }
        $this->container['deidentification_preference'] = $deidentification_preference;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return string
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param string $start_date_time Consent start datetime.
     *
     * @return self
     */
    public function setStartDateTime($start_date_time)
    {
        if (is_null($start_date_time)) {
            throw new \InvalidArgumentException('non-nullable start_date_time cannot be null');
        }
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets renewed_date_time
     *
     * @return string|null
     */
    public function getRenewedDateTime()
    {
        return $this->container['renewed_date_time'];
    }

    /**
     * Sets renewed_date_time
     *
     * @param string|null $renewed_date_time Consent renewed datetime.
     *
     * @return self
     */
    public function setRenewedDateTime($renewed_date_time)
    {
        if (is_null($renewed_date_time)) {
            throw new \InvalidArgumentException('non-nullable renewed_date_time cannot be null');
        }
        $this->container['renewed_date_time'] = $renewed_date_time;

        return $this;
    }

    /**
     * Gets consent_status
     *
     * @return string
     */
    public function getConsentStatus()
    {
        return $this->container['consent_status'];
    }

    /**
     * Sets consent_status
     *
     * @param string $consent_status Status of the consent in each history event. Statuses will be shown as applicable for Open Banking regions.
     *
     * @return self
     */
    public function setConsentStatus($consent_status)
    {
        if (is_null($consent_status)) {
            throw new \InvalidArgumentException('non-nullable consent_status cannot be null');
        }
        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!in_array($consent_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'consent_status', must be one of '%s'",
                    $consent_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consent_status'] = $consent_status;

        return $this;
    }

    /**
     * Gets revoked_date_time
     *
     * @return string|null
     */
    public function getRevokedDateTime()
    {
        return $this->container['revoked_date_time'];
    }

    /**
     * Sets revoked_date_time
     *
     * @param string|null $revoked_date_time Revoked datetime for the consent if consent is revoked.
     *
     * @return self
     */
    public function setRevokedDateTime($revoked_date_time)
    {
        if (is_null($revoked_date_time)) {
            throw new \InvalidArgumentException('non-nullable revoked_date_time cannot be null');
        }
        $this->container['revoked_date_time'] = $revoked_date_time;

        return $this;
    }

    /**
     * Gets consent_collection_period
     *
     * @return int|null
     */
    public function getConsentCollectionPeriod()
    {
        return $this->container['consent_collection_period'];
    }

    /**
     * Sets consent_collection_period
     *
     * @param int|null $consent_collection_period Consent duration period selected by user for recurring consents during the new account addition or consent renewal. This data point is applicable for AU Open Banking region only. Oauthpref id = 6
     *
     * @return self
     */
    public function setConsentCollectionPeriod($consent_collection_period)
    {
        if (is_null($consent_collection_period)) {
            throw new \InvalidArgumentException('non-nullable consent_collection_period cannot be null');
        }
        $this->container['consent_collection_period'] = $consent_collection_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


