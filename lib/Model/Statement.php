<?php
/**
 * Statement
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * Statement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Statement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Statement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apr' => 'float',
        'cash_apr' => 'float',
        'billing_period_start' => 'string',
        'due_date' => 'string',
        'interest_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'statement_date' => 'string',
        'cash_advance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'billing_period_end' => 'string',
        'principal_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'loan_balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'amount_due' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_id' => 'int',
        'last_updated' => 'string',
        'is_latest' => 'bool',
        'minimum_payment' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'last_payment_date' => 'string',
        'last_payment_amount' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'id' => 'int',
        'new_charges' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apr' => 'double',
        'cash_apr' => 'double',
        'billing_period_start' => null,
        'due_date' => null,
        'interest_amount' => null,
        'statement_date' => null,
        'cash_advance' => null,
        'billing_period_end' => null,
        'principal_amount' => null,
        'loan_balance' => null,
        'amount_due' => null,
        'account_id' => 'int64',
        'last_updated' => null,
        'is_latest' => null,
        'minimum_payment' => null,
        'last_payment_date' => null,
        'last_payment_amount' => null,
        'id' => 'int64',
        'new_charges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'apr' => false,
        'cash_apr' => false,
        'billing_period_start' => false,
        'due_date' => false,
        'interest_amount' => false,
        'statement_date' => false,
        'cash_advance' => false,
        'billing_period_end' => false,
        'principal_amount' => false,
        'loan_balance' => false,
        'amount_due' => false,
        'account_id' => false,
        'last_updated' => false,
        'is_latest' => false,
        'minimum_payment' => false,
        'last_payment_date' => false,
        'last_payment_amount' => false,
        'id' => false,
        'new_charges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apr' => 'apr',
        'cash_apr' => 'cashApr',
        'billing_period_start' => 'billingPeriodStart',
        'due_date' => 'dueDate',
        'interest_amount' => 'interestAmount',
        'statement_date' => 'statementDate',
        'cash_advance' => 'cashAdvance',
        'billing_period_end' => 'billingPeriodEnd',
        'principal_amount' => 'principalAmount',
        'loan_balance' => 'loanBalance',
        'amount_due' => 'amountDue',
        'account_id' => 'accountId',
        'last_updated' => 'lastUpdated',
        'is_latest' => 'isLatest',
        'minimum_payment' => 'minimumPayment',
        'last_payment_date' => 'lastPaymentDate',
        'last_payment_amount' => 'lastPaymentAmount',
        'id' => 'id',
        'new_charges' => 'newCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apr' => 'setApr',
        'cash_apr' => 'setCashApr',
        'billing_period_start' => 'setBillingPeriodStart',
        'due_date' => 'setDueDate',
        'interest_amount' => 'setInterestAmount',
        'statement_date' => 'setStatementDate',
        'cash_advance' => 'setCashAdvance',
        'billing_period_end' => 'setBillingPeriodEnd',
        'principal_amount' => 'setPrincipalAmount',
        'loan_balance' => 'setLoanBalance',
        'amount_due' => 'setAmountDue',
        'account_id' => 'setAccountId',
        'last_updated' => 'setLastUpdated',
        'is_latest' => 'setIsLatest',
        'minimum_payment' => 'setMinimumPayment',
        'last_payment_date' => 'setLastPaymentDate',
        'last_payment_amount' => 'setLastPaymentAmount',
        'id' => 'setId',
        'new_charges' => 'setNewCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apr' => 'getApr',
        'cash_apr' => 'getCashApr',
        'billing_period_start' => 'getBillingPeriodStart',
        'due_date' => 'getDueDate',
        'interest_amount' => 'getInterestAmount',
        'statement_date' => 'getStatementDate',
        'cash_advance' => 'getCashAdvance',
        'billing_period_end' => 'getBillingPeriodEnd',
        'principal_amount' => 'getPrincipalAmount',
        'loan_balance' => 'getLoanBalance',
        'amount_due' => 'getAmountDue',
        'account_id' => 'getAccountId',
        'last_updated' => 'getLastUpdated',
        'is_latest' => 'getIsLatest',
        'minimum_payment' => 'getMinimumPayment',
        'last_payment_date' => 'getLastPaymentDate',
        'last_payment_amount' => 'getLastPaymentAmount',
        'id' => 'getId',
        'new_charges' => 'getNewCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('cash_apr', $data ?? [], null);
        $this->setIfExists('billing_period_start', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('interest_amount', $data ?? [], null);
        $this->setIfExists('statement_date', $data ?? [], null);
        $this->setIfExists('cash_advance', $data ?? [], null);
        $this->setIfExists('billing_period_end', $data ?? [], null);
        $this->setIfExists('principal_amount', $data ?? [], null);
        $this->setIfExists('loan_balance', $data ?? [], null);
        $this->setIfExists('amount_due', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('is_latest', $data ?? [], null);
        $this->setIfExists('minimum_payment', $data ?? [], null);
        $this->setIfExists('last_payment_date', $data ?? [], null);
        $this->setIfExists('last_payment_amount', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('new_charges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apr
     *
     * @return float|null
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr
     *
     * @param float|null $apr The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            throw new \InvalidArgumentException('non-nullable apr cannot be null');
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets cash_apr
     *
     * @return float|null
     */
    public function getCashApr()
    {
        return $this->container['cash_apr'];
    }

    /**
     * Sets cash_apr
     *
     * @param float|null $cash_apr The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setCashApr($cash_apr)
    {
        if (is_null($cash_apr)) {
            throw new \InvalidArgumentException('non-nullable cash_apr cannot be null');
        }
        $this->container['cash_apr'] = $cash_apr;

        return $this;
    }

    /**
     * Gets billing_period_start
     *
     * @return string|null
     */
    public function getBillingPeriodStart()
    {
        return $this->container['billing_period_start'];
    }

    /**
     * Sets billing_period_start
     *
     * @param string|null $billing_period_start The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setBillingPeriodStart($billing_period_start)
    {
        if (is_null($billing_period_start)) {
            throw new \InvalidArgumentException('non-nullable billing_period_start cannot be null');
        }
        $this->container['billing_period_start'] = $billing_period_start;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets interest_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getInterestAmount()
    {
        return $this->container['interest_amount'];
    }

    /**
     * Sets interest_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $interest_amount interest_amount
     *
     * @return self
     */
    public function setInterestAmount($interest_amount)
    {
        if (is_null($interest_amount)) {
            throw new \InvalidArgumentException('non-nullable interest_amount cannot be null');
        }
        $this->container['interest_amount'] = $interest_amount;

        return $this;
    }

    /**
     * Gets statement_date
     *
     * @return string|null
     */
    public function getStatementDate()
    {
        return $this->container['statement_date'];
    }

    /**
     * Sets statement_date
     *
     * @param string|null $statement_date The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setStatementDate($statement_date)
    {
        if (is_null($statement_date)) {
            throw new \InvalidArgumentException('non-nullable statement_date cannot be null');
        }
        $this->container['statement_date'] = $statement_date;

        return $this;
    }

    /**
     * Gets cash_advance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getCashAdvance()
    {
        return $this->container['cash_advance'];
    }

    /**
     * Sets cash_advance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $cash_advance cash_advance
     *
     * @return self
     */
    public function setCashAdvance($cash_advance)
    {
        if (is_null($cash_advance)) {
            throw new \InvalidArgumentException('non-nullable cash_advance cannot be null');
        }
        $this->container['cash_advance'] = $cash_advance;

        return $this;
    }

    /**
     * Gets billing_period_end
     *
     * @return string|null
     */
    public function getBillingPeriodEnd()
    {
        return $this->container['billing_period_end'];
    }

    /**
     * Sets billing_period_end
     *
     * @param string|null $billing_period_end The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setBillingPeriodEnd($billing_period_end)
    {
        if (is_null($billing_period_end)) {
            throw new \InvalidArgumentException('non-nullable billing_period_end cannot be null');
        }
        $this->container['billing_period_end'] = $billing_period_end;

        return $this;
    }

    /**
     * Gets principal_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getPrincipalAmount()
    {
        return $this->container['principal_amount'];
    }

    /**
     * Sets principal_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $principal_amount principal_amount
     *
     * @return self
     */
    public function setPrincipalAmount($principal_amount)
    {
        if (is_null($principal_amount)) {
            throw new \InvalidArgumentException('non-nullable principal_amount cannot be null');
        }
        $this->container['principal_amount'] = $principal_amount;

        return $this;
    }

    /**
     * Gets loan_balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLoanBalance()
    {
        return $this->container['loan_balance'];
    }

    /**
     * Sets loan_balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $loan_balance loan_balance
     *
     * @return self
     */
    public function setLoanBalance($loan_balance)
    {
        if (is_null($loan_balance)) {
            throw new \InvalidArgumentException('non-nullable loan_balance cannot be null');
        }
        $this->container['loan_balance'] = $loan_balance;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $amount_due amount_due
     *
     * @return self
     */
    public function setAmountDue($amount_due)
    {
        if (is_null($amount_due)) {
            throw new \InvalidArgumentException('non-nullable amount_due cannot be null');
        }
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets is_latest
     *
     * @return bool|null
     */
    public function getIsLatest()
    {
        return $this->container['is_latest'];
    }

    /**
     * Sets is_latest
     *
     * @param bool|null $is_latest The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setIsLatest($is_latest)
    {
        if (is_null($is_latest)) {
            throw new \InvalidArgumentException('non-nullable is_latest cannot be null');
        }
        $this->container['is_latest'] = $is_latest;

        return $this;
    }

    /**
     * Gets minimum_payment
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getMinimumPayment()
    {
        return $this->container['minimum_payment'];
    }

    /**
     * Sets minimum_payment
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $minimum_payment minimum_payment
     *
     * @return self
     */
    public function setMinimumPayment($minimum_payment)
    {
        if (is_null($minimum_payment)) {
            throw new \InvalidArgumentException('non-nullable minimum_payment cannot be null');
        }
        $this->container['minimum_payment'] = $minimum_payment;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return string|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param string|null $last_payment_date The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        if (is_null($last_payment_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_date cannot be null');
        }
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $last_payment_amount last_payment_amount
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        if (is_null($last_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_amount cannot be null');
        }
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard, loan, insurance<br>
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets new_charges
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getNewCharges()
    {
        return $this->container['new_charges'];
    }

    /**
     * Sets new_charges
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $new_charges new_charges
     *
     * @return self
     */
    public function setNewCharges($new_charges)
    {
        if (is_null($new_charges)) {
            throw new \InvalidArgumentException('non-nullable new_charges cannot be null');
        }
        $this->container['new_charges'] = $new_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


