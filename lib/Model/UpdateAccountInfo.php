<?php
/**
 * UpdateAccountInfo
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RewardsWise\Yodlee\OpenAPI\Client\Model;

use \ArrayAccess;
use \RewardsWise\Yodlee\OpenAPI\Client\ObjectSerializer;

/**
 * UpdateAccountInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateAccountInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateAccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'container' => 'string',
        'include_in_net_worth' => 'string',
        'address' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress',
        'account_name' => 'string',
        'due_date' => 'string',
        'memo' => 'string',
        'home_value' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'account_number' => 'string',
        'frequency' => 'string',
        'account_status' => 'string',
        'amount_due' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'linked_account_ids' => 'int[]',
        'balance' => '\RewardsWise\Yodlee\OpenAPI\Client\Model\Money',
        'is_ebill_enrolled' => 'string',
        'nickname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'container' => null,
        'include_in_net_worth' => null,
        'address' => null,
        'account_name' => null,
        'due_date' => null,
        'memo' => null,
        'home_value' => null,
        'account_number' => null,
        'frequency' => null,
        'account_status' => null,
        'amount_due' => null,
        'linked_account_ids' => 'int64',
        'balance' => null,
        'is_ebill_enrolled' => null,
        'nickname' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'container' => false,
        'include_in_net_worth' => false,
        'address' => false,
        'account_name' => false,
        'due_date' => false,
        'memo' => false,
        'home_value' => false,
        'account_number' => false,
        'frequency' => false,
        'account_status' => false,
        'amount_due' => false,
        'linked_account_ids' => false,
        'balance' => false,
        'is_ebill_enrolled' => false,
        'nickname' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container' => 'container',
        'include_in_net_worth' => 'includeInNetWorth',
        'address' => 'address',
        'account_name' => 'accountName',
        'due_date' => 'dueDate',
        'memo' => 'memo',
        'home_value' => 'homeValue',
        'account_number' => 'accountNumber',
        'frequency' => 'frequency',
        'account_status' => 'accountStatus',
        'amount_due' => 'amountDue',
        'linked_account_ids' => 'linkedAccountIds',
        'balance' => 'balance',
        'is_ebill_enrolled' => 'isEbillEnrolled',
        'nickname' => 'nickname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container' => 'setContainer',
        'include_in_net_worth' => 'setIncludeInNetWorth',
        'address' => 'setAddress',
        'account_name' => 'setAccountName',
        'due_date' => 'setDueDate',
        'memo' => 'setMemo',
        'home_value' => 'setHomeValue',
        'account_number' => 'setAccountNumber',
        'frequency' => 'setFrequency',
        'account_status' => 'setAccountStatus',
        'amount_due' => 'setAmountDue',
        'linked_account_ids' => 'setLinkedAccountIds',
        'balance' => 'setBalance',
        'is_ebill_enrolled' => 'setIsEbillEnrolled',
        'nickname' => 'setNickname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container' => 'getContainer',
        'include_in_net_worth' => 'getIncludeInNetWorth',
        'address' => 'getAddress',
        'account_name' => 'getAccountName',
        'due_date' => 'getDueDate',
        'memo' => 'getMemo',
        'home_value' => 'getHomeValue',
        'account_number' => 'getAccountNumber',
        'frequency' => 'getFrequency',
        'account_status' => 'getAccountStatus',
        'amount_due' => 'getAmountDue',
        'linked_account_ids' => 'getLinkedAccountIds',
        'balance' => 'getBalance',
        'is_ebill_enrolled' => 'getIsEbillEnrolled',
        'nickname' => 'getNickname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTAINER_BANK = 'bank';
    public const CONTAINER_CREDIT_CARD = 'creditCard';
    public const CONTAINER_INVESTMENT = 'investment';
    public const CONTAINER_INSURANCE = 'insurance';
    public const CONTAINER_LOAN = 'loan';
    public const CONTAINER_REWARD = 'reward';
    public const CONTAINER_BILL = 'bill';
    public const CONTAINER_REAL_ESTATE = 'realEstate';
    public const CONTAINER_OTHER_ASSETS = 'otherAssets';
    public const CONTAINER_OTHER_LIABILITIES = 'otherLiabilities';
    public const FREQUENCY_DAILY = 'DAILY';
    public const FREQUENCY_ONE_TIME = 'ONE_TIME';
    public const FREQUENCY_WEEKLY = 'WEEKLY';
    public const FREQUENCY_EVERY_2_WEEKS = 'EVERY_2_WEEKS';
    public const FREQUENCY_SEMI_MONTHLY = 'SEMI_MONTHLY';
    public const FREQUENCY_MONTHLY = 'MONTHLY';
    public const FREQUENCY_QUARTERLY = 'QUARTERLY';
    public const FREQUENCY_SEMI_ANNUALLY = 'SEMI_ANNUALLY';
    public const FREQUENCY_ANNUALLY = 'ANNUALLY';
    public const FREQUENCY_EVERY_2_MONTHS = 'EVERY_2_MONTHS';
    public const FREQUENCY_EBILL = 'EBILL';
    public const FREQUENCY_FIRST_DAY_MONTHLY = 'FIRST_DAY_MONTHLY';
    public const FREQUENCY_LAST_DAY_MONTHLY = 'LAST_DAY_MONTHLY';
    public const FREQUENCY_EVERY_4_WEEKS = 'EVERY_4_WEEKS';
    public const FREQUENCY_UNKNOWN = 'UNKNOWN';
    public const FREQUENCY_OTHER = 'OTHER';
    public const ACCOUNT_STATUS_ACTIVE = 'ACTIVE';
    public const ACCOUNT_STATUS_INACTIVE = 'INACTIVE';
    public const ACCOUNT_STATUS_TO_BE_CLOSED = 'TO_BE_CLOSED';
    public const ACCOUNT_STATUS_CLOSED = 'CLOSED';
    public const ACCOUNT_STATUS_DELETED = 'DELETED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerAllowableValues()
    {
        return [
            self::CONTAINER_BANK,
            self::CONTAINER_CREDIT_CARD,
            self::CONTAINER_INVESTMENT,
            self::CONTAINER_INSURANCE,
            self::CONTAINER_LOAN,
            self::CONTAINER_REWARD,
            self::CONTAINER_BILL,
            self::CONTAINER_REAL_ESTATE,
            self::CONTAINER_OTHER_ASSETS,
            self::CONTAINER_OTHER_LIABILITIES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_DAILY,
            self::FREQUENCY_ONE_TIME,
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_EVERY_2_WEEKS,
            self::FREQUENCY_SEMI_MONTHLY,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_QUARTERLY,
            self::FREQUENCY_SEMI_ANNUALLY,
            self::FREQUENCY_ANNUALLY,
            self::FREQUENCY_EVERY_2_MONTHS,
            self::FREQUENCY_EBILL,
            self::FREQUENCY_FIRST_DAY_MONTHLY,
            self::FREQUENCY_LAST_DAY_MONTHLY,
            self::FREQUENCY_EVERY_4_WEEKS,
            self::FREQUENCY_UNKNOWN,
            self::FREQUENCY_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_ACTIVE,
            self::ACCOUNT_STATUS_INACTIVE,
            self::ACCOUNT_STATUS_TO_BE_CLOSED,
            self::ACCOUNT_STATUS_CLOSED,
            self::ACCOUNT_STATUS_DELETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('include_in_net_worth', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('home_value', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('account_status', $data ?? [], null);
        $this->setIfExists('amount_due', $data ?? [], null);
        $this->setIfExists('linked_account_ids', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('is_ebill_enrolled', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContainerAllowableValues();
        if (!is_null($this->container['container']) && !in_array($this->container['container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container', must be one of '%s'",
                $this->container['container'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_name']) && (mb_strlen($this->container['account_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['account_name']) && (mb_strlen($this->container['account_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 250)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 0)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['account_number']) && !preg_match("/^[a-zA-Z0-9]+$/", $this->container['account_number'])) {
            $invalidProperties[] = "invalid value for 'account_number', must be conform to the pattern /^[a-zA-Z0-9]+$/.";
        }

        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'frequency', must be one of '%s'",
                $this->container['frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['account_status']) && !in_array($this->container['account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_status', must be one of '%s'",
                $this->container['account_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['nickname']) && (mb_strlen($this->container['nickname']) > 50)) {
            $invalidProperties[] = "invalid value for 'nickname', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['nickname']) && (mb_strlen($this->container['nickname']) < 0)) {
            $invalidProperties[] = "invalid value for 'nickname', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $allowedValues = $this->getContainerAllowableValues();
        if (!in_array($container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container', must be one of '%s'",
                    $container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets include_in_net_worth
     *
     * @return string|null
     */
    public function getIncludeInNetWorth()
    {
        return $this->container['include_in_net_worth'];
    }

    /**
     * Sets include_in_net_worth
     *
     * @param string|null $include_in_net_worth include_in_net_worth
     *
     * @return self
     */
    public function setIncludeInNetWorth($include_in_net_worth)
    {
        if (is_null($include_in_net_worth)) {
            throw new \InvalidArgumentException('non-nullable include_in_net_worth cannot be null');
        }
        $this->container['include_in_net_worth'] = $include_in_net_worth;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\AccountAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        if ((mb_strlen($account_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling UpdateAccountInfo., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($account_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling UpdateAccountInfo., must be bigger than or equal to 1.');
        }

        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        if ((mb_strlen($memo) > 250)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling UpdateAccountInfo., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($memo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling UpdateAccountInfo., must be bigger than or equal to 0.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets home_value
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getHomeValue()
    {
        return $this->container['home_value'];
    }

    /**
     * Sets home_value
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $home_value home_value
     *
     * @return self
     */
    public function setHomeValue($home_value)
    {
        if (is_null($home_value)) {
            throw new \InvalidArgumentException('non-nullable home_value cannot be null');
        }
        $this->container['home_value'] = $home_value;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        if ((mb_strlen($account_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling UpdateAccountInfo., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($account_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling UpdateAccountInfo., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]+$/", ObjectSerializer::toString($account_number)))) {
            throw new \InvalidArgumentException("invalid value for \$account_number when calling UpdateAccountInfo., must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string|null $frequency frequency
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'frequency', must be one of '%s'",
                    $frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string|null
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string|null $account_status account_status
     *
     * @return self
     */
    public function setAccountStatus($account_status)
    {
        if (is_null($account_status)) {
            throw new \InvalidArgumentException('non-nullable account_status cannot be null');
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!in_array($account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_status', must be one of '%s'",
                    $account_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $amount_due amount_due
     *
     * @return self
     */
    public function setAmountDue($amount_due)
    {
        if (is_null($amount_due)) {
            throw new \InvalidArgumentException('non-nullable amount_due cannot be null');
        }
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets linked_account_ids
     *
     * @return int[]|null
     */
    public function getLinkedAccountIds()
    {
        return $this->container['linked_account_ids'];
    }

    /**
     * Sets linked_account_ids
     *
     * @param int[]|null $linked_account_ids List of loan accounts to which a real-estate account is linked.
     *
     * @return self
     */
    public function setLinkedAccountIds($linked_account_ids)
    {
        if (is_null($linked_account_ids)) {
            throw new \InvalidArgumentException('non-nullable linked_account_ids cannot be null');
        }
        $this->container['linked_account_ids'] = $linked_account_ids;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \RewardsWise\Yodlee\OpenAPI\Client\Model\Money|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets is_ebill_enrolled
     *
     * @return string|null
     */
    public function getIsEbillEnrolled()
    {
        return $this->container['is_ebill_enrolled'];
    }

    /**
     * Sets is_ebill_enrolled
     *
     * @param string|null $is_ebill_enrolled is_ebill_enrolled
     *
     * @return self
     */
    public function setIsEbillEnrolled($is_ebill_enrolled)
    {
        if (is_null($is_ebill_enrolled)) {
            throw new \InvalidArgumentException('non-nullable is_ebill_enrolled cannot be null');
        }
        $this->container['is_ebill_enrolled'] = $is_ebill_enrolled;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        if ((mb_strlen($nickname) > 50)) {
            throw new \InvalidArgumentException('invalid length for $nickname when calling UpdateAccountInfo., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($nickname) < 0)) {
            throw new \InvalidArgumentException('invalid length for $nickname when calling UpdateAccountInfo., must be bigger than or equal to 0.');
        }

        $this->container['nickname'] = $nickname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


